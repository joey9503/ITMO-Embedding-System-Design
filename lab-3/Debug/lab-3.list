
lab-3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040f4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080042a4  080042a4  000142a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800432c  0800432c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800432c  0800432c  0001432c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004334  08004334  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004334  08004334  00014334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004338  08004338  00014338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800433c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004974  20000010  0800434c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004984  0800434c  00024984  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001041f  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000216c  00000000  00000000  0003045f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b70  00000000  00000000  000325d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a78  00000000  00000000  00033140  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000239e  00000000  00000000  00033bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a3ae  00000000  00000000  00035f56  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d719c  00000000  00000000  00040304  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001174a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002df8  00000000  00000000  0011751c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800428c 	.word	0x0800428c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	0800428c 	.word	0x0800428c

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b972 	b.w	80004ec <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	4688      	mov	r8, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14b      	bne.n	80002c6 <__udivmoddi4+0xa6>
 800022e:	428a      	cmp	r2, r1
 8000230:	4615      	mov	r5, r2
 8000232:	d967      	bls.n	8000304 <__udivmoddi4+0xe4>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0720 	rsb	r7, r2, #32
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	fa20 f707 	lsr.w	r7, r0, r7
 8000246:	4095      	lsls	r5, r2
 8000248:	ea47 0803 	orr.w	r8, r7, r3
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbb8 f7fe 	udiv	r7, r8, lr
 8000258:	fa1f fc85 	uxth.w	ip, r5
 800025c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000260:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000264:	fb07 f10c 	mul.w	r1, r7, ip
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18eb      	adds	r3, r5, r3
 800026e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000272:	f080 811b 	bcs.w	80004ac <__udivmoddi4+0x28c>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8118 	bls.w	80004ac <__udivmoddi4+0x28c>
 800027c:	3f02      	subs	r7, #2
 800027e:	442b      	add	r3, r5
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0fe 	udiv	r0, r3, lr
 8000288:	fb0e 3310 	mls	r3, lr, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fc0c 	mul.w	ip, r0, ip
 8000294:	45a4      	cmp	ip, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	192c      	adds	r4, r5, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x290>
 80002a2:	45a4      	cmp	ip, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x290>
 80002a8:	3802      	subs	r0, #2
 80002aa:	442c      	add	r4, r5
 80002ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b0:	eba4 040c 	sub.w	r4, r4, ip
 80002b4:	2700      	movs	r7, #0
 80002b6:	b11e      	cbz	r6, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c6 4300 	strd	r4, r3, [r6]
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xbe>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80eb 	beq.w	80004a6 <__udivmoddi4+0x286>
 80002d0:	2700      	movs	r7, #0
 80002d2:	e9c6 0100 	strd	r0, r1, [r6]
 80002d6:	4638      	mov	r0, r7
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f783 	clz	r7, r3
 80002e2:	2f00      	cmp	r7, #0
 80002e4:	d147      	bne.n	8000376 <__udivmoddi4+0x156>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd0>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80fa 	bhi.w	80004e4 <__udivmoddi4+0x2c4>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	4698      	mov	r8, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa0>
 80002fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xe8>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 808f 	bne.w	8000430 <__udivmoddi4+0x210>
 8000312:	1b49      	subs	r1, r1, r5
 8000314:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000318:	fa1f f885 	uxth.w	r8, r5
 800031c:	2701      	movs	r7, #1
 800031e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fb0e 111c 	mls	r1, lr, ip, r1
 8000328:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032c:	fb08 f10c 	mul.w	r1, r8, ip
 8000330:	4299      	cmp	r1, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x124>
 8000334:	18eb      	adds	r3, r5, r3
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4299      	cmp	r1, r3
 800033e:	f200 80cd 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 8000342:	4684      	mov	ip, r0
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000350:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x14c>
 800035c:	192c      	adds	r4, r5, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x14a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80b6 	bhi.w	80004d6 <__udivmoddi4+0x2b6>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e79f      	b.n	80002b6 <__udivmoddi4+0x96>
 8000376:	f1c7 0c20 	rsb	ip, r7, #32
 800037a:	40bb      	lsls	r3, r7
 800037c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000380:	ea4e 0e03 	orr.w	lr, lr, r3
 8000384:	fa01 f407 	lsl.w	r4, r1, r7
 8000388:	fa20 f50c 	lsr.w	r5, r0, ip
 800038c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000390:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000394:	4325      	orrs	r5, r4
 8000396:	fbb3 f9f8 	udiv	r9, r3, r8
 800039a:	0c2c      	lsrs	r4, r5, #16
 800039c:	fb08 3319 	mls	r3, r8, r9, r3
 80003a0:	fa1f fa8e 	uxth.w	sl, lr
 80003a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ac:	429c      	cmp	r4, r3
 80003ae:	fa02 f207 	lsl.w	r2, r2, r7
 80003b2:	fa00 f107 	lsl.w	r1, r0, r7
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1e 0303 	adds.w	r3, lr, r3
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c0:	f080 8087 	bcs.w	80004d2 <__udivmoddi4+0x2b2>
 80003c4:	429c      	cmp	r4, r3
 80003c6:	f240 8084 	bls.w	80004d2 <__udivmoddi4+0x2b2>
 80003ca:	f1a9 0902 	sub.w	r9, r9, #2
 80003ce:	4473      	add	r3, lr
 80003d0:	1b1b      	subs	r3, r3, r4
 80003d2:	b2ad      	uxth	r5, r5
 80003d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d8:	fb08 3310 	mls	r3, r8, r0, r3
 80003dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1e 0404 	adds.w	r4, lr, r4
 80003ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f0:	d26b      	bcs.n	80004ca <__udivmoddi4+0x2aa>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d969      	bls.n	80004ca <__udivmoddi4+0x2aa>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4474      	add	r4, lr
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c2      	mov	sl, r8
 800040a:	464b      	mov	r3, r9
 800040c:	d354      	bcc.n	80004b8 <__udivmoddi4+0x298>
 800040e:	d051      	beq.n	80004b4 <__udivmoddi4+0x294>
 8000410:	2e00      	cmp	r6, #0
 8000412:	d069      	beq.n	80004e8 <__udivmoddi4+0x2c8>
 8000414:	ebb1 050a 	subs.w	r5, r1, sl
 8000418:	eb64 0403 	sbc.w	r4, r4, r3
 800041c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000420:	40fd      	lsrs	r5, r7
 8000422:	40fc      	lsrs	r4, r7
 8000424:	ea4c 0505 	orr.w	r5, ip, r5
 8000428:	e9c6 5400 	strd	r5, r4, [r6]
 800042c:	2700      	movs	r7, #0
 800042e:	e747      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f703 	lsr.w	r7, r0, r3
 8000438:	4095      	lsls	r5, r2
 800043a:	fa01 f002 	lsl.w	r0, r1, r2
 800043e:	fa21 f303 	lsr.w	r3, r1, r3
 8000442:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000446:	4338      	orrs	r0, r7
 8000448:	0c01      	lsrs	r1, r0, #16
 800044a:	fbb3 f7fe 	udiv	r7, r3, lr
 800044e:	fa1f f885 	uxth.w	r8, r5
 8000452:	fb0e 3317 	mls	r3, lr, r7, r3
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb07 f308 	mul.w	r3, r7, r8
 800045e:	428b      	cmp	r3, r1
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x256>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f107 3cff 	add.w	ip, r7, #4294967295
 800046c:	d22f      	bcs.n	80004ce <__udivmoddi4+0x2ae>
 800046e:	428b      	cmp	r3, r1
 8000470:	d92d      	bls.n	80004ce <__udivmoddi4+0x2ae>
 8000472:	3f02      	subs	r7, #2
 8000474:	4429      	add	r1, r5
 8000476:	1acb      	subs	r3, r1, r3
 8000478:	b281      	uxth	r1, r0
 800047a:	fbb3 f0fe 	udiv	r0, r3, lr
 800047e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb00 f308 	mul.w	r3, r0, r8
 800048a:	428b      	cmp	r3, r1
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x27e>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f100 3cff 	add.w	ip, r0, #4294967295
 8000494:	d217      	bcs.n	80004c6 <__udivmoddi4+0x2a6>
 8000496:	428b      	cmp	r3, r1
 8000498:	d915      	bls.n	80004c6 <__udivmoddi4+0x2a6>
 800049a:	3802      	subs	r0, #2
 800049c:	4429      	add	r1, r5
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a4:	e73b      	b.n	800031e <__udivmoddi4+0xfe>
 80004a6:	4637      	mov	r7, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e709      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004ac:	4607      	mov	r7, r0
 80004ae:	e6e7      	b.n	8000280 <__udivmoddi4+0x60>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b4:	4541      	cmp	r1, r8
 80004b6:	d2ab      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004bc:	eb69 020e 	sbc.w	r2, r9, lr
 80004c0:	3801      	subs	r0, #1
 80004c2:	4613      	mov	r3, r2
 80004c4:	e7a4      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c6:	4660      	mov	r0, ip
 80004c8:	e7e9      	b.n	800049e <__udivmoddi4+0x27e>
 80004ca:	4618      	mov	r0, r3
 80004cc:	e795      	b.n	80003fa <__udivmoddi4+0x1da>
 80004ce:	4667      	mov	r7, ip
 80004d0:	e7d1      	b.n	8000476 <__udivmoddi4+0x256>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e77c      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	442c      	add	r4, r5
 80004da:	e747      	b.n	800036c <__udivmoddi4+0x14c>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	442b      	add	r3, r5
 80004e2:	e72f      	b.n	8000344 <__udivmoddi4+0x124>
 80004e4:	4638      	mov	r0, r7
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xda>
 80004e8:	4637      	mov	r7, r6
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0xa0>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f4:	f000 f9ae 	bl	8000854 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f8:	f000 f82e 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fc:	f000 f88c 	bl	8000618 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000500:	f001 f8ee 	bl	80016e0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000504:	4a0d      	ldr	r2, [pc, #52]	; (800053c <main+0x4c>)
 8000506:	2100      	movs	r1, #0
 8000508:	480d      	ldr	r0, [pc, #52]	; (8000540 <main+0x50>)
 800050a:	f001 f953 	bl	80017b4 <osThreadNew>
 800050e:	4602      	mov	r2, r0
 8000510:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <main+0x54>)
 8000512:	601a      	str	r2, [r3, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000514:	4a0c      	ldr	r2, [pc, #48]	; (8000548 <main+0x58>)
 8000516:	2100      	movs	r1, #0
 8000518:	480c      	ldr	r0, [pc, #48]	; (800054c <main+0x5c>)
 800051a:	f001 f94b 	bl	80017b4 <osThreadNew>
 800051e:	4602      	mov	r2, r0
 8000520:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <main+0x60>)
 8000522:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */
  q = xQueueCreate(8, sizeof(unsigned int));
 8000524:	2200      	movs	r2, #0
 8000526:	2104      	movs	r1, #4
 8000528:	2008      	movs	r0, #8
 800052a:	f001 fbda 	bl	8001ce2 <xQueueGenericCreate>
 800052e:	4602      	mov	r2, r0
 8000530:	4b08      	ldr	r3, [pc, #32]	; (8000554 <main+0x64>)
 8000532:	601a      	str	r2, [r3, #0]
  /* Start scheduler */
  osKernelStart();
 8000534:	f001 f908 	bl	8001748 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000538:	e7fe      	b.n	8000538 <main+0x48>
 800053a:	bf00      	nop
 800053c:	080042d4 	.word	0x080042d4
 8000540:	08000681 	.word	0x08000681
 8000544:	20004934 	.word	0x20004934
 8000548:	080042f8 	.word	0x080042f8
 800054c:	080006bd 	.word	0x080006bd
 8000550:	20004938 	.word	0x20004938
 8000554:	2000493c 	.word	0x2000493c

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b094      	sub	sp, #80	; 0x50
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0320 	add.w	r3, r7, #32
 8000562:	2230      	movs	r2, #48	; 0x30
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f003 fe87 	bl	800427a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800057c:	2300      	movs	r3, #0
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	4b23      	ldr	r3, [pc, #140]	; (8000610 <SystemClock_Config+0xb8>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000584:	4a22      	ldr	r2, [pc, #136]	; (8000610 <SystemClock_Config+0xb8>)
 8000586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058a:	6413      	str	r3, [r2, #64]	; 0x40
 800058c:	4b20      	ldr	r3, [pc, #128]	; (8000610 <SystemClock_Config+0xb8>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000594:	60bb      	str	r3, [r7, #8]
 8000596:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000598:	2300      	movs	r3, #0
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	4b1d      	ldr	r3, [pc, #116]	; (8000614 <SystemClock_Config+0xbc>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005a4:	4a1b      	ldr	r2, [pc, #108]	; (8000614 <SystemClock_Config+0xbc>)
 80005a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005aa:	6013      	str	r3, [r2, #0]
 80005ac:	4b19      	ldr	r3, [pc, #100]	; (8000614 <SystemClock_Config+0xbc>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b8:	2302      	movs	r3, #2
 80005ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005bc:	2301      	movs	r3, #1
 80005be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c0:	2310      	movs	r3, #16
 80005c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005c4:	2300      	movs	r3, #0
 80005c6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c8:	f107 0320 	add.w	r3, r7, #32
 80005cc:	4618      	mov	r0, r3
 80005ce:	f000 fc77 	bl	8000ec0 <HAL_RCC_OscConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005d8:	f000 f8a0 	bl	800071c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005dc:	230f      	movs	r3, #15
 80005de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005e0:	2300      	movs	r3, #0
 80005e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 fed2 	bl	80013a0 <HAL_RCC_ClockConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000602:	f000 f88b 	bl	800071c <Error_Handler>
  }
}
 8000606:	bf00      	nop
 8000608:	3750      	adds	r7, #80	; 0x50
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40023800 	.word	0x40023800
 8000614:	40007000 	.word	0x40007000

08000618 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800062c:	2300      	movs	r3, #0
 800062e:	603b      	str	r3, [r7, #0]
 8000630:	4b11      	ldr	r3, [pc, #68]	; (8000678 <MX_GPIO_Init+0x60>)
 8000632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000634:	4a10      	ldr	r2, [pc, #64]	; (8000678 <MX_GPIO_Init+0x60>)
 8000636:	f043 0302 	orr.w	r3, r3, #2
 800063a:	6313      	str	r3, [r2, #48]	; 0x30
 800063c:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <MX_GPIO_Init+0x60>)
 800063e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000640:	f003 0302 	and.w	r3, r3, #2
 8000644:	603b      	str	r3, [r7, #0]
 8000646:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000648:	2200      	movs	r2, #0
 800064a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800064e:	480b      	ldr	r0, [pc, #44]	; (800067c <MX_GPIO_Init+0x64>)
 8000650:	f000 fc02 	bl	8000e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000654:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000658:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065a:	2301      	movs	r3, #1
 800065c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065e:	2300      	movs	r3, #0
 8000660:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000662:	2300      	movs	r3, #0
 8000664:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	4619      	mov	r1, r3
 800066a:	4804      	ldr	r0, [pc, #16]	; (800067c <MX_GPIO_Init+0x64>)
 800066c:	f000 fa4a 	bl	8000b04 <HAL_GPIO_Init>

}
 8000670:	bf00      	nop
 8000672:	3718      	adds	r7, #24
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40023800 	.word	0x40023800
 800067c:	40020400 	.word	0x40020400

08000680 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  unsigned int data = 1;
 8000688:	2301      	movs	r3, #1
 800068a:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
	xQueueSend(q, (void *) &data, portMAX_DELAY);
 800068c:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <StartDefaultTask+0x38>)
 800068e:	6818      	ldr	r0, [r3, #0]
 8000690:	f107 010c 	add.w	r1, r7, #12
 8000694:	2300      	movs	r3, #0
 8000696:	f04f 32ff 	mov.w	r2, #4294967295
 800069a:	f001 fb85 	bl	8001da8 <xQueueGenericSend>
	osDelay(data*1000);
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006a4:	fb02 f303 	mul.w	r3, r2, r3
 80006a8:	4618      	mov	r0, r3
 80006aa:	f001 f929 	bl	8001900 <osDelay>
    ++data;
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	3301      	adds	r3, #1
 80006b2:	60fb      	str	r3, [r7, #12]
	xQueueSend(q, (void *) &data, portMAX_DELAY);
 80006b4:	e7ea      	b.n	800068c <StartDefaultTask+0xc>
 80006b6:	bf00      	nop
 80006b8:	2000493c 	.word	0x2000493c

080006bc <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  /* Infinite loop */

  for(;;)
  {
	unsigned int rec;
	if (uxQueueMessagesWaiting(q) > 1)
 80006c4:	4b13      	ldr	r3, [pc, #76]	; (8000714 <StartTask02+0x58>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4618      	mov	r0, r3
 80006ca:	f001 fdd7 	bl	800227c <uxQueueMessagesWaiting>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d91a      	bls.n	800070a <StartTask02+0x4e>
	{
		xQueueReceive(q, &(rec), portMAX_DELAY);
 80006d4:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <StartTask02+0x58>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f107 0108 	add.w	r1, r7, #8
 80006dc:	f04f 32ff 	mov.w	r2, #4294967295
 80006e0:	4618      	mov	r0, r3
 80006e2:	f001 fcef 	bl	80020c4 <xQueueReceive>
		for (int i = 0; i <= rec; ++i)
 80006e6:	2300      	movs	r3, #0
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	e00a      	b.n	8000702 <StartTask02+0x46>
		{
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80006ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006f0:	4809      	ldr	r0, [pc, #36]	; (8000718 <StartTask02+0x5c>)
 80006f2:	f000 fbca 	bl	8000e8a <HAL_GPIO_TogglePin>
			osDelay(100);
 80006f6:	2064      	movs	r0, #100	; 0x64
 80006f8:	f001 f902 	bl	8001900 <osDelay>
		for (int i = 0; i <= rec; ++i)
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	3301      	adds	r3, #1
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	68fa      	ldr	r2, [r7, #12]
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	429a      	cmp	r2, r3
 8000708:	d9f0      	bls.n	80006ec <StartTask02+0x30>
		}
	}
    osDelay(1);
 800070a:	2001      	movs	r0, #1
 800070c:	f001 f8f8 	bl	8001900 <osDelay>
  {
 8000710:	e7d8      	b.n	80006c4 <StartTask02+0x8>
 8000712:	bf00      	nop
 8000714:	2000493c 	.word	0x2000493c
 8000718:	40020400 	.word	0x40020400

0800071c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
	...

0800072c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	4b12      	ldr	r3, [pc, #72]	; (8000780 <HAL_MspInit+0x54>)
 8000738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800073a:	4a11      	ldr	r2, [pc, #68]	; (8000780 <HAL_MspInit+0x54>)
 800073c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000740:	6453      	str	r3, [r2, #68]	; 0x44
 8000742:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <HAL_MspInit+0x54>)
 8000744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <HAL_MspInit+0x54>)
 8000754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000756:	4a0a      	ldr	r2, [pc, #40]	; (8000780 <HAL_MspInit+0x54>)
 8000758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800075c:	6413      	str	r3, [r2, #64]	; 0x40
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <HAL_MspInit+0x54>)
 8000760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800076a:	2200      	movs	r2, #0
 800076c:	210f      	movs	r1, #15
 800076e:	f06f 0001 	mvn.w	r0, #1
 8000772:	f000 f99e 	bl	8000ab2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40023800 	.word	0x40023800

08000784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr

08000792 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000796:	e7fe      	b.n	8000796 <HardFault_Handler+0x4>

08000798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800079c:	e7fe      	b.n	800079c <MemManage_Handler+0x4>

0800079e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007a2:	e7fe      	b.n	80007a2 <BusFault_Handler+0x4>

080007a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <UsageFault_Handler+0x4>

080007aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ae:	bf00      	nop
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr

080007b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007bc:	f000 f89c 	bl	80008f8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80007c0:	f002 fcee 	bl	80031a0 <xTaskGetSchedulerState>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d001      	beq.n	80007ce <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80007ca:	f003 fac5 	bl	8003d58 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
	...

080007d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007d8:	4b08      	ldr	r3, [pc, #32]	; (80007fc <SystemInit+0x28>)
 80007da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007de:	4a07      	ldr	r2, [pc, #28]	; (80007fc <SystemInit+0x28>)
 80007e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007e8:	4b04      	ldr	r3, [pc, #16]	; (80007fc <SystemInit+0x28>)
 80007ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007ee:	609a      	str	r2, [r3, #8]
#endif
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	e000ed00 	.word	0xe000ed00

08000800 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000800:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000838 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000804:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000806:	e003      	b.n	8000810 <LoopCopyDataInit>

08000808 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000808:	4b0c      	ldr	r3, [pc, #48]	; (800083c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800080a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800080c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800080e:	3104      	adds	r1, #4

08000810 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000810:	480b      	ldr	r0, [pc, #44]	; (8000840 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000812:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000814:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000816:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000818:	d3f6      	bcc.n	8000808 <CopyDataInit>
  ldr  r2, =_sbss
 800081a:	4a0b      	ldr	r2, [pc, #44]	; (8000848 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800081c:	e002      	b.n	8000824 <LoopFillZerobss>

0800081e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800081e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000820:	f842 3b04 	str.w	r3, [r2], #4

08000824 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000824:	4b09      	ldr	r3, [pc, #36]	; (800084c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000826:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000828:	d3f9      	bcc.n	800081e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800082a:	f7ff ffd3 	bl	80007d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800082e:	f003 fcf5 	bl	800421c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000832:	f7ff fe5d 	bl	80004f0 <main>
  bx  lr    
 8000836:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000838:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800083c:	0800433c 	.word	0x0800433c
  ldr  r0, =_sdata
 8000840:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000844:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000848:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 800084c:	20004984 	.word	0x20004984

08000850 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000850:	e7fe      	b.n	8000850 <ADC_IRQHandler>
	...

08000854 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000858:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <HAL_Init+0x40>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a0d      	ldr	r2, [pc, #52]	; (8000894 <HAL_Init+0x40>)
 800085e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000862:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000864:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <HAL_Init+0x40>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a0a      	ldr	r2, [pc, #40]	; (8000894 <HAL_Init+0x40>)
 800086a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800086e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000870:	4b08      	ldr	r3, [pc, #32]	; (8000894 <HAL_Init+0x40>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a07      	ldr	r2, [pc, #28]	; (8000894 <HAL_Init+0x40>)
 8000876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800087a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800087c:	2003      	movs	r0, #3
 800087e:	f000 f90d 	bl	8000a9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000882:	200f      	movs	r0, #15
 8000884:	f000 f808 	bl	8000898 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000888:	f7ff ff50 	bl	800072c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800088c:	2300      	movs	r3, #0
}
 800088e:	4618      	mov	r0, r3
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40023c00 	.word	0x40023c00

08000898 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008a0:	4b12      	ldr	r3, [pc, #72]	; (80008ec <HAL_InitTick+0x54>)
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <HAL_InitTick+0x58>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	4619      	mov	r1, r3
 80008aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80008b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008b6:	4618      	mov	r0, r3
 80008b8:	f000 f917 	bl	8000aea <HAL_SYSTICK_Config>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008c2:	2301      	movs	r3, #1
 80008c4:	e00e      	b.n	80008e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	2b0f      	cmp	r3, #15
 80008ca:	d80a      	bhi.n	80008e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008cc:	2200      	movs	r2, #0
 80008ce:	6879      	ldr	r1, [r7, #4]
 80008d0:	f04f 30ff 	mov.w	r0, #4294967295
 80008d4:	f000 f8ed 	bl	8000ab2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008d8:	4a06      	ldr	r2, [pc, #24]	; (80008f4 <HAL_InitTick+0x5c>)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008de:	2300      	movs	r3, #0
 80008e0:	e000      	b.n	80008e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008e2:	2301      	movs	r3, #1
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20000000 	.word	0x20000000
 80008f0:	20000008 	.word	0x20000008
 80008f4:	20000004 	.word	0x20000004

080008f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <HAL_IncTick+0x20>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	461a      	mov	r2, r3
 8000902:	4b06      	ldr	r3, [pc, #24]	; (800091c <HAL_IncTick+0x24>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4413      	add	r3, r2
 8000908:	4a04      	ldr	r2, [pc, #16]	; (800091c <HAL_IncTick+0x24>)
 800090a:	6013      	str	r3, [r2, #0]
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	20000008 	.word	0x20000008
 800091c:	20004940 	.word	0x20004940

08000920 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  return uwTick;
 8000924:	4b03      	ldr	r3, [pc, #12]	; (8000934 <HAL_GetTick+0x14>)
 8000926:	681b      	ldr	r3, [r3, #0]
}
 8000928:	4618      	mov	r0, r3
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	20004940 	.word	0x20004940

08000938 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000938:	b480      	push	{r7}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	f003 0307 	and.w	r3, r3, #7
 8000946:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <__NVIC_SetPriorityGrouping+0x44>)
 800094a:	68db      	ldr	r3, [r3, #12]
 800094c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800094e:	68ba      	ldr	r2, [r7, #8]
 8000950:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000954:	4013      	ands	r3, r2
 8000956:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000960:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000968:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800096a:	4a04      	ldr	r2, [pc, #16]	; (800097c <__NVIC_SetPriorityGrouping+0x44>)
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	60d3      	str	r3, [r2, #12]
}
 8000970:	bf00      	nop
 8000972:	3714      	adds	r7, #20
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr
 800097c:	e000ed00 	.word	0xe000ed00

08000980 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000984:	4b04      	ldr	r3, [pc, #16]	; (8000998 <__NVIC_GetPriorityGrouping+0x18>)
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	0a1b      	lsrs	r3, r3, #8
 800098a:	f003 0307 	and.w	r3, r3, #7
}
 800098e:	4618      	mov	r0, r3
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	e000ed00 	.word	0xe000ed00

0800099c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	6039      	str	r1, [r7, #0]
 80009a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	db0a      	blt.n	80009c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	b2da      	uxtb	r2, r3
 80009b4:	490c      	ldr	r1, [pc, #48]	; (80009e8 <__NVIC_SetPriority+0x4c>)
 80009b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ba:	0112      	lsls	r2, r2, #4
 80009bc:	b2d2      	uxtb	r2, r2
 80009be:	440b      	add	r3, r1
 80009c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009c4:	e00a      	b.n	80009dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	b2da      	uxtb	r2, r3
 80009ca:	4908      	ldr	r1, [pc, #32]	; (80009ec <__NVIC_SetPriority+0x50>)
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	f003 030f 	and.w	r3, r3, #15
 80009d2:	3b04      	subs	r3, #4
 80009d4:	0112      	lsls	r2, r2, #4
 80009d6:	b2d2      	uxtb	r2, r2
 80009d8:	440b      	add	r3, r1
 80009da:	761a      	strb	r2, [r3, #24]
}
 80009dc:	bf00      	nop
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr
 80009e8:	e000e100 	.word	0xe000e100
 80009ec:	e000ed00 	.word	0xe000ed00

080009f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b089      	sub	sp, #36	; 0x24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	60f8      	str	r0, [r7, #12]
 80009f8:	60b9      	str	r1, [r7, #8]
 80009fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	f003 0307 	and.w	r3, r3, #7
 8000a02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a04:	69fb      	ldr	r3, [r7, #28]
 8000a06:	f1c3 0307 	rsb	r3, r3, #7
 8000a0a:	2b04      	cmp	r3, #4
 8000a0c:	bf28      	it	cs
 8000a0e:	2304      	movcs	r3, #4
 8000a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a12:	69fb      	ldr	r3, [r7, #28]
 8000a14:	3304      	adds	r3, #4
 8000a16:	2b06      	cmp	r3, #6
 8000a18:	d902      	bls.n	8000a20 <NVIC_EncodePriority+0x30>
 8000a1a:	69fb      	ldr	r3, [r7, #28]
 8000a1c:	3b03      	subs	r3, #3
 8000a1e:	e000      	b.n	8000a22 <NVIC_EncodePriority+0x32>
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a24:	f04f 32ff 	mov.w	r2, #4294967295
 8000a28:	69bb      	ldr	r3, [r7, #24]
 8000a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2e:	43da      	mvns	r2, r3
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	401a      	ands	r2, r3
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a38:	f04f 31ff 	mov.w	r1, #4294967295
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a42:	43d9      	mvns	r1, r3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a48:	4313      	orrs	r3, r2
         );
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3724      	adds	r7, #36	; 0x24
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
	...

08000a58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	3b01      	subs	r3, #1
 8000a64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a68:	d301      	bcc.n	8000a6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	e00f      	b.n	8000a8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a6e:	4a0a      	ldr	r2, [pc, #40]	; (8000a98 <SysTick_Config+0x40>)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	3b01      	subs	r3, #1
 8000a74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a76:	210f      	movs	r1, #15
 8000a78:	f04f 30ff 	mov.w	r0, #4294967295
 8000a7c:	f7ff ff8e 	bl	800099c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a80:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <SysTick_Config+0x40>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a86:	4b04      	ldr	r3, [pc, #16]	; (8000a98 <SysTick_Config+0x40>)
 8000a88:	2207      	movs	r2, #7
 8000a8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a8c:	2300      	movs	r3, #0
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	e000e010 	.word	0xe000e010

08000a9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f7ff ff47 	bl	8000938 <__NVIC_SetPriorityGrouping>
}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b086      	sub	sp, #24
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	4603      	mov	r3, r0
 8000aba:	60b9      	str	r1, [r7, #8]
 8000abc:	607a      	str	r2, [r7, #4]
 8000abe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ac4:	f7ff ff5c 	bl	8000980 <__NVIC_GetPriorityGrouping>
 8000ac8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aca:	687a      	ldr	r2, [r7, #4]
 8000acc:	68b9      	ldr	r1, [r7, #8]
 8000ace:	6978      	ldr	r0, [r7, #20]
 8000ad0:	f7ff ff8e 	bl	80009f0 <NVIC_EncodePriority>
 8000ad4:	4602      	mov	r2, r0
 8000ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ada:	4611      	mov	r1, r2
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff ff5d 	bl	800099c <__NVIC_SetPriority>
}
 8000ae2:	bf00      	nop
 8000ae4:	3718      	adds	r7, #24
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b082      	sub	sp, #8
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000af2:	6878      	ldr	r0, [r7, #4]
 8000af4:	f7ff ffb0 	bl	8000a58 <SysTick_Config>
 8000af8:	4603      	mov	r3, r0
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
	...

08000b04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b089      	sub	sp, #36	; 0x24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b12:	2300      	movs	r3, #0
 8000b14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61fb      	str	r3, [r7, #28]
 8000b1e:	e177      	b.n	8000e10 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b20:	2201      	movs	r2, #1
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	fa02 f303 	lsl.w	r3, r2, r3
 8000b28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	697a      	ldr	r2, [r7, #20]
 8000b30:	4013      	ands	r3, r2
 8000b32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	f040 8166 	bne.w	8000e0a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d00b      	beq.n	8000b5e <HAL_GPIO_Init+0x5a>
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	2b02      	cmp	r3, #2
 8000b4c:	d007      	beq.n	8000b5e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b52:	2b11      	cmp	r3, #17
 8000b54:	d003      	beq.n	8000b5e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	2b12      	cmp	r3, #18
 8000b5c:	d130      	bne.n	8000bc0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	689b      	ldr	r3, [r3, #8]
 8000b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b64:	69fb      	ldr	r3, [r7, #28]
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	2203      	movs	r2, #3
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	43db      	mvns	r3, r3
 8000b70:	69ba      	ldr	r2, [r7, #24]
 8000b72:	4013      	ands	r3, r2
 8000b74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	68da      	ldr	r2, [r3, #12]
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	69ba      	ldr	r2, [r7, #24]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	69ba      	ldr	r2, [r7, #24]
 8000b8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b94:	2201      	movs	r2, #1
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9c:	43db      	mvns	r3, r3
 8000b9e:	69ba      	ldr	r2, [r7, #24]
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	091b      	lsrs	r3, r3, #4
 8000baa:	f003 0201 	and.w	r2, r3, #1
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb4:	69ba      	ldr	r2, [r7, #24]
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	69ba      	ldr	r2, [r7, #24]
 8000bbe:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	2203      	movs	r2, #3
 8000bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd0:	43db      	mvns	r3, r3
 8000bd2:	69ba      	ldr	r2, [r7, #24]
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	689a      	ldr	r2, [r3, #8]
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	fa02 f303 	lsl.w	r3, r2, r3
 8000be4:	69ba      	ldr	r2, [r7, #24]
 8000be6:	4313      	orrs	r3, r2
 8000be8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	69ba      	ldr	r2, [r7, #24]
 8000bee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	2b02      	cmp	r3, #2
 8000bf6:	d003      	beq.n	8000c00 <HAL_GPIO_Init+0xfc>
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	2b12      	cmp	r3, #18
 8000bfe:	d123      	bne.n	8000c48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	08da      	lsrs	r2, r3, #3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3208      	adds	r2, #8
 8000c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	f003 0307 	and.w	r3, r3, #7
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	220f      	movs	r2, #15
 8000c18:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1c:	43db      	mvns	r3, r3
 8000c1e:	69ba      	ldr	r2, [r7, #24]
 8000c20:	4013      	ands	r3, r2
 8000c22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	691a      	ldr	r2, [r3, #16]
 8000c28:	69fb      	ldr	r3, [r7, #28]
 8000c2a:	f003 0307 	and.w	r3, r3, #7
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	fa02 f303 	lsl.w	r3, r2, r3
 8000c34:	69ba      	ldr	r2, [r7, #24]
 8000c36:	4313      	orrs	r3, r2
 8000c38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	08da      	lsrs	r2, r3, #3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	3208      	adds	r2, #8
 8000c42:	69b9      	ldr	r1, [r7, #24]
 8000c44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	2203      	movs	r2, #3
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	69ba      	ldr	r2, [r7, #24]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	f003 0203 	and.w	r2, r3, #3
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	69ba      	ldr	r2, [r7, #24]
 8000c72:	4313      	orrs	r3, r2
 8000c74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	69ba      	ldr	r2, [r7, #24]
 8000c7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	f000 80c0 	beq.w	8000e0a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	4b65      	ldr	r3, [pc, #404]	; (8000e24 <HAL_GPIO_Init+0x320>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c92:	4a64      	ldr	r2, [pc, #400]	; (8000e24 <HAL_GPIO_Init+0x320>)
 8000c94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c98:	6453      	str	r3, [r2, #68]	; 0x44
 8000c9a:	4b62      	ldr	r3, [pc, #392]	; (8000e24 <HAL_GPIO_Init+0x320>)
 8000c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ca6:	4a60      	ldr	r2, [pc, #384]	; (8000e28 <HAL_GPIO_Init+0x324>)
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	089b      	lsrs	r3, r3, #2
 8000cac:	3302      	adds	r3, #2
 8000cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	f003 0303 	and.w	r3, r3, #3
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	220f      	movs	r2, #15
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4a57      	ldr	r2, [pc, #348]	; (8000e2c <HAL_GPIO_Init+0x328>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d037      	beq.n	8000d42 <HAL_GPIO_Init+0x23e>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4a56      	ldr	r2, [pc, #344]	; (8000e30 <HAL_GPIO_Init+0x32c>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d031      	beq.n	8000d3e <HAL_GPIO_Init+0x23a>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4a55      	ldr	r2, [pc, #340]	; (8000e34 <HAL_GPIO_Init+0x330>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d02b      	beq.n	8000d3a <HAL_GPIO_Init+0x236>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4a54      	ldr	r2, [pc, #336]	; (8000e38 <HAL_GPIO_Init+0x334>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d025      	beq.n	8000d36 <HAL_GPIO_Init+0x232>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4a53      	ldr	r2, [pc, #332]	; (8000e3c <HAL_GPIO_Init+0x338>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d01f      	beq.n	8000d32 <HAL_GPIO_Init+0x22e>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4a52      	ldr	r2, [pc, #328]	; (8000e40 <HAL_GPIO_Init+0x33c>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d019      	beq.n	8000d2e <HAL_GPIO_Init+0x22a>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4a51      	ldr	r2, [pc, #324]	; (8000e44 <HAL_GPIO_Init+0x340>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d013      	beq.n	8000d2a <HAL_GPIO_Init+0x226>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a50      	ldr	r2, [pc, #320]	; (8000e48 <HAL_GPIO_Init+0x344>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d00d      	beq.n	8000d26 <HAL_GPIO_Init+0x222>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4a4f      	ldr	r2, [pc, #316]	; (8000e4c <HAL_GPIO_Init+0x348>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d007      	beq.n	8000d22 <HAL_GPIO_Init+0x21e>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a4e      	ldr	r2, [pc, #312]	; (8000e50 <HAL_GPIO_Init+0x34c>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d101      	bne.n	8000d1e <HAL_GPIO_Init+0x21a>
 8000d1a:	2309      	movs	r3, #9
 8000d1c:	e012      	b.n	8000d44 <HAL_GPIO_Init+0x240>
 8000d1e:	230a      	movs	r3, #10
 8000d20:	e010      	b.n	8000d44 <HAL_GPIO_Init+0x240>
 8000d22:	2308      	movs	r3, #8
 8000d24:	e00e      	b.n	8000d44 <HAL_GPIO_Init+0x240>
 8000d26:	2307      	movs	r3, #7
 8000d28:	e00c      	b.n	8000d44 <HAL_GPIO_Init+0x240>
 8000d2a:	2306      	movs	r3, #6
 8000d2c:	e00a      	b.n	8000d44 <HAL_GPIO_Init+0x240>
 8000d2e:	2305      	movs	r3, #5
 8000d30:	e008      	b.n	8000d44 <HAL_GPIO_Init+0x240>
 8000d32:	2304      	movs	r3, #4
 8000d34:	e006      	b.n	8000d44 <HAL_GPIO_Init+0x240>
 8000d36:	2303      	movs	r3, #3
 8000d38:	e004      	b.n	8000d44 <HAL_GPIO_Init+0x240>
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	e002      	b.n	8000d44 <HAL_GPIO_Init+0x240>
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e000      	b.n	8000d44 <HAL_GPIO_Init+0x240>
 8000d42:	2300      	movs	r3, #0
 8000d44:	69fa      	ldr	r2, [r7, #28]
 8000d46:	f002 0203 	and.w	r2, r2, #3
 8000d4a:	0092      	lsls	r2, r2, #2
 8000d4c:	4093      	lsls	r3, r2
 8000d4e:	69ba      	ldr	r2, [r7, #24]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d54:	4934      	ldr	r1, [pc, #208]	; (8000e28 <HAL_GPIO_Init+0x324>)
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	089b      	lsrs	r3, r3, #2
 8000d5a:	3302      	adds	r3, #2
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d62:	4b3c      	ldr	r3, [pc, #240]	; (8000e54 <HAL_GPIO_Init+0x350>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	43db      	mvns	r3, r3
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d003      	beq.n	8000d86 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d86:	4a33      	ldr	r2, [pc, #204]	; (8000e54 <HAL_GPIO_Init+0x350>)
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000d8c:	4b31      	ldr	r3, [pc, #196]	; (8000e54 <HAL_GPIO_Init+0x350>)
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	43db      	mvns	r3, r3
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d003      	beq.n	8000db0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000db0:	4a28      	ldr	r2, [pc, #160]	; (8000e54 <HAL_GPIO_Init+0x350>)
 8000db2:	69bb      	ldr	r3, [r7, #24]
 8000db4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000db6:	4b27      	ldr	r3, [pc, #156]	; (8000e54 <HAL_GPIO_Init+0x350>)
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d003      	beq.n	8000dda <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000dda:	4a1e      	ldr	r2, [pc, #120]	; (8000e54 <HAL_GPIO_Init+0x350>)
 8000ddc:	69bb      	ldr	r3, [r7, #24]
 8000dde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000de0:	4b1c      	ldr	r3, [pc, #112]	; (8000e54 <HAL_GPIO_Init+0x350>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	43db      	mvns	r3, r3
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	4013      	ands	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d003      	beq.n	8000e04 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e04:	4a13      	ldr	r2, [pc, #76]	; (8000e54 <HAL_GPIO_Init+0x350>)
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	61fb      	str	r3, [r7, #28]
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	2b0f      	cmp	r3, #15
 8000e14:	f67f ae84 	bls.w	8000b20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e18:	bf00      	nop
 8000e1a:	3724      	adds	r7, #36	; 0x24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	40023800 	.word	0x40023800
 8000e28:	40013800 	.word	0x40013800
 8000e2c:	40020000 	.word	0x40020000
 8000e30:	40020400 	.word	0x40020400
 8000e34:	40020800 	.word	0x40020800
 8000e38:	40020c00 	.word	0x40020c00
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	40021400 	.word	0x40021400
 8000e44:	40021800 	.word	0x40021800
 8000e48:	40021c00 	.word	0x40021c00
 8000e4c:	40022000 	.word	0x40022000
 8000e50:	40022400 	.word	0x40022400
 8000e54:	40013c00 	.word	0x40013c00

08000e58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	460b      	mov	r3, r1
 8000e62:	807b      	strh	r3, [r7, #2]
 8000e64:	4613      	mov	r3, r2
 8000e66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e68:	787b      	ldrb	r3, [r7, #1]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d003      	beq.n	8000e76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e6e:	887a      	ldrh	r2, [r7, #2]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000e74:	e003      	b.n	8000e7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e76:	887b      	ldrh	r3, [r7, #2]
 8000e78:	041a      	lsls	r2, r3, #16
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	619a      	str	r2, [r3, #24]
}
 8000e7e:	bf00      	nop
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	b083      	sub	sp, #12
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
 8000e92:	460b      	mov	r3, r1
 8000e94:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	695a      	ldr	r2, [r3, #20]
 8000e9a:	887b      	ldrh	r3, [r7, #2]
 8000e9c:	401a      	ands	r2, r3
 8000e9e:	887b      	ldrh	r3, [r7, #2]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d104      	bne.n	8000eae <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000ea4:	887b      	ldrh	r3, [r7, #2]
 8000ea6:	041a      	lsls	r2, r3, #16
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000eac:	e002      	b.n	8000eb4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000eae:	887a      	ldrh	r2, [r7, #2]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	619a      	str	r2, [r3, #24]
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d101      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e25b      	b.n	800138a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d075      	beq.n	8000fca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ede:	4ba3      	ldr	r3, [pc, #652]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	f003 030c 	and.w	r3, r3, #12
 8000ee6:	2b04      	cmp	r3, #4
 8000ee8:	d00c      	beq.n	8000f04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000eea:	4ba0      	ldr	r3, [pc, #640]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ef2:	2b08      	cmp	r3, #8
 8000ef4:	d112      	bne.n	8000f1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ef6:	4b9d      	ldr	r3, [pc, #628]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000efe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f02:	d10b      	bne.n	8000f1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f04:	4b99      	ldr	r3, [pc, #612]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d05b      	beq.n	8000fc8 <HAL_RCC_OscConfig+0x108>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d157      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e236      	b.n	800138a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f24:	d106      	bne.n	8000f34 <HAL_RCC_OscConfig+0x74>
 8000f26:	4b91      	ldr	r3, [pc, #580]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a90      	ldr	r2, [pc, #576]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 8000f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f30:	6013      	str	r3, [r2, #0]
 8000f32:	e01d      	b.n	8000f70 <HAL_RCC_OscConfig+0xb0>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f3c:	d10c      	bne.n	8000f58 <HAL_RCC_OscConfig+0x98>
 8000f3e:	4b8b      	ldr	r3, [pc, #556]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a8a      	ldr	r2, [pc, #552]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 8000f44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f48:	6013      	str	r3, [r2, #0]
 8000f4a:	4b88      	ldr	r3, [pc, #544]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a87      	ldr	r2, [pc, #540]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 8000f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f54:	6013      	str	r3, [r2, #0]
 8000f56:	e00b      	b.n	8000f70 <HAL_RCC_OscConfig+0xb0>
 8000f58:	4b84      	ldr	r3, [pc, #528]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a83      	ldr	r2, [pc, #524]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 8000f5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f62:	6013      	str	r3, [r2, #0]
 8000f64:	4b81      	ldr	r3, [pc, #516]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a80      	ldr	r2, [pc, #512]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 8000f6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d013      	beq.n	8000fa0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f78:	f7ff fcd2 	bl	8000920 <HAL_GetTick>
 8000f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f7e:	e008      	b.n	8000f92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f80:	f7ff fcce 	bl	8000920 <HAL_GetTick>
 8000f84:	4602      	mov	r2, r0
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	2b64      	cmp	r3, #100	; 0x64
 8000f8c:	d901      	bls.n	8000f92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	e1fb      	b.n	800138a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f92:	4b76      	ldr	r3, [pc, #472]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d0f0      	beq.n	8000f80 <HAL_RCC_OscConfig+0xc0>
 8000f9e:	e014      	b.n	8000fca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa0:	f7ff fcbe 	bl	8000920 <HAL_GetTick>
 8000fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fa6:	e008      	b.n	8000fba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fa8:	f7ff fcba 	bl	8000920 <HAL_GetTick>
 8000fac:	4602      	mov	r2, r0
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	2b64      	cmp	r3, #100	; 0x64
 8000fb4:	d901      	bls.n	8000fba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	e1e7      	b.n	800138a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fba:	4b6c      	ldr	r3, [pc, #432]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d1f0      	bne.n	8000fa8 <HAL_RCC_OscConfig+0xe8>
 8000fc6:	e000      	b.n	8000fca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f003 0302 	and.w	r3, r3, #2
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d063      	beq.n	800109e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000fd6:	4b65      	ldr	r3, [pc, #404]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	f003 030c 	and.w	r3, r3, #12
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d00b      	beq.n	8000ffa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fe2:	4b62      	ldr	r3, [pc, #392]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000fea:	2b08      	cmp	r3, #8
 8000fec:	d11c      	bne.n	8001028 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fee:	4b5f      	ldr	r3, [pc, #380]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d116      	bne.n	8001028 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ffa:	4b5c      	ldr	r3, [pc, #368]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f003 0302 	and.w	r3, r3, #2
 8001002:	2b00      	cmp	r3, #0
 8001004:	d005      	beq.n	8001012 <HAL_RCC_OscConfig+0x152>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d001      	beq.n	8001012 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e1bb      	b.n	800138a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001012:	4b56      	ldr	r3, [pc, #344]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	691b      	ldr	r3, [r3, #16]
 800101e:	00db      	lsls	r3, r3, #3
 8001020:	4952      	ldr	r1, [pc, #328]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 8001022:	4313      	orrs	r3, r2
 8001024:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001026:	e03a      	b.n	800109e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d020      	beq.n	8001072 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001030:	4b4f      	ldr	r3, [pc, #316]	; (8001170 <HAL_RCC_OscConfig+0x2b0>)
 8001032:	2201      	movs	r2, #1
 8001034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001036:	f7ff fc73 	bl	8000920 <HAL_GetTick>
 800103a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800103c:	e008      	b.n	8001050 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800103e:	f7ff fc6f 	bl	8000920 <HAL_GetTick>
 8001042:	4602      	mov	r2, r0
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	2b02      	cmp	r3, #2
 800104a:	d901      	bls.n	8001050 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800104c:	2303      	movs	r3, #3
 800104e:	e19c      	b.n	800138a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001050:	4b46      	ldr	r3, [pc, #280]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 0302 	and.w	r3, r3, #2
 8001058:	2b00      	cmp	r3, #0
 800105a:	d0f0      	beq.n	800103e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800105c:	4b43      	ldr	r3, [pc, #268]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	691b      	ldr	r3, [r3, #16]
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	4940      	ldr	r1, [pc, #256]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 800106c:	4313      	orrs	r3, r2
 800106e:	600b      	str	r3, [r1, #0]
 8001070:	e015      	b.n	800109e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001072:	4b3f      	ldr	r3, [pc, #252]	; (8001170 <HAL_RCC_OscConfig+0x2b0>)
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001078:	f7ff fc52 	bl	8000920 <HAL_GetTick>
 800107c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800107e:	e008      	b.n	8001092 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001080:	f7ff fc4e 	bl	8000920 <HAL_GetTick>
 8001084:	4602      	mov	r2, r0
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	2b02      	cmp	r3, #2
 800108c:	d901      	bls.n	8001092 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800108e:	2303      	movs	r3, #3
 8001090:	e17b      	b.n	800138a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001092:	4b36      	ldr	r3, [pc, #216]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	2b00      	cmp	r3, #0
 800109c:	d1f0      	bne.n	8001080 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 0308 	and.w	r3, r3, #8
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d030      	beq.n	800110c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d016      	beq.n	80010e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010b2:	4b30      	ldr	r3, [pc, #192]	; (8001174 <HAL_RCC_OscConfig+0x2b4>)
 80010b4:	2201      	movs	r2, #1
 80010b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010b8:	f7ff fc32 	bl	8000920 <HAL_GetTick>
 80010bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010be:	e008      	b.n	80010d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010c0:	f7ff fc2e 	bl	8000920 <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d901      	bls.n	80010d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80010ce:	2303      	movs	r3, #3
 80010d0:	e15b      	b.n	800138a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010d2:	4b26      	ldr	r3, [pc, #152]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 80010d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d0f0      	beq.n	80010c0 <HAL_RCC_OscConfig+0x200>
 80010de:	e015      	b.n	800110c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010e0:	4b24      	ldr	r3, [pc, #144]	; (8001174 <HAL_RCC_OscConfig+0x2b4>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010e6:	f7ff fc1b 	bl	8000920 <HAL_GetTick>
 80010ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010ec:	e008      	b.n	8001100 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010ee:	f7ff fc17 	bl	8000920 <HAL_GetTick>
 80010f2:	4602      	mov	r2, r0
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d901      	bls.n	8001100 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80010fc:	2303      	movs	r3, #3
 80010fe:	e144      	b.n	800138a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001100:	4b1a      	ldr	r3, [pc, #104]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 8001102:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001104:	f003 0302 	and.w	r3, r3, #2
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f0      	bne.n	80010ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0304 	and.w	r3, r3, #4
 8001114:	2b00      	cmp	r3, #0
 8001116:	f000 80a0 	beq.w	800125a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800111a:	2300      	movs	r3, #0
 800111c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800111e:	4b13      	ldr	r3, [pc, #76]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d10f      	bne.n	800114a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	60bb      	str	r3, [r7, #8]
 800112e:	4b0f      	ldr	r3, [pc, #60]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	4a0e      	ldr	r2, [pc, #56]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 8001134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001138:	6413      	str	r3, [r2, #64]	; 0x40
 800113a:	4b0c      	ldr	r3, [pc, #48]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001146:	2301      	movs	r3, #1
 8001148:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800114a:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <HAL_RCC_OscConfig+0x2b8>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001152:	2b00      	cmp	r3, #0
 8001154:	d121      	bne.n	800119a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001156:	4b08      	ldr	r3, [pc, #32]	; (8001178 <HAL_RCC_OscConfig+0x2b8>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a07      	ldr	r2, [pc, #28]	; (8001178 <HAL_RCC_OscConfig+0x2b8>)
 800115c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001160:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001162:	f7ff fbdd 	bl	8000920 <HAL_GetTick>
 8001166:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001168:	e011      	b.n	800118e <HAL_RCC_OscConfig+0x2ce>
 800116a:	bf00      	nop
 800116c:	40023800 	.word	0x40023800
 8001170:	42470000 	.word	0x42470000
 8001174:	42470e80 	.word	0x42470e80
 8001178:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800117c:	f7ff fbd0 	bl	8000920 <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	2b02      	cmp	r3, #2
 8001188:	d901      	bls.n	800118e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e0fd      	b.n	800138a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800118e:	4b81      	ldr	r3, [pc, #516]	; (8001394 <HAL_RCC_OscConfig+0x4d4>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001196:	2b00      	cmp	r3, #0
 8001198:	d0f0      	beq.n	800117c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d106      	bne.n	80011b0 <HAL_RCC_OscConfig+0x2f0>
 80011a2:	4b7d      	ldr	r3, [pc, #500]	; (8001398 <HAL_RCC_OscConfig+0x4d8>)
 80011a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011a6:	4a7c      	ldr	r2, [pc, #496]	; (8001398 <HAL_RCC_OscConfig+0x4d8>)
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	6713      	str	r3, [r2, #112]	; 0x70
 80011ae:	e01c      	b.n	80011ea <HAL_RCC_OscConfig+0x32a>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	2b05      	cmp	r3, #5
 80011b6:	d10c      	bne.n	80011d2 <HAL_RCC_OscConfig+0x312>
 80011b8:	4b77      	ldr	r3, [pc, #476]	; (8001398 <HAL_RCC_OscConfig+0x4d8>)
 80011ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011bc:	4a76      	ldr	r2, [pc, #472]	; (8001398 <HAL_RCC_OscConfig+0x4d8>)
 80011be:	f043 0304 	orr.w	r3, r3, #4
 80011c2:	6713      	str	r3, [r2, #112]	; 0x70
 80011c4:	4b74      	ldr	r3, [pc, #464]	; (8001398 <HAL_RCC_OscConfig+0x4d8>)
 80011c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011c8:	4a73      	ldr	r2, [pc, #460]	; (8001398 <HAL_RCC_OscConfig+0x4d8>)
 80011ca:	f043 0301 	orr.w	r3, r3, #1
 80011ce:	6713      	str	r3, [r2, #112]	; 0x70
 80011d0:	e00b      	b.n	80011ea <HAL_RCC_OscConfig+0x32a>
 80011d2:	4b71      	ldr	r3, [pc, #452]	; (8001398 <HAL_RCC_OscConfig+0x4d8>)
 80011d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011d6:	4a70      	ldr	r2, [pc, #448]	; (8001398 <HAL_RCC_OscConfig+0x4d8>)
 80011d8:	f023 0301 	bic.w	r3, r3, #1
 80011dc:	6713      	str	r3, [r2, #112]	; 0x70
 80011de:	4b6e      	ldr	r3, [pc, #440]	; (8001398 <HAL_RCC_OscConfig+0x4d8>)
 80011e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011e2:	4a6d      	ldr	r2, [pc, #436]	; (8001398 <HAL_RCC_OscConfig+0x4d8>)
 80011e4:	f023 0304 	bic.w	r3, r3, #4
 80011e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d015      	beq.n	800121e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011f2:	f7ff fb95 	bl	8000920 <HAL_GetTick>
 80011f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011f8:	e00a      	b.n	8001210 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011fa:	f7ff fb91 	bl	8000920 <HAL_GetTick>
 80011fe:	4602      	mov	r2, r0
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	f241 3288 	movw	r2, #5000	; 0x1388
 8001208:	4293      	cmp	r3, r2
 800120a:	d901      	bls.n	8001210 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e0bc      	b.n	800138a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001210:	4b61      	ldr	r3, [pc, #388]	; (8001398 <HAL_RCC_OscConfig+0x4d8>)
 8001212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001214:	f003 0302 	and.w	r3, r3, #2
 8001218:	2b00      	cmp	r3, #0
 800121a:	d0ee      	beq.n	80011fa <HAL_RCC_OscConfig+0x33a>
 800121c:	e014      	b.n	8001248 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800121e:	f7ff fb7f 	bl	8000920 <HAL_GetTick>
 8001222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001224:	e00a      	b.n	800123c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001226:	f7ff fb7b 	bl	8000920 <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	f241 3288 	movw	r2, #5000	; 0x1388
 8001234:	4293      	cmp	r3, r2
 8001236:	d901      	bls.n	800123c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001238:	2303      	movs	r3, #3
 800123a:	e0a6      	b.n	800138a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800123c:	4b56      	ldr	r3, [pc, #344]	; (8001398 <HAL_RCC_OscConfig+0x4d8>)
 800123e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001240:	f003 0302 	and.w	r3, r3, #2
 8001244:	2b00      	cmp	r3, #0
 8001246:	d1ee      	bne.n	8001226 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001248:	7dfb      	ldrb	r3, [r7, #23]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d105      	bne.n	800125a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800124e:	4b52      	ldr	r3, [pc, #328]	; (8001398 <HAL_RCC_OscConfig+0x4d8>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	4a51      	ldr	r2, [pc, #324]	; (8001398 <HAL_RCC_OscConfig+0x4d8>)
 8001254:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001258:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	2b00      	cmp	r3, #0
 8001260:	f000 8092 	beq.w	8001388 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001264:	4b4c      	ldr	r3, [pc, #304]	; (8001398 <HAL_RCC_OscConfig+0x4d8>)
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	f003 030c 	and.w	r3, r3, #12
 800126c:	2b08      	cmp	r3, #8
 800126e:	d05c      	beq.n	800132a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	2b02      	cmp	r3, #2
 8001276:	d141      	bne.n	80012fc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001278:	4b48      	ldr	r3, [pc, #288]	; (800139c <HAL_RCC_OscConfig+0x4dc>)
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800127e:	f7ff fb4f 	bl	8000920 <HAL_GetTick>
 8001282:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001284:	e008      	b.n	8001298 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001286:	f7ff fb4b 	bl	8000920 <HAL_GetTick>
 800128a:	4602      	mov	r2, r0
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d901      	bls.n	8001298 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	e078      	b.n	800138a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001298:	4b3f      	ldr	r3, [pc, #252]	; (8001398 <HAL_RCC_OscConfig+0x4d8>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d1f0      	bne.n	8001286 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	69da      	ldr	r2, [r3, #28]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6a1b      	ldr	r3, [r3, #32]
 80012ac:	431a      	orrs	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b2:	019b      	lsls	r3, r3, #6
 80012b4:	431a      	orrs	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ba:	085b      	lsrs	r3, r3, #1
 80012bc:	3b01      	subs	r3, #1
 80012be:	041b      	lsls	r3, r3, #16
 80012c0:	431a      	orrs	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c6:	061b      	lsls	r3, r3, #24
 80012c8:	4933      	ldr	r1, [pc, #204]	; (8001398 <HAL_RCC_OscConfig+0x4d8>)
 80012ca:	4313      	orrs	r3, r2
 80012cc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012ce:	4b33      	ldr	r3, [pc, #204]	; (800139c <HAL_RCC_OscConfig+0x4dc>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d4:	f7ff fb24 	bl	8000920 <HAL_GetTick>
 80012d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012da:	e008      	b.n	80012ee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012dc:	f7ff fb20 	bl	8000920 <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d901      	bls.n	80012ee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e04d      	b.n	800138a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012ee:	4b2a      	ldr	r3, [pc, #168]	; (8001398 <HAL_RCC_OscConfig+0x4d8>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d0f0      	beq.n	80012dc <HAL_RCC_OscConfig+0x41c>
 80012fa:	e045      	b.n	8001388 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012fc:	4b27      	ldr	r3, [pc, #156]	; (800139c <HAL_RCC_OscConfig+0x4dc>)
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001302:	f7ff fb0d 	bl	8000920 <HAL_GetTick>
 8001306:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001308:	e008      	b.n	800131c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800130a:	f7ff fb09 	bl	8000920 <HAL_GetTick>
 800130e:	4602      	mov	r2, r0
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	2b02      	cmp	r3, #2
 8001316:	d901      	bls.n	800131c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	e036      	b.n	800138a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800131c:	4b1e      	ldr	r3, [pc, #120]	; (8001398 <HAL_RCC_OscConfig+0x4d8>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d1f0      	bne.n	800130a <HAL_RCC_OscConfig+0x44a>
 8001328:	e02e      	b.n	8001388 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d101      	bne.n	8001336 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e029      	b.n	800138a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001336:	4b18      	ldr	r3, [pc, #96]	; (8001398 <HAL_RCC_OscConfig+0x4d8>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	429a      	cmp	r2, r3
 8001348:	d11c      	bne.n	8001384 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001354:	429a      	cmp	r2, r3
 8001356:	d115      	bne.n	8001384 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001358:	68fa      	ldr	r2, [r7, #12]
 800135a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800135e:	4013      	ands	r3, r2
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001364:	4293      	cmp	r3, r2
 8001366:	d10d      	bne.n	8001384 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001372:	429a      	cmp	r2, r3
 8001374:	d106      	bne.n	8001384 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001380:	429a      	cmp	r2, r3
 8001382:	d001      	beq.n	8001388 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e000      	b.n	800138a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40007000 	.word	0x40007000
 8001398:	40023800 	.word	0x40023800
 800139c:	42470060 	.word	0x42470060

080013a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d101      	bne.n	80013b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e0cc      	b.n	800154e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013b4:	4b68      	ldr	r3, [pc, #416]	; (8001558 <HAL_RCC_ClockConfig+0x1b8>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 030f 	and.w	r3, r3, #15
 80013bc:	683a      	ldr	r2, [r7, #0]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d90c      	bls.n	80013dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013c2:	4b65      	ldr	r3, [pc, #404]	; (8001558 <HAL_RCC_ClockConfig+0x1b8>)
 80013c4:	683a      	ldr	r2, [r7, #0]
 80013c6:	b2d2      	uxtb	r2, r2
 80013c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ca:	4b63      	ldr	r3, [pc, #396]	; (8001558 <HAL_RCC_ClockConfig+0x1b8>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 030f 	and.w	r3, r3, #15
 80013d2:	683a      	ldr	r2, [r7, #0]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d001      	beq.n	80013dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e0b8      	b.n	800154e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0302 	and.w	r3, r3, #2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d020      	beq.n	800142a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d005      	beq.n	8001400 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013f4:	4b59      	ldr	r3, [pc, #356]	; (800155c <HAL_RCC_ClockConfig+0x1bc>)
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	4a58      	ldr	r2, [pc, #352]	; (800155c <HAL_RCC_ClockConfig+0x1bc>)
 80013fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80013fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0308 	and.w	r3, r3, #8
 8001408:	2b00      	cmp	r3, #0
 800140a:	d005      	beq.n	8001418 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800140c:	4b53      	ldr	r3, [pc, #332]	; (800155c <HAL_RCC_ClockConfig+0x1bc>)
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	4a52      	ldr	r2, [pc, #328]	; (800155c <HAL_RCC_ClockConfig+0x1bc>)
 8001412:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001416:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001418:	4b50      	ldr	r3, [pc, #320]	; (800155c <HAL_RCC_ClockConfig+0x1bc>)
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	494d      	ldr	r1, [pc, #308]	; (800155c <HAL_RCC_ClockConfig+0x1bc>)
 8001426:	4313      	orrs	r3, r2
 8001428:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	2b00      	cmp	r3, #0
 8001434:	d044      	beq.n	80014c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d107      	bne.n	800144e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800143e:	4b47      	ldr	r3, [pc, #284]	; (800155c <HAL_RCC_ClockConfig+0x1bc>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d119      	bne.n	800147e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e07f      	b.n	800154e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	2b02      	cmp	r3, #2
 8001454:	d003      	beq.n	800145e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800145a:	2b03      	cmp	r3, #3
 800145c:	d107      	bne.n	800146e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800145e:	4b3f      	ldr	r3, [pc, #252]	; (800155c <HAL_RCC_ClockConfig+0x1bc>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d109      	bne.n	800147e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e06f      	b.n	800154e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800146e:	4b3b      	ldr	r3, [pc, #236]	; (800155c <HAL_RCC_ClockConfig+0x1bc>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d101      	bne.n	800147e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e067      	b.n	800154e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800147e:	4b37      	ldr	r3, [pc, #220]	; (800155c <HAL_RCC_ClockConfig+0x1bc>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f023 0203 	bic.w	r2, r3, #3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	4934      	ldr	r1, [pc, #208]	; (800155c <HAL_RCC_ClockConfig+0x1bc>)
 800148c:	4313      	orrs	r3, r2
 800148e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001490:	f7ff fa46 	bl	8000920 <HAL_GetTick>
 8001494:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001496:	e00a      	b.n	80014ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001498:	f7ff fa42 	bl	8000920 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e04f      	b.n	800154e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ae:	4b2b      	ldr	r3, [pc, #172]	; (800155c <HAL_RCC_ClockConfig+0x1bc>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f003 020c 	and.w	r2, r3, #12
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	429a      	cmp	r2, r3
 80014be:	d1eb      	bne.n	8001498 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014c0:	4b25      	ldr	r3, [pc, #148]	; (8001558 <HAL_RCC_ClockConfig+0x1b8>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 030f 	and.w	r3, r3, #15
 80014c8:	683a      	ldr	r2, [r7, #0]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d20c      	bcs.n	80014e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ce:	4b22      	ldr	r3, [pc, #136]	; (8001558 <HAL_RCC_ClockConfig+0x1b8>)
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	b2d2      	uxtb	r2, r2
 80014d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014d6:	4b20      	ldr	r3, [pc, #128]	; (8001558 <HAL_RCC_ClockConfig+0x1b8>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 030f 	and.w	r3, r3, #15
 80014de:	683a      	ldr	r2, [r7, #0]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d001      	beq.n	80014e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e032      	b.n	800154e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0304 	and.w	r3, r3, #4
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d008      	beq.n	8001506 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014f4:	4b19      	ldr	r3, [pc, #100]	; (800155c <HAL_RCC_ClockConfig+0x1bc>)
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	4916      	ldr	r1, [pc, #88]	; (800155c <HAL_RCC_ClockConfig+0x1bc>)
 8001502:	4313      	orrs	r3, r2
 8001504:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0308 	and.w	r3, r3, #8
 800150e:	2b00      	cmp	r3, #0
 8001510:	d009      	beq.n	8001526 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001512:	4b12      	ldr	r3, [pc, #72]	; (800155c <HAL_RCC_ClockConfig+0x1bc>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	691b      	ldr	r3, [r3, #16]
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	490e      	ldr	r1, [pc, #56]	; (800155c <HAL_RCC_ClockConfig+0x1bc>)
 8001522:	4313      	orrs	r3, r2
 8001524:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001526:	f000 f821 	bl	800156c <HAL_RCC_GetSysClockFreq>
 800152a:	4601      	mov	r1, r0
 800152c:	4b0b      	ldr	r3, [pc, #44]	; (800155c <HAL_RCC_ClockConfig+0x1bc>)
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	091b      	lsrs	r3, r3, #4
 8001532:	f003 030f 	and.w	r3, r3, #15
 8001536:	4a0a      	ldr	r2, [pc, #40]	; (8001560 <HAL_RCC_ClockConfig+0x1c0>)
 8001538:	5cd3      	ldrb	r3, [r2, r3]
 800153a:	fa21 f303 	lsr.w	r3, r1, r3
 800153e:	4a09      	ldr	r2, [pc, #36]	; (8001564 <HAL_RCC_ClockConfig+0x1c4>)
 8001540:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001542:	4b09      	ldr	r3, [pc, #36]	; (8001568 <HAL_RCC_ClockConfig+0x1c8>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff f9a6 	bl	8000898 <HAL_InitTick>

  return HAL_OK;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40023c00 	.word	0x40023c00
 800155c:	40023800 	.word	0x40023800
 8001560:	0800431c 	.word	0x0800431c
 8001564:	20000000 	.word	0x20000000
 8001568:	20000004 	.word	0x20000004

0800156c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800156c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001572:	2300      	movs	r3, #0
 8001574:	607b      	str	r3, [r7, #4]
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	2300      	movs	r3, #0
 800157c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800157e:	2300      	movs	r3, #0
 8001580:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001582:	4b50      	ldr	r3, [pc, #320]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f003 030c 	and.w	r3, r3, #12
 800158a:	2b04      	cmp	r3, #4
 800158c:	d007      	beq.n	800159e <HAL_RCC_GetSysClockFreq+0x32>
 800158e:	2b08      	cmp	r3, #8
 8001590:	d008      	beq.n	80015a4 <HAL_RCC_GetSysClockFreq+0x38>
 8001592:	2b00      	cmp	r3, #0
 8001594:	f040 808d 	bne.w	80016b2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001598:	4b4b      	ldr	r3, [pc, #300]	; (80016c8 <HAL_RCC_GetSysClockFreq+0x15c>)
 800159a:	60bb      	str	r3, [r7, #8]
       break;
 800159c:	e08c      	b.n	80016b8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800159e:	4b4b      	ldr	r3, [pc, #300]	; (80016cc <HAL_RCC_GetSysClockFreq+0x160>)
 80015a0:	60bb      	str	r3, [r7, #8]
      break;
 80015a2:	e089      	b.n	80016b8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015a4:	4b47      	ldr	r3, [pc, #284]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x158>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015ac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015ae:	4b45      	ldr	r3, [pc, #276]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x158>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d023      	beq.n	8001602 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015ba:	4b42      	ldr	r3, [pc, #264]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x158>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	099b      	lsrs	r3, r3, #6
 80015c0:	f04f 0400 	mov.w	r4, #0
 80015c4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80015c8:	f04f 0200 	mov.w	r2, #0
 80015cc:	ea03 0501 	and.w	r5, r3, r1
 80015d0:	ea04 0602 	and.w	r6, r4, r2
 80015d4:	4a3d      	ldr	r2, [pc, #244]	; (80016cc <HAL_RCC_GetSysClockFreq+0x160>)
 80015d6:	fb02 f106 	mul.w	r1, r2, r6
 80015da:	2200      	movs	r2, #0
 80015dc:	fb02 f205 	mul.w	r2, r2, r5
 80015e0:	440a      	add	r2, r1
 80015e2:	493a      	ldr	r1, [pc, #232]	; (80016cc <HAL_RCC_GetSysClockFreq+0x160>)
 80015e4:	fba5 0101 	umull	r0, r1, r5, r1
 80015e8:	1853      	adds	r3, r2, r1
 80015ea:	4619      	mov	r1, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f04f 0400 	mov.w	r4, #0
 80015f2:	461a      	mov	r2, r3
 80015f4:	4623      	mov	r3, r4
 80015f6:	f7fe fdfb 	bl	80001f0 <__aeabi_uldivmod>
 80015fa:	4603      	mov	r3, r0
 80015fc:	460c      	mov	r4, r1
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	e049      	b.n	8001696 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001602:	4b30      	ldr	r3, [pc, #192]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	099b      	lsrs	r3, r3, #6
 8001608:	f04f 0400 	mov.w	r4, #0
 800160c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001610:	f04f 0200 	mov.w	r2, #0
 8001614:	ea03 0501 	and.w	r5, r3, r1
 8001618:	ea04 0602 	and.w	r6, r4, r2
 800161c:	4629      	mov	r1, r5
 800161e:	4632      	mov	r2, r6
 8001620:	f04f 0300 	mov.w	r3, #0
 8001624:	f04f 0400 	mov.w	r4, #0
 8001628:	0154      	lsls	r4, r2, #5
 800162a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800162e:	014b      	lsls	r3, r1, #5
 8001630:	4619      	mov	r1, r3
 8001632:	4622      	mov	r2, r4
 8001634:	1b49      	subs	r1, r1, r5
 8001636:	eb62 0206 	sbc.w	r2, r2, r6
 800163a:	f04f 0300 	mov.w	r3, #0
 800163e:	f04f 0400 	mov.w	r4, #0
 8001642:	0194      	lsls	r4, r2, #6
 8001644:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001648:	018b      	lsls	r3, r1, #6
 800164a:	1a5b      	subs	r3, r3, r1
 800164c:	eb64 0402 	sbc.w	r4, r4, r2
 8001650:	f04f 0100 	mov.w	r1, #0
 8001654:	f04f 0200 	mov.w	r2, #0
 8001658:	00e2      	lsls	r2, r4, #3
 800165a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800165e:	00d9      	lsls	r1, r3, #3
 8001660:	460b      	mov	r3, r1
 8001662:	4614      	mov	r4, r2
 8001664:	195b      	adds	r3, r3, r5
 8001666:	eb44 0406 	adc.w	r4, r4, r6
 800166a:	f04f 0100 	mov.w	r1, #0
 800166e:	f04f 0200 	mov.w	r2, #0
 8001672:	02a2      	lsls	r2, r4, #10
 8001674:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001678:	0299      	lsls	r1, r3, #10
 800167a:	460b      	mov	r3, r1
 800167c:	4614      	mov	r4, r2
 800167e:	4618      	mov	r0, r3
 8001680:	4621      	mov	r1, r4
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f04f 0400 	mov.w	r4, #0
 8001688:	461a      	mov	r2, r3
 800168a:	4623      	mov	r3, r4
 800168c:	f7fe fdb0 	bl	80001f0 <__aeabi_uldivmod>
 8001690:	4603      	mov	r3, r0
 8001692:	460c      	mov	r4, r1
 8001694:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001696:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	0c1b      	lsrs	r3, r3, #16
 800169c:	f003 0303 	and.w	r3, r3, #3
 80016a0:	3301      	adds	r3, #1
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80016a6:	68fa      	ldr	r2, [r7, #12]
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ae:	60bb      	str	r3, [r7, #8]
      break;
 80016b0:	e002      	b.n	80016b8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80016b2:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80016b4:	60bb      	str	r3, [r7, #8]
      break;
 80016b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016b8:	68bb      	ldr	r3, [r7, #8]
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3714      	adds	r7, #20
 80016be:	46bd      	mov	sp, r7
 80016c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40023800 	.word	0x40023800
 80016c8:	00f42400 	.word	0x00f42400
 80016cc:	017d7840 	.word	0x017d7840

080016d0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
	...

080016e0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80016e6:	f3ef 8305 	mrs	r3, IPSR
 80016ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80016ec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d10f      	bne.n	8001712 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80016f2:	f3ef 8310 	mrs	r3, PRIMASK
 80016f6:	607b      	str	r3, [r7, #4]
  return(result);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d105      	bne.n	800170a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80016fe:	f3ef 8311 	mrs	r3, BASEPRI
 8001702:	603b      	str	r3, [r7, #0]
  return(result);
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d007      	beq.n	800171a <osKernelInitialize+0x3a>
 800170a:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <osKernelInitialize+0x64>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2b02      	cmp	r3, #2
 8001710:	d103      	bne.n	800171a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001712:	f06f 0305 	mvn.w	r3, #5
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	e00c      	b.n	8001734 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800171a:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <osKernelInitialize+0x64>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d105      	bne.n	800172e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001722:	4b08      	ldr	r3, [pc, #32]	; (8001744 <osKernelInitialize+0x64>)
 8001724:	2201      	movs	r2, #1
 8001726:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001728:	2300      	movs	r3, #0
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	e002      	b.n	8001734 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800172e:	f04f 33ff 	mov.w	r3, #4294967295
 8001732:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001734:	68fb      	ldr	r3, [r7, #12]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3714      	adds	r7, #20
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	2000002c 	.word	0x2000002c

08001748 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800174e:	f3ef 8305 	mrs	r3, IPSR
 8001752:	60bb      	str	r3, [r7, #8]
  return(result);
 8001754:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001756:	2b00      	cmp	r3, #0
 8001758:	d10f      	bne.n	800177a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800175a:	f3ef 8310 	mrs	r3, PRIMASK
 800175e:	607b      	str	r3, [r7, #4]
  return(result);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d105      	bne.n	8001772 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001766:	f3ef 8311 	mrs	r3, BASEPRI
 800176a:	603b      	str	r3, [r7, #0]
  return(result);
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d007      	beq.n	8001782 <osKernelStart+0x3a>
 8001772:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <osKernelStart+0x68>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2b02      	cmp	r3, #2
 8001778:	d103      	bne.n	8001782 <osKernelStart+0x3a>
    stat = osErrorISR;
 800177a:	f06f 0305 	mvn.w	r3, #5
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	e010      	b.n	80017a4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001782:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <osKernelStart+0x68>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d109      	bne.n	800179e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800178a:	f7ff ffa1 	bl	80016d0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800178e:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <osKernelStart+0x68>)
 8001790:	2202      	movs	r2, #2
 8001792:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001794:	f001 f8ce 	bl	8002934 <vTaskStartScheduler>
      stat = osOK;
 8001798:	2300      	movs	r3, #0
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	e002      	b.n	80017a4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800179e:	f04f 33ff 	mov.w	r3, #4294967295
 80017a2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80017a4:	68fb      	ldr	r3, [r7, #12]
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	2000002c 	.word	0x2000002c

080017b4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b090      	sub	sp, #64	; 0x40
 80017b8:	af04      	add	r7, sp, #16
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80017c4:	f3ef 8305 	mrs	r3, IPSR
 80017c8:	61fb      	str	r3, [r7, #28]
  return(result);
 80017ca:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f040 808f 	bne.w	80018f0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80017d2:	f3ef 8310 	mrs	r3, PRIMASK
 80017d6:	61bb      	str	r3, [r7, #24]
  return(result);
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d105      	bne.n	80017ea <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80017de:	f3ef 8311 	mrs	r3, BASEPRI
 80017e2:	617b      	str	r3, [r7, #20]
  return(result);
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d003      	beq.n	80017f2 <osThreadNew+0x3e>
 80017ea:	4b44      	ldr	r3, [pc, #272]	; (80018fc <osThreadNew+0x148>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d07e      	beq.n	80018f0 <osThreadNew+0x13c>
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d07b      	beq.n	80018f0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80017f8:	2380      	movs	r3, #128	; 0x80
 80017fa:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80017fc:	2318      	movs	r3, #24
 80017fe:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8001800:	2300      	movs	r3, #0
 8001802:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8001804:	f04f 33ff 	mov.w	r3, #4294967295
 8001808:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d045      	beq.n	800189c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d002      	beq.n	800181e <osThreadNew+0x6a>
        name = attr->name;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d002      	beq.n	800182c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182e:	2b00      	cmp	r3, #0
 8001830:	d008      	beq.n	8001844 <osThreadNew+0x90>
 8001832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001834:	2b38      	cmp	r3, #56	; 0x38
 8001836:	d805      	bhi.n	8001844 <osThreadNew+0x90>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <osThreadNew+0x94>
        return (NULL);
 8001844:	2300      	movs	r3, #0
 8001846:	e054      	b.n	80018f2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	695b      	ldr	r3, [r3, #20]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d003      	beq.n	8001858 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	695b      	ldr	r3, [r3, #20]
 8001854:	089b      	lsrs	r3, r3, #2
 8001856:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d00e      	beq.n	800187e <osThreadNew+0xca>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	2b5b      	cmp	r3, #91	; 0x5b
 8001866:	d90a      	bls.n	800187e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800186c:	2b00      	cmp	r3, #0
 800186e:	d006      	beq.n	800187e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	695b      	ldr	r3, [r3, #20]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d002      	beq.n	800187e <osThreadNew+0xca>
        mem = 1;
 8001878:	2301      	movs	r3, #1
 800187a:	623b      	str	r3, [r7, #32]
 800187c:	e010      	b.n	80018a0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d10c      	bne.n	80018a0 <osThreadNew+0xec>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d108      	bne.n	80018a0 <osThreadNew+0xec>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d104      	bne.n	80018a0 <osThreadNew+0xec>
          mem = 0;
 8001896:	2300      	movs	r3, #0
 8001898:	623b      	str	r3, [r7, #32]
 800189a:	e001      	b.n	80018a0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80018a0:	6a3b      	ldr	r3, [r7, #32]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d110      	bne.n	80018c8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80018ae:	9202      	str	r2, [sp, #8]
 80018b0:	9301      	str	r3, [sp, #4]
 80018b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80018bc:	68f8      	ldr	r0, [r7, #12]
 80018be:	f000 fe67 	bl	8002590 <xTaskCreateStatic>
 80018c2:	4603      	mov	r3, r0
 80018c4:	613b      	str	r3, [r7, #16]
 80018c6:	e013      	b.n	80018f0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80018c8:	6a3b      	ldr	r3, [r7, #32]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d110      	bne.n	80018f0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80018ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	f107 0310 	add.w	r3, r7, #16
 80018d6:	9301      	str	r3, [sp, #4]
 80018d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018da:	9300      	str	r3, [sp, #0]
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80018e0:	68f8      	ldr	r0, [r7, #12]
 80018e2:	f000 feaf 	bl	8002644 <xTaskCreate>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d001      	beq.n	80018f0 <osThreadNew+0x13c>
          hTask = NULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80018f0:	693b      	ldr	r3, [r7, #16]
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3730      	adds	r7, #48	; 0x30
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	2000002c 	.word	0x2000002c

08001900 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001908:	f3ef 8305 	mrs	r3, IPSR
 800190c:	613b      	str	r3, [r7, #16]
  return(result);
 800190e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001910:	2b00      	cmp	r3, #0
 8001912:	d10f      	bne.n	8001934 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001914:	f3ef 8310 	mrs	r3, PRIMASK
 8001918:	60fb      	str	r3, [r7, #12]
  return(result);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d105      	bne.n	800192c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001920:	f3ef 8311 	mrs	r3, BASEPRI
 8001924:	60bb      	str	r3, [r7, #8]
  return(result);
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d007      	beq.n	800193c <osDelay+0x3c>
 800192c:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <osDelay+0x58>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2b02      	cmp	r3, #2
 8001932:	d103      	bne.n	800193c <osDelay+0x3c>
    stat = osErrorISR;
 8001934:	f06f 0305 	mvn.w	r3, #5
 8001938:	617b      	str	r3, [r7, #20]
 800193a:	e007      	b.n	800194c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d002      	beq.n	800194c <osDelay+0x4c>
      vTaskDelay(ticks);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f000 ffc0 	bl	80028cc <vTaskDelay>
    }
  }

  return (stat);
 800194c:	697b      	ldr	r3, [r7, #20]
}
 800194e:	4618      	mov	r0, r3
 8001950:	3718      	adds	r7, #24
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	2000002c 	.word	0x2000002c

0800195c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4a07      	ldr	r2, [pc, #28]	; (8001988 <vApplicationGetIdleTaskMemory+0x2c>)
 800196c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	4a06      	ldr	r2, [pc, #24]	; (800198c <vApplicationGetIdleTaskMemory+0x30>)
 8001972:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2280      	movs	r2, #128	; 0x80
 8001978:	601a      	str	r2, [r3, #0]
}
 800197a:	bf00      	nop
 800197c:	3714      	adds	r7, #20
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	20000030 	.word	0x20000030
 800198c:	2000008c 	.word	0x2000008c

08001990 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	4a07      	ldr	r2, [pc, #28]	; (80019bc <vApplicationGetTimerTaskMemory+0x2c>)
 80019a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	4a06      	ldr	r2, [pc, #24]	; (80019c0 <vApplicationGetTimerTaskMemory+0x30>)
 80019a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019ae:	601a      	str	r2, [r3, #0]
}
 80019b0:	bf00      	nop
 80019b2:	3714      	adds	r7, #20
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	2000028c 	.word	0x2000028c
 80019c0:	200002e8 	.word	0x200002e8

080019c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f103 0208 	add.w	r2, r3, #8
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f04f 32ff 	mov.w	r2, #4294967295
 80019dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f103 0208 	add.w	r2, r3, #8
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f103 0208 	add.w	r2, r3, #8
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80019f8:	bf00      	nop
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b085      	sub	sp, #20
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
 8001a26:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	689a      	ldr	r2, [r3, #8]
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	1c5a      	adds	r2, r3, #1
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	601a      	str	r2, [r3, #0]
}
 8001a5a:	bf00      	nop
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001a66:	b480      	push	{r7}
 8001a68:	b085      	sub	sp, #20
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
 8001a6e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a7c:	d103      	bne.n	8001a86 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	e00c      	b.n	8001aa0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	3308      	adds	r3, #8
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	e002      	b.n	8001a94 <vListInsert+0x2e>
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	68ba      	ldr	r2, [r7, #8]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d2f6      	bcs.n	8001a8e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	685a      	ldr	r2, [r3, #4]
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	1c5a      	adds	r2, r3, #1
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	601a      	str	r2, [r3, #0]
}
 8001acc:	bf00      	nop
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	691b      	ldr	r3, [r3, #16]
 8001ae4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	6892      	ldr	r2, [r2, #8]
 8001aee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	6852      	ldr	r2, [r2, #4]
 8001af8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d103      	bne.n	8001b0c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	1e5a      	subs	r2, r3, #1
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d109      	bne.n	8001b54 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b44:	f383 8811 	msr	BASEPRI, r3
 8001b48:	f3bf 8f6f 	isb	sy
 8001b4c:	f3bf 8f4f 	dsb	sy
 8001b50:	60bb      	str	r3, [r7, #8]
 8001b52:	e7fe      	b.n	8001b52 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8001b54:	f002 f872 	bl	8003c3c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b60:	68f9      	ldr	r1, [r7, #12]
 8001b62:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001b64:	fb01 f303 	mul.w	r3, r1, r3
 8001b68:	441a      	add	r2, r3
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2200      	movs	r2, #0
 8001b72:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b84:	3b01      	subs	r3, #1
 8001b86:	68f9      	ldr	r1, [r7, #12]
 8001b88:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001b8a:	fb01 f303 	mul.w	r3, r1, r3
 8001b8e:	441a      	add	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	22ff      	movs	r2, #255	; 0xff
 8001b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	22ff      	movs	r2, #255	; 0xff
 8001ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d114      	bne.n	8001bd4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d01a      	beq.n	8001be8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	3310      	adds	r3, #16
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f001 f93c 	bl	8002e34 <xTaskRemoveFromEventList>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d012      	beq.n	8001be8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001bc2:	4b0d      	ldr	r3, [pc, #52]	; (8001bf8 <xQueueGenericReset+0xcc>)
 8001bc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	f3bf 8f4f 	dsb	sy
 8001bce:	f3bf 8f6f 	isb	sy
 8001bd2:	e009      	b.n	8001be8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	3310      	adds	r3, #16
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff fef3 	bl	80019c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	3324      	adds	r3, #36	; 0x24
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff feee 	bl	80019c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001be8:	f002 f856 	bl	8003c98 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001bec:	2301      	movs	r3, #1
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	e000ed04 	.word	0xe000ed04

08001bfc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08e      	sub	sp, #56	; 0x38
 8001c00:	af02      	add	r7, sp, #8
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
 8001c08:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d109      	bne.n	8001c24 <xQueueGenericCreateStatic+0x28>
 8001c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c14:	f383 8811 	msr	BASEPRI, r3
 8001c18:	f3bf 8f6f 	isb	sy
 8001c1c:	f3bf 8f4f 	dsb	sy
 8001c20:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c22:	e7fe      	b.n	8001c22 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d109      	bne.n	8001c3e <xQueueGenericCreateStatic+0x42>
 8001c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c2e:	f383 8811 	msr	BASEPRI, r3
 8001c32:	f3bf 8f6f 	isb	sy
 8001c36:	f3bf 8f4f 	dsb	sy
 8001c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c3c:	e7fe      	b.n	8001c3c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d002      	beq.n	8001c4a <xQueueGenericCreateStatic+0x4e>
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <xQueueGenericCreateStatic+0x52>
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e000      	b.n	8001c50 <xQueueGenericCreateStatic+0x54>
 8001c4e:	2300      	movs	r3, #0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d109      	bne.n	8001c68 <xQueueGenericCreateStatic+0x6c>
 8001c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c58:	f383 8811 	msr	BASEPRI, r3
 8001c5c:	f3bf 8f6f 	isb	sy
 8001c60:	f3bf 8f4f 	dsb	sy
 8001c64:	623b      	str	r3, [r7, #32]
 8001c66:	e7fe      	b.n	8001c66 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d102      	bne.n	8001c74 <xQueueGenericCreateStatic+0x78>
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d101      	bne.n	8001c78 <xQueueGenericCreateStatic+0x7c>
 8001c74:	2301      	movs	r3, #1
 8001c76:	e000      	b.n	8001c7a <xQueueGenericCreateStatic+0x7e>
 8001c78:	2300      	movs	r3, #0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d109      	bne.n	8001c92 <xQueueGenericCreateStatic+0x96>
 8001c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c82:	f383 8811 	msr	BASEPRI, r3
 8001c86:	f3bf 8f6f 	isb	sy
 8001c8a:	f3bf 8f4f 	dsb	sy
 8001c8e:	61fb      	str	r3, [r7, #28]
 8001c90:	e7fe      	b.n	8001c90 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001c92:	2350      	movs	r3, #80	; 0x50
 8001c94:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	2b50      	cmp	r3, #80	; 0x50
 8001c9a:	d009      	beq.n	8001cb0 <xQueueGenericCreateStatic+0xb4>
 8001c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ca0:	f383 8811 	msr	BASEPRI, r3
 8001ca4:	f3bf 8f6f 	isb	sy
 8001ca8:	f3bf 8f4f 	dsb	sy
 8001cac:	61bb      	str	r3, [r7, #24]
 8001cae:	e7fe      	b.n	8001cae <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001cb0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d00d      	beq.n	8001cd8 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001cc4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cca:	9300      	str	r3, [sp, #0]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	68b9      	ldr	r1, [r7, #8]
 8001cd2:	68f8      	ldr	r0, [r7, #12]
 8001cd4:	f000 f844 	bl	8001d60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3730      	adds	r7, #48	; 0x30
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b08a      	sub	sp, #40	; 0x28
 8001ce6:	af02      	add	r7, sp, #8
 8001ce8:	60f8      	str	r0, [r7, #12]
 8001cea:	60b9      	str	r1, [r7, #8]
 8001cec:	4613      	mov	r3, r2
 8001cee:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d109      	bne.n	8001d0a <xQueueGenericCreate+0x28>
 8001cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cfa:	f383 8811 	msr	BASEPRI, r3
 8001cfe:	f3bf 8f6f 	isb	sy
 8001d02:	f3bf 8f4f 	dsb	sy
 8001d06:	613b      	str	r3, [r7, #16]
 8001d08:	e7fe      	b.n	8001d08 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d102      	bne.n	8001d16 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8001d10:	2300      	movs	r3, #0
 8001d12:	61fb      	str	r3, [r7, #28]
 8001d14:	e004      	b.n	8001d20 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	68ba      	ldr	r2, [r7, #8]
 8001d1a:	fb02 f303 	mul.w	r3, r2, r3
 8001d1e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	3350      	adds	r3, #80	; 0x50
 8001d24:	4618      	mov	r0, r3
 8001d26:	f002 f8a3 	bl	8003e70 <pvPortMalloc>
 8001d2a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d011      	beq.n	8001d56 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	3350      	adds	r3, #80	; 0x50
 8001d3a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001d44:	79fa      	ldrb	r2, [r7, #7]
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	68b9      	ldr	r1, [r7, #8]
 8001d50:	68f8      	ldr	r0, [r7, #12]
 8001d52:	f000 f805 	bl	8001d60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001d56:	69bb      	ldr	r3, [r7, #24]
	}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3720      	adds	r7, #32
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
 8001d6c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d103      	bne.n	8001d7c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	e002      	b.n	8001d82 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	68ba      	ldr	r2, [r7, #8]
 8001d8c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001d8e:	2101      	movs	r1, #1
 8001d90:	69b8      	ldr	r0, [r7, #24]
 8001d92:	f7ff fecb 	bl	8001b2c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	78fa      	ldrb	r2, [r7, #3]
 8001d9a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001d9e:	bf00      	nop
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
	...

08001da8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b08e      	sub	sp, #56	; 0x38
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
 8001db4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001db6:	2300      	movs	r3, #0
 8001db8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d109      	bne.n	8001dd8 <xQueueGenericSend+0x30>
 8001dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dc8:	f383 8811 	msr	BASEPRI, r3
 8001dcc:	f3bf 8f6f 	isb	sy
 8001dd0:	f3bf 8f4f 	dsb	sy
 8001dd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dd6:	e7fe      	b.n	8001dd6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d103      	bne.n	8001de6 <xQueueGenericSend+0x3e>
 8001dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <xQueueGenericSend+0x42>
 8001de6:	2301      	movs	r3, #1
 8001de8:	e000      	b.n	8001dec <xQueueGenericSend+0x44>
 8001dea:	2300      	movs	r3, #0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d109      	bne.n	8001e04 <xQueueGenericSend+0x5c>
 8001df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001df4:	f383 8811 	msr	BASEPRI, r3
 8001df8:	f3bf 8f6f 	isb	sy
 8001dfc:	f3bf 8f4f 	dsb	sy
 8001e00:	627b      	str	r3, [r7, #36]	; 0x24
 8001e02:	e7fe      	b.n	8001e02 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d103      	bne.n	8001e12 <xQueueGenericSend+0x6a>
 8001e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d101      	bne.n	8001e16 <xQueueGenericSend+0x6e>
 8001e12:	2301      	movs	r3, #1
 8001e14:	e000      	b.n	8001e18 <xQueueGenericSend+0x70>
 8001e16:	2300      	movs	r3, #0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d109      	bne.n	8001e30 <xQueueGenericSend+0x88>
 8001e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e20:	f383 8811 	msr	BASEPRI, r3
 8001e24:	f3bf 8f6f 	isb	sy
 8001e28:	f3bf 8f4f 	dsb	sy
 8001e2c:	623b      	str	r3, [r7, #32]
 8001e2e:	e7fe      	b.n	8001e2e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001e30:	f001 f9b6 	bl	80031a0 <xTaskGetSchedulerState>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d102      	bne.n	8001e40 <xQueueGenericSend+0x98>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d101      	bne.n	8001e44 <xQueueGenericSend+0x9c>
 8001e40:	2301      	movs	r3, #1
 8001e42:	e000      	b.n	8001e46 <xQueueGenericSend+0x9e>
 8001e44:	2300      	movs	r3, #0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d109      	bne.n	8001e5e <xQueueGenericSend+0xb6>
 8001e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e4e:	f383 8811 	msr	BASEPRI, r3
 8001e52:	f3bf 8f6f 	isb	sy
 8001e56:	f3bf 8f4f 	dsb	sy
 8001e5a:	61fb      	str	r3, [r7, #28]
 8001e5c:	e7fe      	b.n	8001e5c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001e5e:	f001 feed 	bl	8003c3c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d302      	bcc.n	8001e74 <xQueueGenericSend+0xcc>
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d129      	bne.n	8001ec8 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	68b9      	ldr	r1, [r7, #8]
 8001e78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e7a:	f000 fa1c 	bl	80022b6 <prvCopyDataToQueue>
 8001e7e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d010      	beq.n	8001eaa <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e8a:	3324      	adds	r3, #36	; 0x24
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f000 ffd1 	bl	8002e34 <xTaskRemoveFromEventList>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d013      	beq.n	8001ec0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001e98:	4b3f      	ldr	r3, [pc, #252]	; (8001f98 <xQueueGenericSend+0x1f0>)
 8001e9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	f3bf 8f4f 	dsb	sy
 8001ea4:	f3bf 8f6f 	isb	sy
 8001ea8:	e00a      	b.n	8001ec0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d007      	beq.n	8001ec0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001eb0:	4b39      	ldr	r3, [pc, #228]	; (8001f98 <xQueueGenericSend+0x1f0>)
 8001eb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	f3bf 8f4f 	dsb	sy
 8001ebc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001ec0:	f001 feea 	bl	8003c98 <vPortExitCritical>
				return pdPASS;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e063      	b.n	8001f90 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d103      	bne.n	8001ed6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001ece:	f001 fee3 	bl	8003c98 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	e05c      	b.n	8001f90 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d106      	bne.n	8001eea <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001edc:	f107 0314 	add.w	r3, r7, #20
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f001 f809 	bl	8002ef8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001eea:	f001 fed5 	bl	8003c98 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001eee:	f000 fd85 	bl	80029fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001ef2:	f001 fea3 	bl	8003c3c <vPortEnterCritical>
 8001ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ef8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001efc:	b25b      	sxtb	r3, r3
 8001efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f02:	d103      	bne.n	8001f0c <xQueueGenericSend+0x164>
 8001f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f12:	b25b      	sxtb	r3, r3
 8001f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f18:	d103      	bne.n	8001f22 <xQueueGenericSend+0x17a>
 8001f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001f22:	f001 feb9 	bl	8003c98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001f26:	1d3a      	adds	r2, r7, #4
 8001f28:	f107 0314 	add.w	r3, r7, #20
 8001f2c:	4611      	mov	r1, r2
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f000 fff8 	bl	8002f24 <xTaskCheckForTimeOut>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d124      	bne.n	8001f84 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001f3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f3c:	f000 fab3 	bl	80024a6 <prvIsQueueFull>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d018      	beq.n	8001f78 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f48:	3310      	adds	r3, #16
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	4611      	mov	r1, r2
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f000 ff22 	bl	8002d98 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001f54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f56:	f000 fa3e 	bl	80023d6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001f5a:	f000 fd5d 	bl	8002a18 <xTaskResumeAll>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f47f af7c 	bne.w	8001e5e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8001f66:	4b0c      	ldr	r3, [pc, #48]	; (8001f98 <xQueueGenericSend+0x1f0>)
 8001f68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	f3bf 8f4f 	dsb	sy
 8001f72:	f3bf 8f6f 	isb	sy
 8001f76:	e772      	b.n	8001e5e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001f78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f7a:	f000 fa2c 	bl	80023d6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001f7e:	f000 fd4b 	bl	8002a18 <xTaskResumeAll>
 8001f82:	e76c      	b.n	8001e5e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001f84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f86:	f000 fa26 	bl	80023d6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001f8a:	f000 fd45 	bl	8002a18 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001f8e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3738      	adds	r7, #56	; 0x38
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	e000ed04 	.word	0xe000ed04

08001f9c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b08e      	sub	sp, #56	; 0x38
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
 8001fa8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d109      	bne.n	8001fc8 <xQueueGenericSendFromISR+0x2c>
 8001fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fb8:	f383 8811 	msr	BASEPRI, r3
 8001fbc:	f3bf 8f6f 	isb	sy
 8001fc0:	f3bf 8f4f 	dsb	sy
 8001fc4:	627b      	str	r3, [r7, #36]	; 0x24
 8001fc6:	e7fe      	b.n	8001fc6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d103      	bne.n	8001fd6 <xQueueGenericSendFromISR+0x3a>
 8001fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <xQueueGenericSendFromISR+0x3e>
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e000      	b.n	8001fdc <xQueueGenericSendFromISR+0x40>
 8001fda:	2300      	movs	r3, #0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d109      	bne.n	8001ff4 <xQueueGenericSendFromISR+0x58>
 8001fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fe4:	f383 8811 	msr	BASEPRI, r3
 8001fe8:	f3bf 8f6f 	isb	sy
 8001fec:	f3bf 8f4f 	dsb	sy
 8001ff0:	623b      	str	r3, [r7, #32]
 8001ff2:	e7fe      	b.n	8001ff2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d103      	bne.n	8002002 <xQueueGenericSendFromISR+0x66>
 8001ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d101      	bne.n	8002006 <xQueueGenericSendFromISR+0x6a>
 8002002:	2301      	movs	r3, #1
 8002004:	e000      	b.n	8002008 <xQueueGenericSendFromISR+0x6c>
 8002006:	2300      	movs	r3, #0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d109      	bne.n	8002020 <xQueueGenericSendFromISR+0x84>
 800200c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002010:	f383 8811 	msr	BASEPRI, r3
 8002014:	f3bf 8f6f 	isb	sy
 8002018:	f3bf 8f4f 	dsb	sy
 800201c:	61fb      	str	r3, [r7, #28]
 800201e:	e7fe      	b.n	800201e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002020:	f001 fee8 	bl	8003df4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002024:	f3ef 8211 	mrs	r2, BASEPRI
 8002028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800202c:	f383 8811 	msr	BASEPRI, r3
 8002030:	f3bf 8f6f 	isb	sy
 8002034:	f3bf 8f4f 	dsb	sy
 8002038:	61ba      	str	r2, [r7, #24]
 800203a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800203c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800203e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002042:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002048:	429a      	cmp	r2, r3
 800204a:	d302      	bcc.n	8002052 <xQueueGenericSendFromISR+0xb6>
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	2b02      	cmp	r3, #2
 8002050:	d12c      	bne.n	80020ac <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002054:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002058:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	68b9      	ldr	r1, [r7, #8]
 8002060:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002062:	f000 f928 	bl	80022b6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002066:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800206a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800206e:	d112      	bne.n	8002096 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002074:	2b00      	cmp	r3, #0
 8002076:	d016      	beq.n	80020a6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800207a:	3324      	adds	r3, #36	; 0x24
 800207c:	4618      	mov	r0, r3
 800207e:	f000 fed9 	bl	8002e34 <xTaskRemoveFromEventList>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d00e      	beq.n	80020a6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00b      	beq.n	80020a6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2201      	movs	r2, #1
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	e007      	b.n	80020a6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002096:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800209a:	3301      	adds	r3, #1
 800209c:	b2db      	uxtb	r3, r3
 800209e:	b25a      	sxtb	r2, r3
 80020a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80020a6:	2301      	movs	r3, #1
 80020a8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80020aa:	e001      	b.n	80020b0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	637b      	str	r3, [r7, #52]	; 0x34
 80020b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80020ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3738      	adds	r7, #56	; 0x38
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b08c      	sub	sp, #48	; 0x30
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80020d0:	2300      	movs	r3, #0
 80020d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80020d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d109      	bne.n	80020f2 <xQueueReceive+0x2e>
	__asm volatile
 80020de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020e2:	f383 8811 	msr	BASEPRI, r3
 80020e6:	f3bf 8f6f 	isb	sy
 80020ea:	f3bf 8f4f 	dsb	sy
 80020ee:	623b      	str	r3, [r7, #32]
 80020f0:	e7fe      	b.n	80020f0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d103      	bne.n	8002100 <xQueueReceive+0x3c>
 80020f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d101      	bne.n	8002104 <xQueueReceive+0x40>
 8002100:	2301      	movs	r3, #1
 8002102:	e000      	b.n	8002106 <xQueueReceive+0x42>
 8002104:	2300      	movs	r3, #0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d109      	bne.n	800211e <xQueueReceive+0x5a>
 800210a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800210e:	f383 8811 	msr	BASEPRI, r3
 8002112:	f3bf 8f6f 	isb	sy
 8002116:	f3bf 8f4f 	dsb	sy
 800211a:	61fb      	str	r3, [r7, #28]
 800211c:	e7fe      	b.n	800211c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800211e:	f001 f83f 	bl	80031a0 <xTaskGetSchedulerState>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d102      	bne.n	800212e <xQueueReceive+0x6a>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <xQueueReceive+0x6e>
 800212e:	2301      	movs	r3, #1
 8002130:	e000      	b.n	8002134 <xQueueReceive+0x70>
 8002132:	2300      	movs	r3, #0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d109      	bne.n	800214c <xQueueReceive+0x88>
 8002138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800213c:	f383 8811 	msr	BASEPRI, r3
 8002140:	f3bf 8f6f 	isb	sy
 8002144:	f3bf 8f4f 	dsb	sy
 8002148:	61bb      	str	r3, [r7, #24]
 800214a:	e7fe      	b.n	800214a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800214c:	f001 fd76 	bl	8003c3c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002154:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002158:	2b00      	cmp	r3, #0
 800215a:	d01f      	beq.n	800219c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800215c:	68b9      	ldr	r1, [r7, #8]
 800215e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002160:	f000 f913 	bl	800238a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002166:	1e5a      	subs	r2, r3, #1
 8002168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800216a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800216c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800216e:	691b      	ldr	r3, [r3, #16]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00f      	beq.n	8002194 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002176:	3310      	adds	r3, #16
 8002178:	4618      	mov	r0, r3
 800217a:	f000 fe5b 	bl	8002e34 <xTaskRemoveFromEventList>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d007      	beq.n	8002194 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002184:	4b3c      	ldr	r3, [pc, #240]	; (8002278 <xQueueReceive+0x1b4>)
 8002186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	f3bf 8f4f 	dsb	sy
 8002190:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002194:	f001 fd80 	bl	8003c98 <vPortExitCritical>
				return pdPASS;
 8002198:	2301      	movs	r3, #1
 800219a:	e069      	b.n	8002270 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d103      	bne.n	80021aa <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80021a2:	f001 fd79 	bl	8003c98 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80021a6:	2300      	movs	r3, #0
 80021a8:	e062      	b.n	8002270 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80021aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d106      	bne.n	80021be <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80021b0:	f107 0310 	add.w	r3, r7, #16
 80021b4:	4618      	mov	r0, r3
 80021b6:	f000 fe9f 	bl	8002ef8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80021ba:	2301      	movs	r3, #1
 80021bc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80021be:	f001 fd6b 	bl	8003c98 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80021c2:	f000 fc1b 	bl	80029fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80021c6:	f001 fd39 	bl	8003c3c <vPortEnterCritical>
 80021ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80021d0:	b25b      	sxtb	r3, r3
 80021d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d6:	d103      	bne.n	80021e0 <xQueueReceive+0x11c>
 80021d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021e6:	b25b      	sxtb	r3, r3
 80021e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ec:	d103      	bne.n	80021f6 <xQueueReceive+0x132>
 80021ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80021f6:	f001 fd4f 	bl	8003c98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80021fa:	1d3a      	adds	r2, r7, #4
 80021fc:	f107 0310 	add.w	r3, r7, #16
 8002200:	4611      	mov	r1, r2
 8002202:	4618      	mov	r0, r3
 8002204:	f000 fe8e 	bl	8002f24 <xTaskCheckForTimeOut>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d123      	bne.n	8002256 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800220e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002210:	f000 f933 	bl	800247a <prvIsQueueEmpty>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d017      	beq.n	800224a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800221a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800221c:	3324      	adds	r3, #36	; 0x24
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	4611      	mov	r1, r2
 8002222:	4618      	mov	r0, r3
 8002224:	f000 fdb8 	bl	8002d98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002228:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800222a:	f000 f8d4 	bl	80023d6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800222e:	f000 fbf3 	bl	8002a18 <xTaskResumeAll>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d189      	bne.n	800214c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8002238:	4b0f      	ldr	r3, [pc, #60]	; (8002278 <xQueueReceive+0x1b4>)
 800223a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	f3bf 8f4f 	dsb	sy
 8002244:	f3bf 8f6f 	isb	sy
 8002248:	e780      	b.n	800214c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800224a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800224c:	f000 f8c3 	bl	80023d6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002250:	f000 fbe2 	bl	8002a18 <xTaskResumeAll>
 8002254:	e77a      	b.n	800214c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002256:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002258:	f000 f8bd 	bl	80023d6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800225c:	f000 fbdc 	bl	8002a18 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002260:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002262:	f000 f90a 	bl	800247a <prvIsQueueEmpty>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	f43f af6f 	beq.w	800214c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800226e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002270:	4618      	mov	r0, r3
 8002272:	3730      	adds	r7, #48	; 0x30
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	e000ed04 	.word	0xe000ed04

0800227c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d109      	bne.n	800229e <uxQueueMessagesWaiting+0x22>
 800228a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800228e:	f383 8811 	msr	BASEPRI, r3
 8002292:	f3bf 8f6f 	isb	sy
 8002296:	f3bf 8f4f 	dsb	sy
 800229a:	60bb      	str	r3, [r7, #8]
 800229c:	e7fe      	b.n	800229c <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 800229e:	f001 fccd 	bl	8003c3c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a6:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80022a8:	f001 fcf6 	bl	8003c98 <vPortExitCritical>

	return uxReturn;
 80022ac:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80022ae:	4618      	mov	r0, r3
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b086      	sub	sp, #24
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	60f8      	str	r0, [r7, #12]
 80022be:	60b9      	str	r1, [r7, #8]
 80022c0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ca:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10d      	bne.n	80022f0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d14d      	bne.n	8002378 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f000 ff7b 	bl	80031dc <xTaskPriorityDisinherit>
 80022e6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2200      	movs	r2, #0
 80022ec:	609a      	str	r2, [r3, #8]
 80022ee:	e043      	b.n	8002378 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d119      	bne.n	800232a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6858      	ldr	r0, [r3, #4]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	461a      	mov	r2, r3
 8002300:	68b9      	ldr	r1, [r7, #8]
 8002302:	f001 ffaf 	bl	8004264 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	685a      	ldr	r2, [r3, #4]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	441a      	add	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	429a      	cmp	r2, r3
 800231e:	d32b      	bcc.n	8002378 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	605a      	str	r2, [r3, #4]
 8002328:	e026      	b.n	8002378 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	68d8      	ldr	r0, [r3, #12]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	461a      	mov	r2, r3
 8002334:	68b9      	ldr	r1, [r7, #8]
 8002336:	f001 ff95 	bl	8004264 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	425b      	negs	r3, r3
 8002344:	441a      	add	r2, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	68da      	ldr	r2, [r3, #12]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	429a      	cmp	r2, r3
 8002354:	d207      	bcs.n	8002366 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	689a      	ldr	r2, [r3, #8]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	425b      	negs	r3, r3
 8002360:	441a      	add	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b02      	cmp	r3, #2
 800236a:	d105      	bne.n	8002378 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d002      	beq.n	8002378 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	3b01      	subs	r3, #1
 8002376:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1c5a      	adds	r2, r3, #1
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002380:	697b      	ldr	r3, [r7, #20]
}
 8002382:	4618      	mov	r0, r3
 8002384:	3718      	adds	r7, #24
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800238a:	b580      	push	{r7, lr}
 800238c:	b082      	sub	sp, #8
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
 8002392:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002398:	2b00      	cmp	r3, #0
 800239a:	d018      	beq.n	80023ce <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68da      	ldr	r2, [r3, #12]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a4:	441a      	add	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68da      	ldr	r2, [r3, #12]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d303      	bcc.n	80023be <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68d9      	ldr	r1, [r3, #12]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	461a      	mov	r2, r3
 80023c8:	6838      	ldr	r0, [r7, #0]
 80023ca:	f001 ff4b 	bl	8004264 <memcpy>
	}
}
 80023ce:	bf00      	nop
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b084      	sub	sp, #16
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80023de:	f001 fc2d 	bl	8003c3c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80023e8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80023ea:	e011      	b.n	8002410 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d012      	beq.n	800241a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3324      	adds	r3, #36	; 0x24
 80023f8:	4618      	mov	r0, r3
 80023fa:	f000 fd1b 	bl	8002e34 <xTaskRemoveFromEventList>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002404:	f000 fdee 	bl	8002fe4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002408:	7bfb      	ldrb	r3, [r7, #15]
 800240a:	3b01      	subs	r3, #1
 800240c:	b2db      	uxtb	r3, r3
 800240e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002410:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002414:	2b00      	cmp	r3, #0
 8002416:	dce9      	bgt.n	80023ec <prvUnlockQueue+0x16>
 8002418:	e000      	b.n	800241c <prvUnlockQueue+0x46>
					break;
 800241a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	22ff      	movs	r2, #255	; 0xff
 8002420:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002424:	f001 fc38 	bl	8003c98 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002428:	f001 fc08 	bl	8003c3c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002432:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002434:	e011      	b.n	800245a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d012      	beq.n	8002464 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	3310      	adds	r3, #16
 8002442:	4618      	mov	r0, r3
 8002444:	f000 fcf6 	bl	8002e34 <xTaskRemoveFromEventList>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800244e:	f000 fdc9 	bl	8002fe4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002452:	7bbb      	ldrb	r3, [r7, #14]
 8002454:	3b01      	subs	r3, #1
 8002456:	b2db      	uxtb	r3, r3
 8002458:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800245a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800245e:	2b00      	cmp	r3, #0
 8002460:	dce9      	bgt.n	8002436 <prvUnlockQueue+0x60>
 8002462:	e000      	b.n	8002466 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002464:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	22ff      	movs	r2, #255	; 0xff
 800246a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800246e:	f001 fc13 	bl	8003c98 <vPortExitCritical>
}
 8002472:	bf00      	nop
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b084      	sub	sp, #16
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002482:	f001 fbdb 	bl	8003c3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800248a:	2b00      	cmp	r3, #0
 800248c:	d102      	bne.n	8002494 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800248e:	2301      	movs	r3, #1
 8002490:	60fb      	str	r3, [r7, #12]
 8002492:	e001      	b.n	8002498 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002494:	2300      	movs	r3, #0
 8002496:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002498:	f001 fbfe 	bl	8003c98 <vPortExitCritical>

	return xReturn;
 800249c:	68fb      	ldr	r3, [r7, #12]
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b084      	sub	sp, #16
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80024ae:	f001 fbc5 	bl	8003c3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d102      	bne.n	80024c4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80024be:	2301      	movs	r3, #1
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	e001      	b.n	80024c8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80024c4:	2300      	movs	r3, #0
 80024c6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80024c8:	f001 fbe6 	bl	8003c98 <vPortExitCritical>

	return xReturn;
 80024cc:	68fb      	ldr	r3, [r7, #12]
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
	...

080024d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80024e2:	2300      	movs	r3, #0
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	e014      	b.n	8002512 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80024e8:	4a0e      	ldr	r2, [pc, #56]	; (8002524 <vQueueAddToRegistry+0x4c>)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d10b      	bne.n	800250c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80024f4:	490b      	ldr	r1, [pc, #44]	; (8002524 <vQueueAddToRegistry+0x4c>)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80024fe:	4a09      	ldr	r2, [pc, #36]	; (8002524 <vQueueAddToRegistry+0x4c>)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	4413      	add	r3, r2
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800250a:	e005      	b.n	8002518 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	3301      	adds	r3, #1
 8002510:	60fb      	str	r3, [r7, #12]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2b07      	cmp	r3, #7
 8002516:	d9e7      	bls.n	80024e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002518:	bf00      	nop
 800251a:	3714      	adds	r7, #20
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr
 8002524:	20004944 	.word	0x20004944

08002528 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002538:	f001 fb80 	bl	8003c3c <vPortEnterCritical>
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002542:	b25b      	sxtb	r3, r3
 8002544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002548:	d103      	bne.n	8002552 <vQueueWaitForMessageRestricted+0x2a>
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002558:	b25b      	sxtb	r3, r3
 800255a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800255e:	d103      	bne.n	8002568 <vQueueWaitForMessageRestricted+0x40>
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002568:	f001 fb96 	bl	8003c98 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002570:	2b00      	cmp	r3, #0
 8002572:	d106      	bne.n	8002582 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	3324      	adds	r3, #36	; 0x24
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	68b9      	ldr	r1, [r7, #8]
 800257c:	4618      	mov	r0, r3
 800257e:	f000 fc2f 	bl	8002de0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002582:	6978      	ldr	r0, [r7, #20]
 8002584:	f7ff ff27 	bl	80023d6 <prvUnlockQueue>
	}
 8002588:	bf00      	nop
 800258a:	3718      	adds	r7, #24
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002590:	b580      	push	{r7, lr}
 8002592:	b08e      	sub	sp, #56	; 0x38
 8002594:	af04      	add	r7, sp, #16
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
 800259c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800259e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d109      	bne.n	80025b8 <xTaskCreateStatic+0x28>
 80025a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025a8:	f383 8811 	msr	BASEPRI, r3
 80025ac:	f3bf 8f6f 	isb	sy
 80025b0:	f3bf 8f4f 	dsb	sy
 80025b4:	623b      	str	r3, [r7, #32]
 80025b6:	e7fe      	b.n	80025b6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80025b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d109      	bne.n	80025d2 <xTaskCreateStatic+0x42>
 80025be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025c2:	f383 8811 	msr	BASEPRI, r3
 80025c6:	f3bf 8f6f 	isb	sy
 80025ca:	f3bf 8f4f 	dsb	sy
 80025ce:	61fb      	str	r3, [r7, #28]
 80025d0:	e7fe      	b.n	80025d0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80025d2:	235c      	movs	r3, #92	; 0x5c
 80025d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	2b5c      	cmp	r3, #92	; 0x5c
 80025da:	d009      	beq.n	80025f0 <xTaskCreateStatic+0x60>
 80025dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e0:	f383 8811 	msr	BASEPRI, r3
 80025e4:	f3bf 8f6f 	isb	sy
 80025e8:	f3bf 8f4f 	dsb	sy
 80025ec:	61bb      	str	r3, [r7, #24]
 80025ee:	e7fe      	b.n	80025ee <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80025f0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80025f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d01e      	beq.n	8002636 <xTaskCreateStatic+0xa6>
 80025f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d01b      	beq.n	8002636 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80025fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002600:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002604:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002606:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	2202      	movs	r2, #2
 800260c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002610:	2300      	movs	r3, #0
 8002612:	9303      	str	r3, [sp, #12]
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	9302      	str	r3, [sp, #8]
 8002618:	f107 0314 	add.w	r3, r7, #20
 800261c:	9301      	str	r3, [sp, #4]
 800261e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002620:	9300      	str	r3, [sp, #0]
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	68b9      	ldr	r1, [r7, #8]
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f000 f850 	bl	80026ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800262e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002630:	f000 f8dc 	bl	80027ec <prvAddNewTaskToReadyList>
 8002634:	e001      	b.n	800263a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8002636:	2300      	movs	r3, #0
 8002638:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800263a:	697b      	ldr	r3, [r7, #20]
	}
 800263c:	4618      	mov	r0, r3
 800263e:	3728      	adds	r7, #40	; 0x28
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002644:	b580      	push	{r7, lr}
 8002646:	b08c      	sub	sp, #48	; 0x30
 8002648:	af04      	add	r7, sp, #16
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	603b      	str	r3, [r7, #0]
 8002650:	4613      	mov	r3, r2
 8002652:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002654:	88fb      	ldrh	r3, [r7, #6]
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	4618      	mov	r0, r3
 800265a:	f001 fc09 	bl	8003e70 <pvPortMalloc>
 800265e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00e      	beq.n	8002684 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002666:	205c      	movs	r0, #92	; 0x5c
 8002668:	f001 fc02 	bl	8003e70 <pvPortMalloc>
 800266c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d003      	beq.n	800267c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	631a      	str	r2, [r3, #48]	; 0x30
 800267a:	e005      	b.n	8002688 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800267c:	6978      	ldr	r0, [r7, #20]
 800267e:	f001 fcb9 	bl	8003ff4 <vPortFree>
 8002682:	e001      	b.n	8002688 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002684:	2300      	movs	r3, #0
 8002686:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d017      	beq.n	80026be <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002696:	88fa      	ldrh	r2, [r7, #6]
 8002698:	2300      	movs	r3, #0
 800269a:	9303      	str	r3, [sp, #12]
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	9302      	str	r3, [sp, #8]
 80026a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a2:	9301      	str	r3, [sp, #4]
 80026a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a6:	9300      	str	r3, [sp, #0]
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	68b9      	ldr	r1, [r7, #8]
 80026ac:	68f8      	ldr	r0, [r7, #12]
 80026ae:	f000 f80e 	bl	80026ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80026b2:	69f8      	ldr	r0, [r7, #28]
 80026b4:	f000 f89a 	bl	80027ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80026b8:	2301      	movs	r3, #1
 80026ba:	61bb      	str	r3, [r7, #24]
 80026bc:	e002      	b.n	80026c4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80026be:	f04f 33ff 	mov.w	r3, #4294967295
 80026c2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80026c4:	69bb      	ldr	r3, [r7, #24]
	}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3720      	adds	r7, #32
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b088      	sub	sp, #32
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	60f8      	str	r0, [r7, #12]
 80026d6:	60b9      	str	r1, [r7, #8]
 80026d8:	607a      	str	r2, [r7, #4]
 80026da:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80026dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026de:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	461a      	mov	r2, r3
 80026e6:	21a5      	movs	r1, #165	; 0xa5
 80026e8:	f001 fdc7 	bl	800427a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80026ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80026f6:	3b01      	subs	r3, #1
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4413      	add	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	f023 0307 	bic.w	r3, r3, #7
 8002704:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	2b00      	cmp	r3, #0
 800270e:	d009      	beq.n	8002724 <prvInitialiseNewTask+0x56>
 8002710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002714:	f383 8811 	msr	BASEPRI, r3
 8002718:	f3bf 8f6f 	isb	sy
 800271c:	f3bf 8f4f 	dsb	sy
 8002720:	617b      	str	r3, [r7, #20]
 8002722:	e7fe      	b.n	8002722 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d01f      	beq.n	800276a <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800272a:	2300      	movs	r3, #0
 800272c:	61fb      	str	r3, [r7, #28]
 800272e:	e012      	b.n	8002756 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002730:	68ba      	ldr	r2, [r7, #8]
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	4413      	add	r3, r2
 8002736:	7819      	ldrb	r1, [r3, #0]
 8002738:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	4413      	add	r3, r2
 800273e:	3334      	adds	r3, #52	; 0x34
 8002740:	460a      	mov	r2, r1
 8002742:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002744:	68ba      	ldr	r2, [r7, #8]
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	4413      	add	r3, r2
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d006      	beq.n	800275e <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	3301      	adds	r3, #1
 8002754:	61fb      	str	r3, [r7, #28]
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	2b0f      	cmp	r3, #15
 800275a:	d9e9      	bls.n	8002730 <prvInitialiseNewTask+0x62>
 800275c:	e000      	b.n	8002760 <prvInitialiseNewTask+0x92>
			{
				break;
 800275e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002762:	2200      	movs	r2, #0
 8002764:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002768:	e003      	b.n	8002772 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800276a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002774:	2b37      	cmp	r3, #55	; 0x37
 8002776:	d901      	bls.n	800277c <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002778:	2337      	movs	r3, #55	; 0x37
 800277a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800277c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800277e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002780:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002784:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002786:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800278a:	2200      	movs	r2, #0
 800278c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800278e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002790:	3304      	adds	r3, #4
 8002792:	4618      	mov	r0, r3
 8002794:	f7ff f936 	bl	8001a04 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800279a:	3318      	adds	r3, #24
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff f931 	bl	8001a04 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80027a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027a6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027aa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80027ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80027b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027b6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80027b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ba:	2200      	movs	r2, #0
 80027bc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80027be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	68f9      	ldr	r1, [r7, #12]
 80027ca:	69b8      	ldr	r0, [r7, #24]
 80027cc:	f001 f90c 	bl	80039e8 <pxPortInitialiseStack>
 80027d0:	4602      	mov	r2, r0
 80027d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80027d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d002      	beq.n	80027e2 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80027dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80027e2:	bf00      	nop
 80027e4:	3720      	adds	r7, #32
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
	...

080027ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80027f4:	f001 fa22 	bl	8003c3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80027f8:	4b2d      	ldr	r3, [pc, #180]	; (80028b0 <prvAddNewTaskToReadyList+0xc4>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	3301      	adds	r3, #1
 80027fe:	4a2c      	ldr	r2, [pc, #176]	; (80028b0 <prvAddNewTaskToReadyList+0xc4>)
 8002800:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002802:	4b2c      	ldr	r3, [pc, #176]	; (80028b4 <prvAddNewTaskToReadyList+0xc8>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d109      	bne.n	800281e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800280a:	4a2a      	ldr	r2, [pc, #168]	; (80028b4 <prvAddNewTaskToReadyList+0xc8>)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002810:	4b27      	ldr	r3, [pc, #156]	; (80028b0 <prvAddNewTaskToReadyList+0xc4>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d110      	bne.n	800283a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002818:	f000 fc08 	bl	800302c <prvInitialiseTaskLists>
 800281c:	e00d      	b.n	800283a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800281e:	4b26      	ldr	r3, [pc, #152]	; (80028b8 <prvAddNewTaskToReadyList+0xcc>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d109      	bne.n	800283a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002826:	4b23      	ldr	r3, [pc, #140]	; (80028b4 <prvAddNewTaskToReadyList+0xc8>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002830:	429a      	cmp	r2, r3
 8002832:	d802      	bhi.n	800283a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002834:	4a1f      	ldr	r2, [pc, #124]	; (80028b4 <prvAddNewTaskToReadyList+0xc8>)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800283a:	4b20      	ldr	r3, [pc, #128]	; (80028bc <prvAddNewTaskToReadyList+0xd0>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	3301      	adds	r3, #1
 8002840:	4a1e      	ldr	r2, [pc, #120]	; (80028bc <prvAddNewTaskToReadyList+0xd0>)
 8002842:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002844:	4b1d      	ldr	r3, [pc, #116]	; (80028bc <prvAddNewTaskToReadyList+0xd0>)
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002850:	4b1b      	ldr	r3, [pc, #108]	; (80028c0 <prvAddNewTaskToReadyList+0xd4>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	429a      	cmp	r2, r3
 8002856:	d903      	bls.n	8002860 <prvAddNewTaskToReadyList+0x74>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285c:	4a18      	ldr	r2, [pc, #96]	; (80028c0 <prvAddNewTaskToReadyList+0xd4>)
 800285e:	6013      	str	r3, [r2, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002864:	4613      	mov	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4413      	add	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4a15      	ldr	r2, [pc, #84]	; (80028c4 <prvAddNewTaskToReadyList+0xd8>)
 800286e:	441a      	add	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	3304      	adds	r3, #4
 8002874:	4619      	mov	r1, r3
 8002876:	4610      	mov	r0, r2
 8002878:	f7ff f8d1 	bl	8001a1e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800287c:	f001 fa0c 	bl	8003c98 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002880:	4b0d      	ldr	r3, [pc, #52]	; (80028b8 <prvAddNewTaskToReadyList+0xcc>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00e      	beq.n	80028a6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002888:	4b0a      	ldr	r3, [pc, #40]	; (80028b4 <prvAddNewTaskToReadyList+0xc8>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002892:	429a      	cmp	r2, r3
 8002894:	d207      	bcs.n	80028a6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002896:	4b0c      	ldr	r3, [pc, #48]	; (80028c8 <prvAddNewTaskToReadyList+0xdc>)
 8002898:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800289c:	601a      	str	r2, [r3, #0]
 800289e:	f3bf 8f4f 	dsb	sy
 80028a2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80028a6:	bf00      	nop
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	20000bbc 	.word	0x20000bbc
 80028b4:	200006e8 	.word	0x200006e8
 80028b8:	20000bc8 	.word	0x20000bc8
 80028bc:	20000bd8 	.word	0x20000bd8
 80028c0:	20000bc4 	.word	0x20000bc4
 80028c4:	200006ec 	.word	0x200006ec
 80028c8:	e000ed04 	.word	0xe000ed04

080028cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80028d4:	2300      	movs	r3, #0
 80028d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d016      	beq.n	800290c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80028de:	4b13      	ldr	r3, [pc, #76]	; (800292c <vTaskDelay+0x60>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d009      	beq.n	80028fa <vTaskDelay+0x2e>
 80028e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ea:	f383 8811 	msr	BASEPRI, r3
 80028ee:	f3bf 8f6f 	isb	sy
 80028f2:	f3bf 8f4f 	dsb	sy
 80028f6:	60bb      	str	r3, [r7, #8]
 80028f8:	e7fe      	b.n	80028f8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80028fa:	f000 f87f 	bl	80029fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80028fe:	2100      	movs	r1, #0
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 fcd7 	bl	80032b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002906:	f000 f887 	bl	8002a18 <xTaskResumeAll>
 800290a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d107      	bne.n	8002922 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8002912:	4b07      	ldr	r3, [pc, #28]	; (8002930 <vTaskDelay+0x64>)
 8002914:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	f3bf 8f4f 	dsb	sy
 800291e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002922:	bf00      	nop
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	20000be4 	.word	0x20000be4
 8002930:	e000ed04 	.word	0xe000ed04

08002934 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b08a      	sub	sp, #40	; 0x28
 8002938:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800293a:	2300      	movs	r3, #0
 800293c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800293e:	2300      	movs	r3, #0
 8002940:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002942:	463a      	mov	r2, r7
 8002944:	1d39      	adds	r1, r7, #4
 8002946:	f107 0308 	add.w	r3, r7, #8
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff f806 	bl	800195c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002950:	6839      	ldr	r1, [r7, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	68ba      	ldr	r2, [r7, #8]
 8002956:	9202      	str	r2, [sp, #8]
 8002958:	9301      	str	r3, [sp, #4]
 800295a:	2300      	movs	r3, #0
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	2300      	movs	r3, #0
 8002960:	460a      	mov	r2, r1
 8002962:	4920      	ldr	r1, [pc, #128]	; (80029e4 <vTaskStartScheduler+0xb0>)
 8002964:	4820      	ldr	r0, [pc, #128]	; (80029e8 <vTaskStartScheduler+0xb4>)
 8002966:	f7ff fe13 	bl	8002590 <xTaskCreateStatic>
 800296a:	4602      	mov	r2, r0
 800296c:	4b1f      	ldr	r3, [pc, #124]	; (80029ec <vTaskStartScheduler+0xb8>)
 800296e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002970:	4b1e      	ldr	r3, [pc, #120]	; (80029ec <vTaskStartScheduler+0xb8>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d002      	beq.n	800297e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002978:	2301      	movs	r3, #1
 800297a:	617b      	str	r3, [r7, #20]
 800297c:	e001      	b.n	8002982 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800297e:	2300      	movs	r3, #0
 8002980:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d102      	bne.n	800298e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002988:	f000 fce8 	bl	800335c <xTimerCreateTimerTask>
 800298c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d115      	bne.n	80029c0 <vTaskStartScheduler+0x8c>
 8002994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002998:	f383 8811 	msr	BASEPRI, r3
 800299c:	f3bf 8f6f 	isb	sy
 80029a0:	f3bf 8f4f 	dsb	sy
 80029a4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80029a6:	4b12      	ldr	r3, [pc, #72]	; (80029f0 <vTaskStartScheduler+0xbc>)
 80029a8:	f04f 32ff 	mov.w	r2, #4294967295
 80029ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80029ae:	4b11      	ldr	r3, [pc, #68]	; (80029f4 <vTaskStartScheduler+0xc0>)
 80029b0:	2201      	movs	r2, #1
 80029b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80029b4:	4b10      	ldr	r3, [pc, #64]	; (80029f8 <vTaskStartScheduler+0xc4>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80029ba:	f001 f8a1 	bl	8003b00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80029be:	e00d      	b.n	80029dc <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c6:	d109      	bne.n	80029dc <vTaskStartScheduler+0xa8>
 80029c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029cc:	f383 8811 	msr	BASEPRI, r3
 80029d0:	f3bf 8f6f 	isb	sy
 80029d4:	f3bf 8f4f 	dsb	sy
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	e7fe      	b.n	80029da <vTaskStartScheduler+0xa6>
}
 80029dc:	bf00      	nop
 80029de:	3718      	adds	r7, #24
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	080042bc 	.word	0x080042bc
 80029e8:	08002ffd 	.word	0x08002ffd
 80029ec:	20000be0 	.word	0x20000be0
 80029f0:	20000bdc 	.word	0x20000bdc
 80029f4:	20000bc8 	.word	0x20000bc8
 80029f8:	20000bc0 	.word	0x20000bc0

080029fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002a00:	4b04      	ldr	r3, [pc, #16]	; (8002a14 <vTaskSuspendAll+0x18>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	3301      	adds	r3, #1
 8002a06:	4a03      	ldr	r2, [pc, #12]	; (8002a14 <vTaskSuspendAll+0x18>)
 8002a08:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8002a0a:	bf00      	nop
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr
 8002a14:	20000be4 	.word	0x20000be4

08002a18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002a22:	2300      	movs	r3, #0
 8002a24:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002a26:	4b41      	ldr	r3, [pc, #260]	; (8002b2c <xTaskResumeAll+0x114>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d109      	bne.n	8002a42 <xTaskResumeAll+0x2a>
 8002a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a32:	f383 8811 	msr	BASEPRI, r3
 8002a36:	f3bf 8f6f 	isb	sy
 8002a3a:	f3bf 8f4f 	dsb	sy
 8002a3e:	603b      	str	r3, [r7, #0]
 8002a40:	e7fe      	b.n	8002a40 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002a42:	f001 f8fb 	bl	8003c3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002a46:	4b39      	ldr	r3, [pc, #228]	; (8002b2c <xTaskResumeAll+0x114>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	4a37      	ldr	r2, [pc, #220]	; (8002b2c <xTaskResumeAll+0x114>)
 8002a4e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a50:	4b36      	ldr	r3, [pc, #216]	; (8002b2c <xTaskResumeAll+0x114>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d162      	bne.n	8002b1e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002a58:	4b35      	ldr	r3, [pc, #212]	; (8002b30 <xTaskResumeAll+0x118>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d05e      	beq.n	8002b1e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a60:	e02f      	b.n	8002ac2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a62:	4b34      	ldr	r3, [pc, #208]	; (8002b34 <xTaskResumeAll+0x11c>)
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	3318      	adds	r3, #24
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff f832 	bl	8001ad8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	3304      	adds	r3, #4
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff f82d 	bl	8001ad8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a82:	4b2d      	ldr	r3, [pc, #180]	; (8002b38 <xTaskResumeAll+0x120>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d903      	bls.n	8002a92 <xTaskResumeAll+0x7a>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8e:	4a2a      	ldr	r2, [pc, #168]	; (8002b38 <xTaskResumeAll+0x120>)
 8002a90:	6013      	str	r3, [r2, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a96:	4613      	mov	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4413      	add	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4a27      	ldr	r2, [pc, #156]	; (8002b3c <xTaskResumeAll+0x124>)
 8002aa0:	441a      	add	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	3304      	adds	r3, #4
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4610      	mov	r0, r2
 8002aaa:	f7fe ffb8 	bl	8001a1e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ab2:	4b23      	ldr	r3, [pc, #140]	; (8002b40 <xTaskResumeAll+0x128>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d302      	bcc.n	8002ac2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002abc:	4b21      	ldr	r3, [pc, #132]	; (8002b44 <xTaskResumeAll+0x12c>)
 8002abe:	2201      	movs	r2, #1
 8002ac0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ac2:	4b1c      	ldr	r3, [pc, #112]	; (8002b34 <xTaskResumeAll+0x11c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1cb      	bne.n	8002a62 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002ad0:	f000 fb46 	bl	8003160 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002ad4:	4b1c      	ldr	r3, [pc, #112]	; (8002b48 <xTaskResumeAll+0x130>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d010      	beq.n	8002b02 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002ae0:	f000 f846 	bl	8002b70 <xTaskIncrementTick>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d002      	beq.n	8002af0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002aea:	4b16      	ldr	r3, [pc, #88]	; (8002b44 <xTaskResumeAll+0x12c>)
 8002aec:	2201      	movs	r2, #1
 8002aee:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3b01      	subs	r3, #1
 8002af4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d1f1      	bne.n	8002ae0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8002afc:	4b12      	ldr	r3, [pc, #72]	; (8002b48 <xTaskResumeAll+0x130>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002b02:	4b10      	ldr	r3, [pc, #64]	; (8002b44 <xTaskResumeAll+0x12c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d009      	beq.n	8002b1e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002b0e:	4b0f      	ldr	r3, [pc, #60]	; (8002b4c <xTaskResumeAll+0x134>)
 8002b10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	f3bf 8f4f 	dsb	sy
 8002b1a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002b1e:	f001 f8bb 	bl	8003c98 <vPortExitCritical>

	return xAlreadyYielded;
 8002b22:	68bb      	ldr	r3, [r7, #8]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3710      	adds	r7, #16
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	20000be4 	.word	0x20000be4
 8002b30:	20000bbc 	.word	0x20000bbc
 8002b34:	20000b7c 	.word	0x20000b7c
 8002b38:	20000bc4 	.word	0x20000bc4
 8002b3c:	200006ec 	.word	0x200006ec
 8002b40:	200006e8 	.word	0x200006e8
 8002b44:	20000bd0 	.word	0x20000bd0
 8002b48:	20000bcc 	.word	0x20000bcc
 8002b4c:	e000ed04 	.word	0xe000ed04

08002b50 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002b56:	4b05      	ldr	r3, [pc, #20]	; (8002b6c <xTaskGetTickCount+0x1c>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002b5c:	687b      	ldr	r3, [r7, #4]
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	20000bc0 	.word	0x20000bc0

08002b70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002b76:	2300      	movs	r3, #0
 8002b78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b7a:	4b4e      	ldr	r3, [pc, #312]	; (8002cb4 <xTaskIncrementTick+0x144>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f040 8088 	bne.w	8002c94 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002b84:	4b4c      	ldr	r3, [pc, #304]	; (8002cb8 <xTaskIncrementTick+0x148>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002b8c:	4a4a      	ldr	r2, [pc, #296]	; (8002cb8 <xTaskIncrementTick+0x148>)
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d11f      	bne.n	8002bd8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002b98:	4b48      	ldr	r3, [pc, #288]	; (8002cbc <xTaskIncrementTick+0x14c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d009      	beq.n	8002bb6 <xTaskIncrementTick+0x46>
 8002ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba6:	f383 8811 	msr	BASEPRI, r3
 8002baa:	f3bf 8f6f 	isb	sy
 8002bae:	f3bf 8f4f 	dsb	sy
 8002bb2:	603b      	str	r3, [r7, #0]
 8002bb4:	e7fe      	b.n	8002bb4 <xTaskIncrementTick+0x44>
 8002bb6:	4b41      	ldr	r3, [pc, #260]	; (8002cbc <xTaskIncrementTick+0x14c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	4b40      	ldr	r3, [pc, #256]	; (8002cc0 <xTaskIncrementTick+0x150>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a3e      	ldr	r2, [pc, #248]	; (8002cbc <xTaskIncrementTick+0x14c>)
 8002bc2:	6013      	str	r3, [r2, #0]
 8002bc4:	4a3e      	ldr	r2, [pc, #248]	; (8002cc0 <xTaskIncrementTick+0x150>)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6013      	str	r3, [r2, #0]
 8002bca:	4b3e      	ldr	r3, [pc, #248]	; (8002cc4 <xTaskIncrementTick+0x154>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	4a3c      	ldr	r2, [pc, #240]	; (8002cc4 <xTaskIncrementTick+0x154>)
 8002bd2:	6013      	str	r3, [r2, #0]
 8002bd4:	f000 fac4 	bl	8003160 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002bd8:	4b3b      	ldr	r3, [pc, #236]	; (8002cc8 <xTaskIncrementTick+0x158>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d349      	bcc.n	8002c76 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002be2:	4b36      	ldr	r3, [pc, #216]	; (8002cbc <xTaskIncrementTick+0x14c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d104      	bne.n	8002bf6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002bec:	4b36      	ldr	r3, [pc, #216]	; (8002cc8 <xTaskIncrementTick+0x158>)
 8002bee:	f04f 32ff 	mov.w	r2, #4294967295
 8002bf2:	601a      	str	r2, [r3, #0]
					break;
 8002bf4:	e03f      	b.n	8002c76 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bf6:	4b31      	ldr	r3, [pc, #196]	; (8002cbc <xTaskIncrementTick+0x14c>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d203      	bcs.n	8002c16 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002c0e:	4a2e      	ldr	r2, [pc, #184]	; (8002cc8 <xTaskIncrementTick+0x158>)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002c14:	e02f      	b.n	8002c76 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	3304      	adds	r3, #4
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7fe ff5c 	bl	8001ad8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d004      	beq.n	8002c32 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	3318      	adds	r3, #24
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7fe ff53 	bl	8001ad8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c36:	4b25      	ldr	r3, [pc, #148]	; (8002ccc <xTaskIncrementTick+0x15c>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d903      	bls.n	8002c46 <xTaskIncrementTick+0xd6>
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c42:	4a22      	ldr	r2, [pc, #136]	; (8002ccc <xTaskIncrementTick+0x15c>)
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4413      	add	r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	4a1f      	ldr	r2, [pc, #124]	; (8002cd0 <xTaskIncrementTick+0x160>)
 8002c54:	441a      	add	r2, r3
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	3304      	adds	r3, #4
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	4610      	mov	r0, r2
 8002c5e:	f7fe fede 	bl	8001a1e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c66:	4b1b      	ldr	r3, [pc, #108]	; (8002cd4 <xTaskIncrementTick+0x164>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d3b8      	bcc.n	8002be2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8002c70:	2301      	movs	r3, #1
 8002c72:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c74:	e7b5      	b.n	8002be2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002c76:	4b17      	ldr	r3, [pc, #92]	; (8002cd4 <xTaskIncrementTick+0x164>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c7c:	4914      	ldr	r1, [pc, #80]	; (8002cd0 <xTaskIncrementTick+0x160>)
 8002c7e:	4613      	mov	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4413      	add	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	440b      	add	r3, r1
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d907      	bls.n	8002c9e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	617b      	str	r3, [r7, #20]
 8002c92:	e004      	b.n	8002c9e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002c94:	4b10      	ldr	r3, [pc, #64]	; (8002cd8 <xTaskIncrementTick+0x168>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	4a0f      	ldr	r2, [pc, #60]	; (8002cd8 <xTaskIncrementTick+0x168>)
 8002c9c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002c9e:	4b0f      	ldr	r3, [pc, #60]	; (8002cdc <xTaskIncrementTick+0x16c>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002caa:	697b      	ldr	r3, [r7, #20]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3718      	adds	r7, #24
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	20000be4 	.word	0x20000be4
 8002cb8:	20000bc0 	.word	0x20000bc0
 8002cbc:	20000b74 	.word	0x20000b74
 8002cc0:	20000b78 	.word	0x20000b78
 8002cc4:	20000bd4 	.word	0x20000bd4
 8002cc8:	20000bdc 	.word	0x20000bdc
 8002ccc:	20000bc4 	.word	0x20000bc4
 8002cd0:	200006ec 	.word	0x200006ec
 8002cd4:	200006e8 	.word	0x200006e8
 8002cd8:	20000bcc 	.word	0x20000bcc
 8002cdc:	20000bd0 	.word	0x20000bd0

08002ce0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002ce6:	4b27      	ldr	r3, [pc, #156]	; (8002d84 <vTaskSwitchContext+0xa4>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d003      	beq.n	8002cf6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002cee:	4b26      	ldr	r3, [pc, #152]	; (8002d88 <vTaskSwitchContext+0xa8>)
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002cf4:	e040      	b.n	8002d78 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8002cf6:	4b24      	ldr	r3, [pc, #144]	; (8002d88 <vTaskSwitchContext+0xa8>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cfc:	4b23      	ldr	r3, [pc, #140]	; (8002d8c <vTaskSwitchContext+0xac>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	60fb      	str	r3, [r7, #12]
 8002d02:	e00f      	b.n	8002d24 <vTaskSwitchContext+0x44>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d109      	bne.n	8002d1e <vTaskSwitchContext+0x3e>
 8002d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d0e:	f383 8811 	msr	BASEPRI, r3
 8002d12:	f3bf 8f6f 	isb	sy
 8002d16:	f3bf 8f4f 	dsb	sy
 8002d1a:	607b      	str	r3, [r7, #4]
 8002d1c:	e7fe      	b.n	8002d1c <vTaskSwitchContext+0x3c>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	3b01      	subs	r3, #1
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	491a      	ldr	r1, [pc, #104]	; (8002d90 <vTaskSwitchContext+0xb0>)
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4413      	add	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	440b      	add	r3, r1
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d0e5      	beq.n	8002d04 <vTaskSwitchContext+0x24>
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	4413      	add	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	4a13      	ldr	r2, [pc, #76]	; (8002d90 <vTaskSwitchContext+0xb0>)
 8002d44:	4413      	add	r3, r2
 8002d46:	60bb      	str	r3, [r7, #8]
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	605a      	str	r2, [r3, #4]
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	685a      	ldr	r2, [r3, #4]
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	3308      	adds	r3, #8
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d104      	bne.n	8002d68 <vTaskSwitchContext+0x88>
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	685a      	ldr	r2, [r3, #4]
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	605a      	str	r2, [r3, #4]
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	4a09      	ldr	r2, [pc, #36]	; (8002d94 <vTaskSwitchContext+0xb4>)
 8002d70:	6013      	str	r3, [r2, #0]
 8002d72:	4a06      	ldr	r2, [pc, #24]	; (8002d8c <vTaskSwitchContext+0xac>)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6013      	str	r3, [r2, #0]
}
 8002d78:	bf00      	nop
 8002d7a:	3714      	adds	r7, #20
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr
 8002d84:	20000be4 	.word	0x20000be4
 8002d88:	20000bd0 	.word	0x20000bd0
 8002d8c:	20000bc4 	.word	0x20000bc4
 8002d90:	200006ec 	.word	0x200006ec
 8002d94:	200006e8 	.word	0x200006e8

08002d98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d109      	bne.n	8002dbc <vTaskPlaceOnEventList+0x24>
 8002da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dac:	f383 8811 	msr	BASEPRI, r3
 8002db0:	f3bf 8f6f 	isb	sy
 8002db4:	f3bf 8f4f 	dsb	sy
 8002db8:	60fb      	str	r3, [r7, #12]
 8002dba:	e7fe      	b.n	8002dba <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002dbc:	4b07      	ldr	r3, [pc, #28]	; (8002ddc <vTaskPlaceOnEventList+0x44>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	3318      	adds	r3, #24
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f7fe fe4e 	bl	8001a66 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002dca:	2101      	movs	r1, #1
 8002dcc:	6838      	ldr	r0, [r7, #0]
 8002dce:	f000 fa71 	bl	80032b4 <prvAddCurrentTaskToDelayedList>
}
 8002dd2:	bf00      	nop
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	200006e8 	.word	0x200006e8

08002de0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d109      	bne.n	8002e06 <vTaskPlaceOnEventListRestricted+0x26>
 8002df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002df6:	f383 8811 	msr	BASEPRI, r3
 8002dfa:	f3bf 8f6f 	isb	sy
 8002dfe:	f3bf 8f4f 	dsb	sy
 8002e02:	617b      	str	r3, [r7, #20]
 8002e04:	e7fe      	b.n	8002e04 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002e06:	4b0a      	ldr	r3, [pc, #40]	; (8002e30 <vTaskPlaceOnEventListRestricted+0x50>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	3318      	adds	r3, #24
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f7fe fe05 	bl	8001a1e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d002      	beq.n	8002e20 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8002e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e1e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	68b8      	ldr	r0, [r7, #8]
 8002e24:	f000 fa46 	bl	80032b4 <prvAddCurrentTaskToDelayedList>
	}
 8002e28:	bf00      	nop
 8002e2a:	3718      	adds	r7, #24
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	200006e8 	.word	0x200006e8

08002e34 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d109      	bne.n	8002e5e <xTaskRemoveFromEventList+0x2a>
 8002e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e4e:	f383 8811 	msr	BASEPRI, r3
 8002e52:	f3bf 8f6f 	isb	sy
 8002e56:	f3bf 8f4f 	dsb	sy
 8002e5a:	60fb      	str	r3, [r7, #12]
 8002e5c:	e7fe      	b.n	8002e5c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	3318      	adds	r3, #24
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7fe fe38 	bl	8001ad8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e68:	4b1d      	ldr	r3, [pc, #116]	; (8002ee0 <xTaskRemoveFromEventList+0xac>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d11d      	bne.n	8002eac <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	3304      	adds	r3, #4
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7fe fe2f 	bl	8001ad8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e7e:	4b19      	ldr	r3, [pc, #100]	; (8002ee4 <xTaskRemoveFromEventList+0xb0>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d903      	bls.n	8002e8e <xTaskRemoveFromEventList+0x5a>
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8a:	4a16      	ldr	r2, [pc, #88]	; (8002ee4 <xTaskRemoveFromEventList+0xb0>)
 8002e8c:	6013      	str	r3, [r2, #0]
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e92:	4613      	mov	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	4413      	add	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	4a13      	ldr	r2, [pc, #76]	; (8002ee8 <xTaskRemoveFromEventList+0xb4>)
 8002e9c:	441a      	add	r2, r3
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	3304      	adds	r3, #4
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	4610      	mov	r0, r2
 8002ea6:	f7fe fdba 	bl	8001a1e <vListInsertEnd>
 8002eaa:	e005      	b.n	8002eb8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	3318      	adds	r3, #24
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	480e      	ldr	r0, [pc, #56]	; (8002eec <xTaskRemoveFromEventList+0xb8>)
 8002eb4:	f7fe fdb3 	bl	8001a1e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ebc:	4b0c      	ldr	r3, [pc, #48]	; (8002ef0 <xTaskRemoveFromEventList+0xbc>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d905      	bls.n	8002ed2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002eca:	4b0a      	ldr	r3, [pc, #40]	; (8002ef4 <xTaskRemoveFromEventList+0xc0>)
 8002ecc:	2201      	movs	r2, #1
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	e001      	b.n	8002ed6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002ed6:	697b      	ldr	r3, [r7, #20]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3718      	adds	r7, #24
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	20000be4 	.word	0x20000be4
 8002ee4:	20000bc4 	.word	0x20000bc4
 8002ee8:	200006ec 	.word	0x200006ec
 8002eec:	20000b7c 	.word	0x20000b7c
 8002ef0:	200006e8 	.word	0x200006e8
 8002ef4:	20000bd0 	.word	0x20000bd0

08002ef8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002f00:	4b06      	ldr	r3, [pc, #24]	; (8002f1c <vTaskInternalSetTimeOutState+0x24>)
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002f08:	4b05      	ldr	r3, [pc, #20]	; (8002f20 <vTaskInternalSetTimeOutState+0x28>)
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	605a      	str	r2, [r3, #4]
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	20000bd4 	.word	0x20000bd4
 8002f20:	20000bc0 	.word	0x20000bc0

08002f24 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b088      	sub	sp, #32
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d109      	bne.n	8002f48 <xTaskCheckForTimeOut+0x24>
 8002f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f38:	f383 8811 	msr	BASEPRI, r3
 8002f3c:	f3bf 8f6f 	isb	sy
 8002f40:	f3bf 8f4f 	dsb	sy
 8002f44:	613b      	str	r3, [r7, #16]
 8002f46:	e7fe      	b.n	8002f46 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d109      	bne.n	8002f62 <xTaskCheckForTimeOut+0x3e>
 8002f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f52:	f383 8811 	msr	BASEPRI, r3
 8002f56:	f3bf 8f6f 	isb	sy
 8002f5a:	f3bf 8f4f 	dsb	sy
 8002f5e:	60fb      	str	r3, [r7, #12]
 8002f60:	e7fe      	b.n	8002f60 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8002f62:	f000 fe6b 	bl	8003c3c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002f66:	4b1d      	ldr	r3, [pc, #116]	; (8002fdc <xTaskCheckForTimeOut+0xb8>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7e:	d102      	bne.n	8002f86 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002f80:	2300      	movs	r3, #0
 8002f82:	61fb      	str	r3, [r7, #28]
 8002f84:	e023      	b.n	8002fce <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	4b15      	ldr	r3, [pc, #84]	; (8002fe0 <xTaskCheckForTimeOut+0xbc>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d007      	beq.n	8002fa2 <xTaskCheckForTimeOut+0x7e>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d302      	bcc.n	8002fa2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	61fb      	str	r3, [r7, #28]
 8002fa0:	e015      	b.n	8002fce <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d20b      	bcs.n	8002fc4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	1ad2      	subs	r2, r2, r3
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f7ff ff9d 	bl	8002ef8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	61fb      	str	r3, [r7, #28]
 8002fc2:	e004      	b.n	8002fce <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002fce:	f000 fe63 	bl	8003c98 <vPortExitCritical>

	return xReturn;
 8002fd2:	69fb      	ldr	r3, [r7, #28]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3720      	adds	r7, #32
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	20000bc0 	.word	0x20000bc0
 8002fe0:	20000bd4 	.word	0x20000bd4

08002fe4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002fe8:	4b03      	ldr	r3, [pc, #12]	; (8002ff8 <vTaskMissedYield+0x14>)
 8002fea:	2201      	movs	r2, #1
 8002fec:	601a      	str	r2, [r3, #0]
}
 8002fee:	bf00      	nop
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	20000bd0 	.word	0x20000bd0

08002ffc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003004:	f000 f852 	bl	80030ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003008:	4b06      	ldr	r3, [pc, #24]	; (8003024 <prvIdleTask+0x28>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d9f9      	bls.n	8003004 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003010:	4b05      	ldr	r3, [pc, #20]	; (8003028 <prvIdleTask+0x2c>)
 8003012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	f3bf 8f4f 	dsb	sy
 800301c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003020:	e7f0      	b.n	8003004 <prvIdleTask+0x8>
 8003022:	bf00      	nop
 8003024:	200006ec 	.word	0x200006ec
 8003028:	e000ed04 	.word	0xe000ed04

0800302c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003032:	2300      	movs	r3, #0
 8003034:	607b      	str	r3, [r7, #4]
 8003036:	e00c      	b.n	8003052 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	4613      	mov	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	4413      	add	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	4a12      	ldr	r2, [pc, #72]	; (800308c <prvInitialiseTaskLists+0x60>)
 8003044:	4413      	add	r3, r2
 8003046:	4618      	mov	r0, r3
 8003048:	f7fe fcbc 	bl	80019c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	3301      	adds	r3, #1
 8003050:	607b      	str	r3, [r7, #4]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2b37      	cmp	r3, #55	; 0x37
 8003056:	d9ef      	bls.n	8003038 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003058:	480d      	ldr	r0, [pc, #52]	; (8003090 <prvInitialiseTaskLists+0x64>)
 800305a:	f7fe fcb3 	bl	80019c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800305e:	480d      	ldr	r0, [pc, #52]	; (8003094 <prvInitialiseTaskLists+0x68>)
 8003060:	f7fe fcb0 	bl	80019c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003064:	480c      	ldr	r0, [pc, #48]	; (8003098 <prvInitialiseTaskLists+0x6c>)
 8003066:	f7fe fcad 	bl	80019c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800306a:	480c      	ldr	r0, [pc, #48]	; (800309c <prvInitialiseTaskLists+0x70>)
 800306c:	f7fe fcaa 	bl	80019c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003070:	480b      	ldr	r0, [pc, #44]	; (80030a0 <prvInitialiseTaskLists+0x74>)
 8003072:	f7fe fca7 	bl	80019c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003076:	4b0b      	ldr	r3, [pc, #44]	; (80030a4 <prvInitialiseTaskLists+0x78>)
 8003078:	4a05      	ldr	r2, [pc, #20]	; (8003090 <prvInitialiseTaskLists+0x64>)
 800307a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800307c:	4b0a      	ldr	r3, [pc, #40]	; (80030a8 <prvInitialiseTaskLists+0x7c>)
 800307e:	4a05      	ldr	r2, [pc, #20]	; (8003094 <prvInitialiseTaskLists+0x68>)
 8003080:	601a      	str	r2, [r3, #0]
}
 8003082:	bf00      	nop
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	200006ec 	.word	0x200006ec
 8003090:	20000b4c 	.word	0x20000b4c
 8003094:	20000b60 	.word	0x20000b60
 8003098:	20000b7c 	.word	0x20000b7c
 800309c:	20000b90 	.word	0x20000b90
 80030a0:	20000ba8 	.word	0x20000ba8
 80030a4:	20000b74 	.word	0x20000b74
 80030a8:	20000b78 	.word	0x20000b78

080030ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80030b2:	e019      	b.n	80030e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80030b4:	f000 fdc2 	bl	8003c3c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030b8:	4b0f      	ldr	r3, [pc, #60]	; (80030f8 <prvCheckTasksWaitingTermination+0x4c>)
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	3304      	adds	r3, #4
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7fe fd07 	bl	8001ad8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80030ca:	4b0c      	ldr	r3, [pc, #48]	; (80030fc <prvCheckTasksWaitingTermination+0x50>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	3b01      	subs	r3, #1
 80030d0:	4a0a      	ldr	r2, [pc, #40]	; (80030fc <prvCheckTasksWaitingTermination+0x50>)
 80030d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80030d4:	4b0a      	ldr	r3, [pc, #40]	; (8003100 <prvCheckTasksWaitingTermination+0x54>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	3b01      	subs	r3, #1
 80030da:	4a09      	ldr	r2, [pc, #36]	; (8003100 <prvCheckTasksWaitingTermination+0x54>)
 80030dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80030de:	f000 fddb 	bl	8003c98 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 f80e 	bl	8003104 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80030e8:	4b05      	ldr	r3, [pc, #20]	; (8003100 <prvCheckTasksWaitingTermination+0x54>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1e1      	bne.n	80030b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80030f0:	bf00      	nop
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	20000b90 	.word	0x20000b90
 80030fc:	20000bbc 	.word	0x20000bbc
 8003100:	20000ba4 	.word	0x20000ba4

08003104 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003112:	2b00      	cmp	r3, #0
 8003114:	d108      	bne.n	8003128 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311a:	4618      	mov	r0, r3
 800311c:	f000 ff6a 	bl	8003ff4 <vPortFree>
				vPortFree( pxTCB );
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 ff67 	bl	8003ff4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003126:	e017      	b.n	8003158 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800312e:	2b01      	cmp	r3, #1
 8003130:	d103      	bne.n	800313a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 ff5e 	bl	8003ff4 <vPortFree>
	}
 8003138:	e00e      	b.n	8003158 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003140:	2b02      	cmp	r3, #2
 8003142:	d009      	beq.n	8003158 <prvDeleteTCB+0x54>
 8003144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003148:	f383 8811 	msr	BASEPRI, r3
 800314c:	f3bf 8f6f 	isb	sy
 8003150:	f3bf 8f4f 	dsb	sy
 8003154:	60fb      	str	r3, [r7, #12]
 8003156:	e7fe      	b.n	8003156 <prvDeleteTCB+0x52>
	}
 8003158:	bf00      	nop
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003166:	4b0c      	ldr	r3, [pc, #48]	; (8003198 <prvResetNextTaskUnblockTime+0x38>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d104      	bne.n	800317a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003170:	4b0a      	ldr	r3, [pc, #40]	; (800319c <prvResetNextTaskUnblockTime+0x3c>)
 8003172:	f04f 32ff 	mov.w	r2, #4294967295
 8003176:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003178:	e008      	b.n	800318c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800317a:	4b07      	ldr	r3, [pc, #28]	; (8003198 <prvResetNextTaskUnblockTime+0x38>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	4a04      	ldr	r2, [pc, #16]	; (800319c <prvResetNextTaskUnblockTime+0x3c>)
 800318a:	6013      	str	r3, [r2, #0]
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr
 8003198:	20000b74 	.word	0x20000b74
 800319c:	20000bdc 	.word	0x20000bdc

080031a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80031a6:	4b0b      	ldr	r3, [pc, #44]	; (80031d4 <xTaskGetSchedulerState+0x34>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d102      	bne.n	80031b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80031ae:	2301      	movs	r3, #1
 80031b0:	607b      	str	r3, [r7, #4]
 80031b2:	e008      	b.n	80031c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031b4:	4b08      	ldr	r3, [pc, #32]	; (80031d8 <xTaskGetSchedulerState+0x38>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d102      	bne.n	80031c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80031bc:	2302      	movs	r3, #2
 80031be:	607b      	str	r3, [r7, #4]
 80031c0:	e001      	b.n	80031c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80031c2:	2300      	movs	r3, #0
 80031c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80031c6:	687b      	ldr	r3, [r7, #4]
	}
 80031c8:	4618      	mov	r0, r3
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr
 80031d4:	20000bc8 	.word	0x20000bc8
 80031d8:	20000be4 	.word	0x20000be4

080031dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80031e8:	2300      	movs	r3, #0
 80031ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d054      	beq.n	800329c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80031f2:	4b2d      	ldr	r3, [pc, #180]	; (80032a8 <xTaskPriorityDisinherit+0xcc>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d009      	beq.n	8003210 <xTaskPriorityDisinherit+0x34>
 80031fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003200:	f383 8811 	msr	BASEPRI, r3
 8003204:	f3bf 8f6f 	isb	sy
 8003208:	f3bf 8f4f 	dsb	sy
 800320c:	60fb      	str	r3, [r7, #12]
 800320e:	e7fe      	b.n	800320e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003214:	2b00      	cmp	r3, #0
 8003216:	d109      	bne.n	800322c <xTaskPriorityDisinherit+0x50>
 8003218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800321c:	f383 8811 	msr	BASEPRI, r3
 8003220:	f3bf 8f6f 	isb	sy
 8003224:	f3bf 8f4f 	dsb	sy
 8003228:	60bb      	str	r3, [r7, #8]
 800322a:	e7fe      	b.n	800322a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003230:	1e5a      	subs	r2, r3, #1
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800323e:	429a      	cmp	r2, r3
 8003240:	d02c      	beq.n	800329c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003246:	2b00      	cmp	r3, #0
 8003248:	d128      	bne.n	800329c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	3304      	adds	r3, #4
 800324e:	4618      	mov	r0, r3
 8003250:	f7fe fc42 	bl	8001ad8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003260:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800326c:	4b0f      	ldr	r3, [pc, #60]	; (80032ac <xTaskPriorityDisinherit+0xd0>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	429a      	cmp	r2, r3
 8003272:	d903      	bls.n	800327c <xTaskPriorityDisinherit+0xa0>
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003278:	4a0c      	ldr	r2, [pc, #48]	; (80032ac <xTaskPriorityDisinherit+0xd0>)
 800327a:	6013      	str	r3, [r2, #0]
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003280:	4613      	mov	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	4413      	add	r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4a09      	ldr	r2, [pc, #36]	; (80032b0 <xTaskPriorityDisinherit+0xd4>)
 800328a:	441a      	add	r2, r3
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	3304      	adds	r3, #4
 8003290:	4619      	mov	r1, r3
 8003292:	4610      	mov	r0, r2
 8003294:	f7fe fbc3 	bl	8001a1e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003298:	2301      	movs	r3, #1
 800329a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800329c:	697b      	ldr	r3, [r7, #20]
	}
 800329e:	4618      	mov	r0, r3
 80032a0:	3718      	adds	r7, #24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	200006e8 	.word	0x200006e8
 80032ac:	20000bc4 	.word	0x20000bc4
 80032b0:	200006ec 	.word	0x200006ec

080032b4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80032be:	4b21      	ldr	r3, [pc, #132]	; (8003344 <prvAddCurrentTaskToDelayedList+0x90>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80032c4:	4b20      	ldr	r3, [pc, #128]	; (8003348 <prvAddCurrentTaskToDelayedList+0x94>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	3304      	adds	r3, #4
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7fe fc04 	bl	8001ad8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d6:	d10a      	bne.n	80032ee <prvAddCurrentTaskToDelayedList+0x3a>
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d007      	beq.n	80032ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80032de:	4b1a      	ldr	r3, [pc, #104]	; (8003348 <prvAddCurrentTaskToDelayedList+0x94>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	3304      	adds	r3, #4
 80032e4:	4619      	mov	r1, r3
 80032e6:	4819      	ldr	r0, [pc, #100]	; (800334c <prvAddCurrentTaskToDelayedList+0x98>)
 80032e8:	f7fe fb99 	bl	8001a1e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80032ec:	e026      	b.n	800333c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4413      	add	r3, r2
 80032f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80032f6:	4b14      	ldr	r3, [pc, #80]	; (8003348 <prvAddCurrentTaskToDelayedList+0x94>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68ba      	ldr	r2, [r7, #8]
 80032fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80032fe:	68ba      	ldr	r2, [r7, #8]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	429a      	cmp	r2, r3
 8003304:	d209      	bcs.n	800331a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003306:	4b12      	ldr	r3, [pc, #72]	; (8003350 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	4b0f      	ldr	r3, [pc, #60]	; (8003348 <prvAddCurrentTaskToDelayedList+0x94>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	3304      	adds	r3, #4
 8003310:	4619      	mov	r1, r3
 8003312:	4610      	mov	r0, r2
 8003314:	f7fe fba7 	bl	8001a66 <vListInsert>
}
 8003318:	e010      	b.n	800333c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800331a:	4b0e      	ldr	r3, [pc, #56]	; (8003354 <prvAddCurrentTaskToDelayedList+0xa0>)
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	4b0a      	ldr	r3, [pc, #40]	; (8003348 <prvAddCurrentTaskToDelayedList+0x94>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	3304      	adds	r3, #4
 8003324:	4619      	mov	r1, r3
 8003326:	4610      	mov	r0, r2
 8003328:	f7fe fb9d 	bl	8001a66 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800332c:	4b0a      	ldr	r3, [pc, #40]	; (8003358 <prvAddCurrentTaskToDelayedList+0xa4>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68ba      	ldr	r2, [r7, #8]
 8003332:	429a      	cmp	r2, r3
 8003334:	d202      	bcs.n	800333c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003336:	4a08      	ldr	r2, [pc, #32]	; (8003358 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	6013      	str	r3, [r2, #0]
}
 800333c:	bf00      	nop
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	20000bc0 	.word	0x20000bc0
 8003348:	200006e8 	.word	0x200006e8
 800334c:	20000ba8 	.word	0x20000ba8
 8003350:	20000b78 	.word	0x20000b78
 8003354:	20000b74 	.word	0x20000b74
 8003358:	20000bdc 	.word	0x20000bdc

0800335c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b08a      	sub	sp, #40	; 0x28
 8003360:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003362:	2300      	movs	r3, #0
 8003364:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003366:	f000 faff 	bl	8003968 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800336a:	4b1c      	ldr	r3, [pc, #112]	; (80033dc <xTimerCreateTimerTask+0x80>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d021      	beq.n	80033b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003372:	2300      	movs	r3, #0
 8003374:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003376:	2300      	movs	r3, #0
 8003378:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800337a:	1d3a      	adds	r2, r7, #4
 800337c:	f107 0108 	add.w	r1, r7, #8
 8003380:	f107 030c 	add.w	r3, r7, #12
 8003384:	4618      	mov	r0, r3
 8003386:	f7fe fb03 	bl	8001990 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800338a:	6879      	ldr	r1, [r7, #4]
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	9202      	str	r2, [sp, #8]
 8003392:	9301      	str	r3, [sp, #4]
 8003394:	2302      	movs	r3, #2
 8003396:	9300      	str	r3, [sp, #0]
 8003398:	2300      	movs	r3, #0
 800339a:	460a      	mov	r2, r1
 800339c:	4910      	ldr	r1, [pc, #64]	; (80033e0 <xTimerCreateTimerTask+0x84>)
 800339e:	4811      	ldr	r0, [pc, #68]	; (80033e4 <xTimerCreateTimerTask+0x88>)
 80033a0:	f7ff f8f6 	bl	8002590 <xTaskCreateStatic>
 80033a4:	4602      	mov	r2, r0
 80033a6:	4b10      	ldr	r3, [pc, #64]	; (80033e8 <xTimerCreateTimerTask+0x8c>)
 80033a8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80033aa:	4b0f      	ldr	r3, [pc, #60]	; (80033e8 <xTimerCreateTimerTask+0x8c>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80033b2:	2301      	movs	r3, #1
 80033b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d109      	bne.n	80033d0 <xTimerCreateTimerTask+0x74>
 80033bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c0:	f383 8811 	msr	BASEPRI, r3
 80033c4:	f3bf 8f6f 	isb	sy
 80033c8:	f3bf 8f4f 	dsb	sy
 80033cc:	613b      	str	r3, [r7, #16]
 80033ce:	e7fe      	b.n	80033ce <xTimerCreateTimerTask+0x72>
	return xReturn;
 80033d0:	697b      	ldr	r3, [r7, #20]
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3718      	adds	r7, #24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	20000c18 	.word	0x20000c18
 80033e0:	080042c4 	.word	0x080042c4
 80033e4:	0800351d 	.word	0x0800351d
 80033e8:	20000c1c 	.word	0x20000c1c

080033ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b08a      	sub	sp, #40	; 0x28
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
 80033f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80033fa:	2300      	movs	r3, #0
 80033fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d109      	bne.n	8003418 <xTimerGenericCommand+0x2c>
 8003404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003408:	f383 8811 	msr	BASEPRI, r3
 800340c:	f3bf 8f6f 	isb	sy
 8003410:	f3bf 8f4f 	dsb	sy
 8003414:	623b      	str	r3, [r7, #32]
 8003416:	e7fe      	b.n	8003416 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003418:	4b19      	ldr	r3, [pc, #100]	; (8003480 <xTimerGenericCommand+0x94>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d02a      	beq.n	8003476 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	2b05      	cmp	r3, #5
 8003430:	dc18      	bgt.n	8003464 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003432:	f7ff feb5 	bl	80031a0 <xTaskGetSchedulerState>
 8003436:	4603      	mov	r3, r0
 8003438:	2b02      	cmp	r3, #2
 800343a:	d109      	bne.n	8003450 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800343c:	4b10      	ldr	r3, [pc, #64]	; (8003480 <xTimerGenericCommand+0x94>)
 800343e:	6818      	ldr	r0, [r3, #0]
 8003440:	f107 0110 	add.w	r1, r7, #16
 8003444:	2300      	movs	r3, #0
 8003446:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003448:	f7fe fcae 	bl	8001da8 <xQueueGenericSend>
 800344c:	6278      	str	r0, [r7, #36]	; 0x24
 800344e:	e012      	b.n	8003476 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003450:	4b0b      	ldr	r3, [pc, #44]	; (8003480 <xTimerGenericCommand+0x94>)
 8003452:	6818      	ldr	r0, [r3, #0]
 8003454:	f107 0110 	add.w	r1, r7, #16
 8003458:	2300      	movs	r3, #0
 800345a:	2200      	movs	r2, #0
 800345c:	f7fe fca4 	bl	8001da8 <xQueueGenericSend>
 8003460:	6278      	str	r0, [r7, #36]	; 0x24
 8003462:	e008      	b.n	8003476 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003464:	4b06      	ldr	r3, [pc, #24]	; (8003480 <xTimerGenericCommand+0x94>)
 8003466:	6818      	ldr	r0, [r3, #0]
 8003468:	f107 0110 	add.w	r1, r7, #16
 800346c:	2300      	movs	r3, #0
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	f7fe fd94 	bl	8001f9c <xQueueGenericSendFromISR>
 8003474:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003478:	4618      	mov	r0, r3
 800347a:	3728      	adds	r7, #40	; 0x28
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	20000c18 	.word	0x20000c18

08003484 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b088      	sub	sp, #32
 8003488:	af02      	add	r7, sp, #8
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800348e:	4b22      	ldr	r3, [pc, #136]	; (8003518 <prvProcessExpiredTimer+0x94>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	3304      	adds	r3, #4
 800349c:	4618      	mov	r0, r3
 800349e:	f7fe fb1b 	bl	8001ad8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80034a8:	f003 0304 	and.w	r3, r3, #4
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d021      	beq.n	80034f4 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	699a      	ldr	r2, [r3, #24]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	18d1      	adds	r1, r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	683a      	ldr	r2, [r7, #0]
 80034bc:	6978      	ldr	r0, [r7, #20]
 80034be:	f000 f8d1 	bl	8003664 <prvInsertTimerInActiveList>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d01e      	beq.n	8003506 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80034c8:	2300      	movs	r3, #0
 80034ca:	9300      	str	r3, [sp, #0]
 80034cc:	2300      	movs	r3, #0
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	2100      	movs	r1, #0
 80034d2:	6978      	ldr	r0, [r7, #20]
 80034d4:	f7ff ff8a 	bl	80033ec <xTimerGenericCommand>
 80034d8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d112      	bne.n	8003506 <prvProcessExpiredTimer+0x82>
 80034e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e4:	f383 8811 	msr	BASEPRI, r3
 80034e8:	f3bf 8f6f 	isb	sy
 80034ec:	f3bf 8f4f 	dsb	sy
 80034f0:	60fb      	str	r3, [r7, #12]
 80034f2:	e7fe      	b.n	80034f2 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80034fa:	f023 0301 	bic.w	r3, r3, #1
 80034fe:	b2da      	uxtb	r2, r3
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	6a1b      	ldr	r3, [r3, #32]
 800350a:	6978      	ldr	r0, [r7, #20]
 800350c:	4798      	blx	r3
}
 800350e:	bf00      	nop
 8003510:	3718      	adds	r7, #24
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	20000c10 	.word	0x20000c10

0800351c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003524:	f107 0308 	add.w	r3, r7, #8
 8003528:	4618      	mov	r0, r3
 800352a:	f000 f857 	bl	80035dc <prvGetNextExpireTime>
 800352e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	4619      	mov	r1, r3
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	f000 f803 	bl	8003540 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800353a:	f000 f8d5 	bl	80036e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800353e:	e7f1      	b.n	8003524 <prvTimerTask+0x8>

08003540 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800354a:	f7ff fa57 	bl	80029fc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800354e:	f107 0308 	add.w	r3, r7, #8
 8003552:	4618      	mov	r0, r3
 8003554:	f000 f866 	bl	8003624 <prvSampleTimeNow>
 8003558:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d130      	bne.n	80035c2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d10a      	bne.n	800357c <prvProcessTimerOrBlockTask+0x3c>
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	429a      	cmp	r2, r3
 800356c:	d806      	bhi.n	800357c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800356e:	f7ff fa53 	bl	8002a18 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003572:	68f9      	ldr	r1, [r7, #12]
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f7ff ff85 	bl	8003484 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800357a:	e024      	b.n	80035c6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d008      	beq.n	8003594 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003582:	4b13      	ldr	r3, [pc, #76]	; (80035d0 <prvProcessTimerOrBlockTask+0x90>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d101      	bne.n	8003590 <prvProcessTimerOrBlockTask+0x50>
 800358c:	2301      	movs	r3, #1
 800358e:	e000      	b.n	8003592 <prvProcessTimerOrBlockTask+0x52>
 8003590:	2300      	movs	r3, #0
 8003592:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003594:	4b0f      	ldr	r3, [pc, #60]	; (80035d4 <prvProcessTimerOrBlockTask+0x94>)
 8003596:	6818      	ldr	r0, [r3, #0]
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	4619      	mov	r1, r3
 80035a2:	f7fe ffc1 	bl	8002528 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80035a6:	f7ff fa37 	bl	8002a18 <xTaskResumeAll>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d10a      	bne.n	80035c6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80035b0:	4b09      	ldr	r3, [pc, #36]	; (80035d8 <prvProcessTimerOrBlockTask+0x98>)
 80035b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035b6:	601a      	str	r2, [r3, #0]
 80035b8:	f3bf 8f4f 	dsb	sy
 80035bc:	f3bf 8f6f 	isb	sy
}
 80035c0:	e001      	b.n	80035c6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80035c2:	f7ff fa29 	bl	8002a18 <xTaskResumeAll>
}
 80035c6:	bf00      	nop
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	20000c14 	.word	0x20000c14
 80035d4:	20000c18 	.word	0x20000c18
 80035d8:	e000ed04 	.word	0xe000ed04

080035dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80035dc:	b480      	push	{r7}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80035e4:	4b0e      	ldr	r3, [pc, #56]	; (8003620 <prvGetNextExpireTime+0x44>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d101      	bne.n	80035f2 <prvGetNextExpireTime+0x16>
 80035ee:	2201      	movs	r2, #1
 80035f0:	e000      	b.n	80035f4 <prvGetNextExpireTime+0x18>
 80035f2:	2200      	movs	r2, #0
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d105      	bne.n	800360c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003600:	4b07      	ldr	r3, [pc, #28]	; (8003620 <prvGetNextExpireTime+0x44>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	60fb      	str	r3, [r7, #12]
 800360a:	e001      	b.n	8003610 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800360c:	2300      	movs	r3, #0
 800360e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003610:	68fb      	ldr	r3, [r7, #12]
}
 8003612:	4618      	mov	r0, r3
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	20000c10 	.word	0x20000c10

08003624 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800362c:	f7ff fa90 	bl	8002b50 <xTaskGetTickCount>
 8003630:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003632:	4b0b      	ldr	r3, [pc, #44]	; (8003660 <prvSampleTimeNow+0x3c>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	429a      	cmp	r2, r3
 800363a:	d205      	bcs.n	8003648 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800363c:	f000 f930 	bl	80038a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	601a      	str	r2, [r3, #0]
 8003646:	e002      	b.n	800364e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800364e:	4a04      	ldr	r2, [pc, #16]	; (8003660 <prvSampleTimeNow+0x3c>)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003654:	68fb      	ldr	r3, [r7, #12]
}
 8003656:	4618      	mov	r0, r3
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	20000c20 	.word	0x20000c20

08003664 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
 8003670:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003672:	2300      	movs	r3, #0
 8003674:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	68ba      	ldr	r2, [r7, #8]
 800367a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003682:	68ba      	ldr	r2, [r7, #8]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	429a      	cmp	r2, r3
 8003688:	d812      	bhi.n	80036b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	1ad2      	subs	r2, r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	429a      	cmp	r2, r3
 8003696:	d302      	bcc.n	800369e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003698:	2301      	movs	r3, #1
 800369a:	617b      	str	r3, [r7, #20]
 800369c:	e01b      	b.n	80036d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800369e:	4b10      	ldr	r3, [pc, #64]	; (80036e0 <prvInsertTimerInActiveList+0x7c>)
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	3304      	adds	r3, #4
 80036a6:	4619      	mov	r1, r3
 80036a8:	4610      	mov	r0, r2
 80036aa:	f7fe f9dc 	bl	8001a66 <vListInsert>
 80036ae:	e012      	b.n	80036d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d206      	bcs.n	80036c6 <prvInsertTimerInActiveList+0x62>
 80036b8:	68ba      	ldr	r2, [r7, #8]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d302      	bcc.n	80036c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80036c0:	2301      	movs	r3, #1
 80036c2:	617b      	str	r3, [r7, #20]
 80036c4:	e007      	b.n	80036d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80036c6:	4b07      	ldr	r3, [pc, #28]	; (80036e4 <prvInsertTimerInActiveList+0x80>)
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	3304      	adds	r3, #4
 80036ce:	4619      	mov	r1, r3
 80036d0:	4610      	mov	r0, r2
 80036d2:	f7fe f9c8 	bl	8001a66 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80036d6:	697b      	ldr	r3, [r7, #20]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3718      	adds	r7, #24
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	20000c14 	.word	0x20000c14
 80036e4:	20000c10 	.word	0x20000c10

080036e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b08e      	sub	sp, #56	; 0x38
 80036ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80036ee:	e0c6      	b.n	800387e <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	da17      	bge.n	8003726 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80036f6:	1d3b      	adds	r3, r7, #4
 80036f8:	3304      	adds	r3, #4
 80036fa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80036fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d109      	bne.n	8003716 <prvProcessReceivedCommands+0x2e>
 8003702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003706:	f383 8811 	msr	BASEPRI, r3
 800370a:	f3bf 8f6f 	isb	sy
 800370e:	f3bf 8f4f 	dsb	sy
 8003712:	61fb      	str	r3, [r7, #28]
 8003714:	e7fe      	b.n	8003714 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800371c:	6850      	ldr	r0, [r2, #4]
 800371e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003720:	6892      	ldr	r2, [r2, #8]
 8003722:	4611      	mov	r1, r2
 8003724:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2b00      	cmp	r3, #0
 800372a:	f2c0 80a7 	blt.w	800387c <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d004      	beq.n	8003744 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800373a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373c:	3304      	adds	r3, #4
 800373e:	4618      	mov	r0, r3
 8003740:	f7fe f9ca 	bl	8001ad8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003744:	463b      	mov	r3, r7
 8003746:	4618      	mov	r0, r3
 8003748:	f7ff ff6c 	bl	8003624 <prvSampleTimeNow>
 800374c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2b09      	cmp	r3, #9
 8003752:	f200 8094 	bhi.w	800387e <prvProcessReceivedCommands+0x196>
 8003756:	a201      	add	r2, pc, #4	; (adr r2, 800375c <prvProcessReceivedCommands+0x74>)
 8003758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800375c:	08003785 	.word	0x08003785
 8003760:	08003785 	.word	0x08003785
 8003764:	08003785 	.word	0x08003785
 8003768:	080037f7 	.word	0x080037f7
 800376c:	0800380b 	.word	0x0800380b
 8003770:	08003853 	.word	0x08003853
 8003774:	08003785 	.word	0x08003785
 8003778:	08003785 	.word	0x08003785
 800377c:	080037f7 	.word	0x080037f7
 8003780:	0800380b 	.word	0x0800380b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003786:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800378a:	f043 0301 	orr.w	r3, r3, #1
 800378e:	b2da      	uxtb	r2, r3
 8003790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003792:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	18d1      	adds	r1, r2, r3
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037a4:	f7ff ff5e 	bl	8003664 <prvInsertTimerInActiveList>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d067      	beq.n	800387e <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80037ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037b4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80037b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80037bc:	f003 0304 	and.w	r3, r3, #4
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d05c      	beq.n	800387e <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80037c4:	68ba      	ldr	r2, [r7, #8]
 80037c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	441a      	add	r2, r3
 80037cc:	2300      	movs	r3, #0
 80037ce:	9300      	str	r3, [sp, #0]
 80037d0:	2300      	movs	r3, #0
 80037d2:	2100      	movs	r1, #0
 80037d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037d6:	f7ff fe09 	bl	80033ec <xTimerGenericCommand>
 80037da:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80037dc:	6a3b      	ldr	r3, [r7, #32]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d14d      	bne.n	800387e <prvProcessReceivedCommands+0x196>
 80037e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e6:	f383 8811 	msr	BASEPRI, r3
 80037ea:	f3bf 8f6f 	isb	sy
 80037ee:	f3bf 8f4f 	dsb	sy
 80037f2:	61bb      	str	r3, [r7, #24]
 80037f4:	e7fe      	b.n	80037f4 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80037f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80037fc:	f023 0301 	bic.w	r3, r3, #1
 8003800:	b2da      	uxtb	r2, r3
 8003802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003804:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8003808:	e039      	b.n	800387e <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800380a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003810:	f043 0301 	orr.w	r3, r3, #1
 8003814:	b2da      	uxtb	r2, r3
 8003816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003818:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800381c:	68ba      	ldr	r2, [r7, #8]
 800381e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003820:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d109      	bne.n	800383e <prvProcessReceivedCommands+0x156>
 800382a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382e:	f383 8811 	msr	BASEPRI, r3
 8003832:	f3bf 8f6f 	isb	sy
 8003836:	f3bf 8f4f 	dsb	sy
 800383a:	617b      	str	r3, [r7, #20]
 800383c:	e7fe      	b.n	800383c <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800383e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003840:	699a      	ldr	r2, [r3, #24]
 8003842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003844:	18d1      	adds	r1, r2, r3
 8003846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800384a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800384c:	f7ff ff0a 	bl	8003664 <prvInsertTimerInActiveList>
					break;
 8003850:	e015      	b.n	800387e <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003854:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d103      	bne.n	8003868 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8003860:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003862:	f000 fbc7 	bl	8003ff4 <vPortFree>
 8003866:	e00a      	b.n	800387e <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800386e:	f023 0301 	bic.w	r3, r3, #1
 8003872:	b2da      	uxtb	r2, r3
 8003874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003876:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800387a:	e000      	b.n	800387e <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800387c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800387e:	4b07      	ldr	r3, [pc, #28]	; (800389c <prvProcessReceivedCommands+0x1b4>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	1d39      	adds	r1, r7, #4
 8003884:	2200      	movs	r2, #0
 8003886:	4618      	mov	r0, r3
 8003888:	f7fe fc1c 	bl	80020c4 <xQueueReceive>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	f47f af2e 	bne.w	80036f0 <prvProcessReceivedCommands+0x8>
	}
}
 8003894:	bf00      	nop
 8003896:	3730      	adds	r7, #48	; 0x30
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	20000c18 	.word	0x20000c18

080038a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b088      	sub	sp, #32
 80038a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80038a6:	e047      	b.n	8003938 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80038a8:	4b2d      	ldr	r3, [pc, #180]	; (8003960 <prvSwitchTimerLists+0xc0>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038b2:	4b2b      	ldr	r3, [pc, #172]	; (8003960 <prvSwitchTimerLists+0xc0>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	3304      	adds	r3, #4
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7fe f909 	bl	8001ad8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038d4:	f003 0304 	and.w	r3, r3, #4
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d02d      	beq.n	8003938 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	4413      	add	r3, r2
 80038e4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80038e6:	68ba      	ldr	r2, [r7, #8]
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d90e      	bls.n	800390c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	68ba      	ldr	r2, [r7, #8]
 80038f2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80038fa:	4b19      	ldr	r3, [pc, #100]	; (8003960 <prvSwitchTimerLists+0xc0>)
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	3304      	adds	r3, #4
 8003902:	4619      	mov	r1, r3
 8003904:	4610      	mov	r0, r2
 8003906:	f7fe f8ae 	bl	8001a66 <vListInsert>
 800390a:	e015      	b.n	8003938 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800390c:	2300      	movs	r3, #0
 800390e:	9300      	str	r3, [sp, #0]
 8003910:	2300      	movs	r3, #0
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	2100      	movs	r1, #0
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f7ff fd68 	bl	80033ec <xTimerGenericCommand>
 800391c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d109      	bne.n	8003938 <prvSwitchTimerLists+0x98>
 8003924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003928:	f383 8811 	msr	BASEPRI, r3
 800392c:	f3bf 8f6f 	isb	sy
 8003930:	f3bf 8f4f 	dsb	sy
 8003934:	603b      	str	r3, [r7, #0]
 8003936:	e7fe      	b.n	8003936 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003938:	4b09      	ldr	r3, [pc, #36]	; (8003960 <prvSwitchTimerLists+0xc0>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1b2      	bne.n	80038a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003942:	4b07      	ldr	r3, [pc, #28]	; (8003960 <prvSwitchTimerLists+0xc0>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003948:	4b06      	ldr	r3, [pc, #24]	; (8003964 <prvSwitchTimerLists+0xc4>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a04      	ldr	r2, [pc, #16]	; (8003960 <prvSwitchTimerLists+0xc0>)
 800394e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003950:	4a04      	ldr	r2, [pc, #16]	; (8003964 <prvSwitchTimerLists+0xc4>)
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	6013      	str	r3, [r2, #0]
}
 8003956:	bf00      	nop
 8003958:	3718      	adds	r7, #24
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	20000c10 	.word	0x20000c10
 8003964:	20000c14 	.word	0x20000c14

08003968 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800396e:	f000 f965 	bl	8003c3c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003972:	4b15      	ldr	r3, [pc, #84]	; (80039c8 <prvCheckForValidListAndQueue+0x60>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d120      	bne.n	80039bc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800397a:	4814      	ldr	r0, [pc, #80]	; (80039cc <prvCheckForValidListAndQueue+0x64>)
 800397c:	f7fe f822 	bl	80019c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003980:	4813      	ldr	r0, [pc, #76]	; (80039d0 <prvCheckForValidListAndQueue+0x68>)
 8003982:	f7fe f81f 	bl	80019c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003986:	4b13      	ldr	r3, [pc, #76]	; (80039d4 <prvCheckForValidListAndQueue+0x6c>)
 8003988:	4a10      	ldr	r2, [pc, #64]	; (80039cc <prvCheckForValidListAndQueue+0x64>)
 800398a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800398c:	4b12      	ldr	r3, [pc, #72]	; (80039d8 <prvCheckForValidListAndQueue+0x70>)
 800398e:	4a10      	ldr	r2, [pc, #64]	; (80039d0 <prvCheckForValidListAndQueue+0x68>)
 8003990:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003992:	2300      	movs	r3, #0
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	4b11      	ldr	r3, [pc, #68]	; (80039dc <prvCheckForValidListAndQueue+0x74>)
 8003998:	4a11      	ldr	r2, [pc, #68]	; (80039e0 <prvCheckForValidListAndQueue+0x78>)
 800399a:	2110      	movs	r1, #16
 800399c:	200a      	movs	r0, #10
 800399e:	f7fe f92d 	bl	8001bfc <xQueueGenericCreateStatic>
 80039a2:	4602      	mov	r2, r0
 80039a4:	4b08      	ldr	r3, [pc, #32]	; (80039c8 <prvCheckForValidListAndQueue+0x60>)
 80039a6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80039a8:	4b07      	ldr	r3, [pc, #28]	; (80039c8 <prvCheckForValidListAndQueue+0x60>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d005      	beq.n	80039bc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80039b0:	4b05      	ldr	r3, [pc, #20]	; (80039c8 <prvCheckForValidListAndQueue+0x60>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	490b      	ldr	r1, [pc, #44]	; (80039e4 <prvCheckForValidListAndQueue+0x7c>)
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7fe fd8e 	bl	80024d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80039bc:	f000 f96c 	bl	8003c98 <vPortExitCritical>
}
 80039c0:	bf00      	nop
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	20000c18 	.word	0x20000c18
 80039cc:	20000be8 	.word	0x20000be8
 80039d0:	20000bfc 	.word	0x20000bfc
 80039d4:	20000c10 	.word	0x20000c10
 80039d8:	20000c14 	.word	0x20000c14
 80039dc:	20000cc4 	.word	0x20000cc4
 80039e0:	20000c24 	.word	0x20000c24
 80039e4:	080042cc 	.word	0x080042cc

080039e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	3b04      	subs	r3, #4
 80039f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	3b04      	subs	r3, #4
 8003a06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	f023 0201 	bic.w	r2, r3, #1
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	3b04      	subs	r3, #4
 8003a16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003a18:	4a0c      	ldr	r2, [pc, #48]	; (8003a4c <pxPortInitialiseStack+0x64>)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	3b14      	subs	r3, #20
 8003a22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	3b04      	subs	r3, #4
 8003a2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f06f 0202 	mvn.w	r2, #2
 8003a36:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	3b20      	subs	r3, #32
 8003a3c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3714      	adds	r7, #20
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr
 8003a4c:	08003a51 	.word	0x08003a51

08003a50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003a56:	2300      	movs	r3, #0
 8003a58:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003a5a:	4b11      	ldr	r3, [pc, #68]	; (8003aa0 <prvTaskExitError+0x50>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a62:	d009      	beq.n	8003a78 <prvTaskExitError+0x28>
 8003a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a68:	f383 8811 	msr	BASEPRI, r3
 8003a6c:	f3bf 8f6f 	isb	sy
 8003a70:	f3bf 8f4f 	dsb	sy
 8003a74:	60fb      	str	r3, [r7, #12]
 8003a76:	e7fe      	b.n	8003a76 <prvTaskExitError+0x26>
 8003a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a7c:	f383 8811 	msr	BASEPRI, r3
 8003a80:	f3bf 8f6f 	isb	sy
 8003a84:	f3bf 8f4f 	dsb	sy
 8003a88:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003a8a:	bf00      	nop
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d0fc      	beq.n	8003a8c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003a92:	bf00      	nop
 8003a94:	3714      	adds	r7, #20
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	2000000c 	.word	0x2000000c
	...

08003ab0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003ab0:	4b07      	ldr	r3, [pc, #28]	; (8003ad0 <pxCurrentTCBConst2>)
 8003ab2:	6819      	ldr	r1, [r3, #0]
 8003ab4:	6808      	ldr	r0, [r1, #0]
 8003ab6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aba:	f380 8809 	msr	PSP, r0
 8003abe:	f3bf 8f6f 	isb	sy
 8003ac2:	f04f 0000 	mov.w	r0, #0
 8003ac6:	f380 8811 	msr	BASEPRI, r0
 8003aca:	4770      	bx	lr
 8003acc:	f3af 8000 	nop.w

08003ad0 <pxCurrentTCBConst2>:
 8003ad0:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003ad4:	bf00      	nop
 8003ad6:	bf00      	nop

08003ad8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003ad8:	4808      	ldr	r0, [pc, #32]	; (8003afc <prvPortStartFirstTask+0x24>)
 8003ada:	6800      	ldr	r0, [r0, #0]
 8003adc:	6800      	ldr	r0, [r0, #0]
 8003ade:	f380 8808 	msr	MSP, r0
 8003ae2:	f04f 0000 	mov.w	r0, #0
 8003ae6:	f380 8814 	msr	CONTROL, r0
 8003aea:	b662      	cpsie	i
 8003aec:	b661      	cpsie	f
 8003aee:	f3bf 8f4f 	dsb	sy
 8003af2:	f3bf 8f6f 	isb	sy
 8003af6:	df00      	svc	0
 8003af8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003afa:	bf00      	nop
 8003afc:	e000ed08 	.word	0xe000ed08

08003b00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003b06:	4b44      	ldr	r3, [pc, #272]	; (8003c18 <xPortStartScheduler+0x118>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a44      	ldr	r2, [pc, #272]	; (8003c1c <xPortStartScheduler+0x11c>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d109      	bne.n	8003b24 <xPortStartScheduler+0x24>
 8003b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b14:	f383 8811 	msr	BASEPRI, r3
 8003b18:	f3bf 8f6f 	isb	sy
 8003b1c:	f3bf 8f4f 	dsb	sy
 8003b20:	613b      	str	r3, [r7, #16]
 8003b22:	e7fe      	b.n	8003b22 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003b24:	4b3c      	ldr	r3, [pc, #240]	; (8003c18 <xPortStartScheduler+0x118>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a3d      	ldr	r2, [pc, #244]	; (8003c20 <xPortStartScheduler+0x120>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d109      	bne.n	8003b42 <xPortStartScheduler+0x42>
 8003b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b32:	f383 8811 	msr	BASEPRI, r3
 8003b36:	f3bf 8f6f 	isb	sy
 8003b3a:	f3bf 8f4f 	dsb	sy
 8003b3e:	60fb      	str	r3, [r7, #12]
 8003b40:	e7fe      	b.n	8003b40 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003b42:	4b38      	ldr	r3, [pc, #224]	; (8003c24 <xPortStartScheduler+0x124>)
 8003b44:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	22ff      	movs	r2, #255	; 0xff
 8003b52:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003b5c:	78fb      	ldrb	r3, [r7, #3]
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b64:	b2da      	uxtb	r2, r3
 8003b66:	4b30      	ldr	r3, [pc, #192]	; (8003c28 <xPortStartScheduler+0x128>)
 8003b68:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003b6a:	4b30      	ldr	r3, [pc, #192]	; (8003c2c <xPortStartScheduler+0x12c>)
 8003b6c:	2207      	movs	r2, #7
 8003b6e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003b70:	e009      	b.n	8003b86 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003b72:	4b2e      	ldr	r3, [pc, #184]	; (8003c2c <xPortStartScheduler+0x12c>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	3b01      	subs	r3, #1
 8003b78:	4a2c      	ldr	r2, [pc, #176]	; (8003c2c <xPortStartScheduler+0x12c>)
 8003b7a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003b7c:	78fb      	ldrb	r3, [r7, #3]
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003b86:	78fb      	ldrb	r3, [r7, #3]
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b8e:	2b80      	cmp	r3, #128	; 0x80
 8003b90:	d0ef      	beq.n	8003b72 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003b92:	4b26      	ldr	r3, [pc, #152]	; (8003c2c <xPortStartScheduler+0x12c>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f1c3 0307 	rsb	r3, r3, #7
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	d009      	beq.n	8003bb2 <xPortStartScheduler+0xb2>
 8003b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba2:	f383 8811 	msr	BASEPRI, r3
 8003ba6:	f3bf 8f6f 	isb	sy
 8003baa:	f3bf 8f4f 	dsb	sy
 8003bae:	60bb      	str	r3, [r7, #8]
 8003bb0:	e7fe      	b.n	8003bb0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003bb2:	4b1e      	ldr	r3, [pc, #120]	; (8003c2c <xPortStartScheduler+0x12c>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	021b      	lsls	r3, r3, #8
 8003bb8:	4a1c      	ldr	r2, [pc, #112]	; (8003c2c <xPortStartScheduler+0x12c>)
 8003bba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003bbc:	4b1b      	ldr	r3, [pc, #108]	; (8003c2c <xPortStartScheduler+0x12c>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003bc4:	4a19      	ldr	r2, [pc, #100]	; (8003c2c <xPortStartScheduler+0x12c>)
 8003bc6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	b2da      	uxtb	r2, r3
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003bd0:	4b17      	ldr	r3, [pc, #92]	; (8003c30 <xPortStartScheduler+0x130>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a16      	ldr	r2, [pc, #88]	; (8003c30 <xPortStartScheduler+0x130>)
 8003bd6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003bda:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003bdc:	4b14      	ldr	r3, [pc, #80]	; (8003c30 <xPortStartScheduler+0x130>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a13      	ldr	r2, [pc, #76]	; (8003c30 <xPortStartScheduler+0x130>)
 8003be2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003be6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003be8:	f000 f8d6 	bl	8003d98 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003bec:	4b11      	ldr	r3, [pc, #68]	; (8003c34 <xPortStartScheduler+0x134>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003bf2:	f000 f8f5 	bl	8003de0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003bf6:	4b10      	ldr	r3, [pc, #64]	; (8003c38 <xPortStartScheduler+0x138>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a0f      	ldr	r2, [pc, #60]	; (8003c38 <xPortStartScheduler+0x138>)
 8003bfc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003c00:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003c02:	f7ff ff69 	bl	8003ad8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003c06:	f7ff f86b 	bl	8002ce0 <vTaskSwitchContext>
	prvTaskExitError();
 8003c0a:	f7ff ff21 	bl	8003a50 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3718      	adds	r7, #24
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	e000ed00 	.word	0xe000ed00
 8003c1c:	410fc271 	.word	0x410fc271
 8003c20:	410fc270 	.word	0x410fc270
 8003c24:	e000e400 	.word	0xe000e400
 8003c28:	20000d14 	.word	0x20000d14
 8003c2c:	20000d18 	.word	0x20000d18
 8003c30:	e000ed20 	.word	0xe000ed20
 8003c34:	2000000c 	.word	0x2000000c
 8003c38:	e000ef34 	.word	0xe000ef34

08003c3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c46:	f383 8811 	msr	BASEPRI, r3
 8003c4a:	f3bf 8f6f 	isb	sy
 8003c4e:	f3bf 8f4f 	dsb	sy
 8003c52:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003c54:	4b0e      	ldr	r3, [pc, #56]	; (8003c90 <vPortEnterCritical+0x54>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	3301      	adds	r3, #1
 8003c5a:	4a0d      	ldr	r2, [pc, #52]	; (8003c90 <vPortEnterCritical+0x54>)
 8003c5c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003c5e:	4b0c      	ldr	r3, [pc, #48]	; (8003c90 <vPortEnterCritical+0x54>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d10e      	bne.n	8003c84 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003c66:	4b0b      	ldr	r3, [pc, #44]	; (8003c94 <vPortEnterCritical+0x58>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d009      	beq.n	8003c84 <vPortEnterCritical+0x48>
 8003c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c74:	f383 8811 	msr	BASEPRI, r3
 8003c78:	f3bf 8f6f 	isb	sy
 8003c7c:	f3bf 8f4f 	dsb	sy
 8003c80:	603b      	str	r3, [r7, #0]
 8003c82:	e7fe      	b.n	8003c82 <vPortEnterCritical+0x46>
	}
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr
 8003c90:	2000000c 	.word	0x2000000c
 8003c94:	e000ed04 	.word	0xe000ed04

08003c98 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003c9e:	4b11      	ldr	r3, [pc, #68]	; (8003ce4 <vPortExitCritical+0x4c>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d109      	bne.n	8003cba <vPortExitCritical+0x22>
 8003ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003caa:	f383 8811 	msr	BASEPRI, r3
 8003cae:	f3bf 8f6f 	isb	sy
 8003cb2:	f3bf 8f4f 	dsb	sy
 8003cb6:	607b      	str	r3, [r7, #4]
 8003cb8:	e7fe      	b.n	8003cb8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003cba:	4b0a      	ldr	r3, [pc, #40]	; (8003ce4 <vPortExitCritical+0x4c>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	4a08      	ldr	r2, [pc, #32]	; (8003ce4 <vPortExitCritical+0x4c>)
 8003cc2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003cc4:	4b07      	ldr	r3, [pc, #28]	; (8003ce4 <vPortExitCritical+0x4c>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d104      	bne.n	8003cd6 <vPortExitCritical+0x3e>
 8003ccc:	2300      	movs	r3, #0
 8003cce:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003cd6:	bf00      	nop
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	2000000c 	.word	0x2000000c
	...

08003cf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003cf0:	f3ef 8009 	mrs	r0, PSP
 8003cf4:	f3bf 8f6f 	isb	sy
 8003cf8:	4b15      	ldr	r3, [pc, #84]	; (8003d50 <pxCurrentTCBConst>)
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	f01e 0f10 	tst.w	lr, #16
 8003d00:	bf08      	it	eq
 8003d02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003d06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d0a:	6010      	str	r0, [r2, #0]
 8003d0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003d10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003d14:	f380 8811 	msr	BASEPRI, r0
 8003d18:	f3bf 8f4f 	dsb	sy
 8003d1c:	f3bf 8f6f 	isb	sy
 8003d20:	f7fe ffde 	bl	8002ce0 <vTaskSwitchContext>
 8003d24:	f04f 0000 	mov.w	r0, #0
 8003d28:	f380 8811 	msr	BASEPRI, r0
 8003d2c:	bc09      	pop	{r0, r3}
 8003d2e:	6819      	ldr	r1, [r3, #0]
 8003d30:	6808      	ldr	r0, [r1, #0]
 8003d32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d36:	f01e 0f10 	tst.w	lr, #16
 8003d3a:	bf08      	it	eq
 8003d3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003d40:	f380 8809 	msr	PSP, r0
 8003d44:	f3bf 8f6f 	isb	sy
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	f3af 8000 	nop.w

08003d50 <pxCurrentTCBConst>:
 8003d50:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003d54:	bf00      	nop
 8003d56:	bf00      	nop

08003d58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
	__asm volatile
 8003d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d62:	f383 8811 	msr	BASEPRI, r3
 8003d66:	f3bf 8f6f 	isb	sy
 8003d6a:	f3bf 8f4f 	dsb	sy
 8003d6e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003d70:	f7fe fefe 	bl	8002b70 <xTaskIncrementTick>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d003      	beq.n	8003d82 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003d7a:	4b06      	ldr	r3, [pc, #24]	; (8003d94 <xPortSysTickHandler+0x3c>)
 8003d7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d80:	601a      	str	r2, [r3, #0]
 8003d82:	2300      	movs	r3, #0
 8003d84:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8003d8c:	bf00      	nop
 8003d8e:	3708      	adds	r7, #8
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	e000ed04 	.word	0xe000ed04

08003d98 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003d98:	b480      	push	{r7}
 8003d9a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003d9c:	4b0b      	ldr	r3, [pc, #44]	; (8003dcc <vPortSetupTimerInterrupt+0x34>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003da2:	4b0b      	ldr	r3, [pc, #44]	; (8003dd0 <vPortSetupTimerInterrupt+0x38>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003da8:	4b0a      	ldr	r3, [pc, #40]	; (8003dd4 <vPortSetupTimerInterrupt+0x3c>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a0a      	ldr	r2, [pc, #40]	; (8003dd8 <vPortSetupTimerInterrupt+0x40>)
 8003dae:	fba2 2303 	umull	r2, r3, r2, r3
 8003db2:	099b      	lsrs	r3, r3, #6
 8003db4:	4a09      	ldr	r2, [pc, #36]	; (8003ddc <vPortSetupTimerInterrupt+0x44>)
 8003db6:	3b01      	subs	r3, #1
 8003db8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003dba:	4b04      	ldr	r3, [pc, #16]	; (8003dcc <vPortSetupTimerInterrupt+0x34>)
 8003dbc:	2207      	movs	r2, #7
 8003dbe:	601a      	str	r2, [r3, #0]
}
 8003dc0:	bf00      	nop
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	e000e010 	.word	0xe000e010
 8003dd0:	e000e018 	.word	0xe000e018
 8003dd4:	20000000 	.word	0x20000000
 8003dd8:	10624dd3 	.word	0x10624dd3
 8003ddc:	e000e014 	.word	0xe000e014

08003de0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003de0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003df0 <vPortEnableVFP+0x10>
 8003de4:	6801      	ldr	r1, [r0, #0]
 8003de6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003dea:	6001      	str	r1, [r0, #0]
 8003dec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003dee:	bf00      	nop
 8003df0:	e000ed88 	.word	0xe000ed88

08003df4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003dfa:	f3ef 8305 	mrs	r3, IPSR
 8003dfe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2b0f      	cmp	r3, #15
 8003e04:	d913      	bls.n	8003e2e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003e06:	4a16      	ldr	r2, [pc, #88]	; (8003e60 <vPortValidateInterruptPriority+0x6c>)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003e10:	4b14      	ldr	r3, [pc, #80]	; (8003e64 <vPortValidateInterruptPriority+0x70>)
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	7afa      	ldrb	r2, [r7, #11]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d209      	bcs.n	8003e2e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8003e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e1e:	f383 8811 	msr	BASEPRI, r3
 8003e22:	f3bf 8f6f 	isb	sy
 8003e26:	f3bf 8f4f 	dsb	sy
 8003e2a:	607b      	str	r3, [r7, #4]
 8003e2c:	e7fe      	b.n	8003e2c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003e2e:	4b0e      	ldr	r3, [pc, #56]	; (8003e68 <vPortValidateInterruptPriority+0x74>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e36:	4b0d      	ldr	r3, [pc, #52]	; (8003e6c <vPortValidateInterruptPriority+0x78>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d909      	bls.n	8003e52 <vPortValidateInterruptPriority+0x5e>
 8003e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e42:	f383 8811 	msr	BASEPRI, r3
 8003e46:	f3bf 8f6f 	isb	sy
 8003e4a:	f3bf 8f4f 	dsb	sy
 8003e4e:	603b      	str	r3, [r7, #0]
 8003e50:	e7fe      	b.n	8003e50 <vPortValidateInterruptPriority+0x5c>
	}
 8003e52:	bf00      	nop
 8003e54:	3714      	adds	r7, #20
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	e000e3f0 	.word	0xe000e3f0
 8003e64:	20000d14 	.word	0x20000d14
 8003e68:	e000ed0c 	.word	0xe000ed0c
 8003e6c:	20000d18 	.word	0x20000d18

08003e70 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b08a      	sub	sp, #40	; 0x28
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003e7c:	f7fe fdbe 	bl	80029fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003e80:	4b57      	ldr	r3, [pc, #348]	; (8003fe0 <pvPortMalloc+0x170>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d101      	bne.n	8003e8c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003e88:	f000 f90c 	bl	80040a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003e8c:	4b55      	ldr	r3, [pc, #340]	; (8003fe4 <pvPortMalloc+0x174>)
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4013      	ands	r3, r2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f040 808c 	bne.w	8003fb2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d01c      	beq.n	8003eda <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003ea0:	2208      	movs	r2, #8
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f003 0307 	and.w	r3, r3, #7
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d013      	beq.n	8003eda <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f023 0307 	bic.w	r3, r3, #7
 8003eb8:	3308      	adds	r3, #8
 8003eba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f003 0307 	and.w	r3, r3, #7
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d009      	beq.n	8003eda <pvPortMalloc+0x6a>
 8003ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eca:	f383 8811 	msr	BASEPRI, r3
 8003ece:	f3bf 8f6f 	isb	sy
 8003ed2:	f3bf 8f4f 	dsb	sy
 8003ed6:	617b      	str	r3, [r7, #20]
 8003ed8:	e7fe      	b.n	8003ed8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d068      	beq.n	8003fb2 <pvPortMalloc+0x142>
 8003ee0:	4b41      	ldr	r3, [pc, #260]	; (8003fe8 <pvPortMalloc+0x178>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d863      	bhi.n	8003fb2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003eea:	4b40      	ldr	r3, [pc, #256]	; (8003fec <pvPortMalloc+0x17c>)
 8003eec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003eee:	4b3f      	ldr	r3, [pc, #252]	; (8003fec <pvPortMalloc+0x17c>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003ef4:	e004      	b.n	8003f00 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d903      	bls.n	8003f12 <pvPortMalloc+0xa2>
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1f1      	bne.n	8003ef6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003f12:	4b33      	ldr	r3, [pc, #204]	; (8003fe0 <pvPortMalloc+0x170>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d04a      	beq.n	8003fb2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003f1c:	6a3b      	ldr	r3, [r7, #32]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2208      	movs	r2, #8
 8003f22:	4413      	add	r3, r2
 8003f24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	6a3b      	ldr	r3, [r7, #32]
 8003f2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f30:	685a      	ldr	r2, [r3, #4]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	1ad2      	subs	r2, r2, r3
 8003f36:	2308      	movs	r3, #8
 8003f38:	005b      	lsls	r3, r3, #1
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d91e      	bls.n	8003f7c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4413      	add	r3, r2
 8003f44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	f003 0307 	and.w	r3, r3, #7
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d009      	beq.n	8003f64 <pvPortMalloc+0xf4>
 8003f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f54:	f383 8811 	msr	BASEPRI, r3
 8003f58:	f3bf 8f6f 	isb	sy
 8003f5c:	f3bf 8f4f 	dsb	sy
 8003f60:	613b      	str	r3, [r7, #16]
 8003f62:	e7fe      	b.n	8003f62 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	1ad2      	subs	r2, r2, r3
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003f76:	69b8      	ldr	r0, [r7, #24]
 8003f78:	f000 f8f6 	bl	8004168 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003f7c:	4b1a      	ldr	r3, [pc, #104]	; (8003fe8 <pvPortMalloc+0x178>)
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	4a18      	ldr	r2, [pc, #96]	; (8003fe8 <pvPortMalloc+0x178>)
 8003f88:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003f8a:	4b17      	ldr	r3, [pc, #92]	; (8003fe8 <pvPortMalloc+0x178>)
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	4b18      	ldr	r3, [pc, #96]	; (8003ff0 <pvPortMalloc+0x180>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d203      	bcs.n	8003f9e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003f96:	4b14      	ldr	r3, [pc, #80]	; (8003fe8 <pvPortMalloc+0x178>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a15      	ldr	r2, [pc, #84]	; (8003ff0 <pvPortMalloc+0x180>)
 8003f9c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa0:	685a      	ldr	r2, [r3, #4]
 8003fa2:	4b10      	ldr	r3, [pc, #64]	; (8003fe4 <pvPortMalloc+0x174>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003faa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fae:	2200      	movs	r2, #0
 8003fb0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003fb2:	f7fe fd31 	bl	8002a18 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	f003 0307 	and.w	r3, r3, #7
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d009      	beq.n	8003fd4 <pvPortMalloc+0x164>
 8003fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc4:	f383 8811 	msr	BASEPRI, r3
 8003fc8:	f3bf 8f6f 	isb	sy
 8003fcc:	f3bf 8f4f 	dsb	sy
 8003fd0:	60fb      	str	r3, [r7, #12]
 8003fd2:	e7fe      	b.n	8003fd2 <pvPortMalloc+0x162>
	return pvReturn;
 8003fd4:	69fb      	ldr	r3, [r7, #28]
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3728      	adds	r7, #40	; 0x28
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	20004924 	.word	0x20004924
 8003fe4:	20004930 	.word	0x20004930
 8003fe8:	20004928 	.word	0x20004928
 8003fec:	2000491c 	.word	0x2000491c
 8003ff0:	2000492c 	.word	0x2000492c

08003ff4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d046      	beq.n	8004094 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004006:	2308      	movs	r3, #8
 8004008:	425b      	negs	r3, r3
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	4413      	add	r3, r2
 800400e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	4b20      	ldr	r3, [pc, #128]	; (800409c <vPortFree+0xa8>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4013      	ands	r3, r2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d109      	bne.n	8004036 <vPortFree+0x42>
 8004022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004026:	f383 8811 	msr	BASEPRI, r3
 800402a:	f3bf 8f6f 	isb	sy
 800402e:	f3bf 8f4f 	dsb	sy
 8004032:	60fb      	str	r3, [r7, #12]
 8004034:	e7fe      	b.n	8004034 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d009      	beq.n	8004052 <vPortFree+0x5e>
 800403e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004042:	f383 8811 	msr	BASEPRI, r3
 8004046:	f3bf 8f6f 	isb	sy
 800404a:	f3bf 8f4f 	dsb	sy
 800404e:	60bb      	str	r3, [r7, #8]
 8004050:	e7fe      	b.n	8004050 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	4b11      	ldr	r3, [pc, #68]	; (800409c <vPortFree+0xa8>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4013      	ands	r3, r2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d019      	beq.n	8004094 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d115      	bne.n	8004094 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	685a      	ldr	r2, [r3, #4]
 800406c:	4b0b      	ldr	r3, [pc, #44]	; (800409c <vPortFree+0xa8>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	43db      	mvns	r3, r3
 8004072:	401a      	ands	r2, r3
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004078:	f7fe fcc0 	bl	80029fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	4b07      	ldr	r3, [pc, #28]	; (80040a0 <vPortFree+0xac>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4413      	add	r3, r2
 8004086:	4a06      	ldr	r2, [pc, #24]	; (80040a0 <vPortFree+0xac>)
 8004088:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800408a:	6938      	ldr	r0, [r7, #16]
 800408c:	f000 f86c 	bl	8004168 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004090:	f7fe fcc2 	bl	8002a18 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004094:	bf00      	nop
 8004096:	3718      	adds	r7, #24
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	20004930 	.word	0x20004930
 80040a0:	20004928 	.word	0x20004928

080040a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80040aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80040ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80040b0:	4b27      	ldr	r3, [pc, #156]	; (8004150 <prvHeapInit+0xac>)
 80040b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f003 0307 	and.w	r3, r3, #7
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00c      	beq.n	80040d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	3307      	adds	r3, #7
 80040c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f023 0307 	bic.w	r3, r3, #7
 80040ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80040cc:	68ba      	ldr	r2, [r7, #8]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	4a1f      	ldr	r2, [pc, #124]	; (8004150 <prvHeapInit+0xac>)
 80040d4:	4413      	add	r3, r2
 80040d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80040dc:	4a1d      	ldr	r2, [pc, #116]	; (8004154 <prvHeapInit+0xb0>)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80040e2:	4b1c      	ldr	r3, [pc, #112]	; (8004154 <prvHeapInit+0xb0>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	68ba      	ldr	r2, [r7, #8]
 80040ec:	4413      	add	r3, r2
 80040ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80040f0:	2208      	movs	r2, #8
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	1a9b      	subs	r3, r3, r2
 80040f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f023 0307 	bic.w	r3, r3, #7
 80040fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	4a15      	ldr	r2, [pc, #84]	; (8004158 <prvHeapInit+0xb4>)
 8004104:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004106:	4b14      	ldr	r3, [pc, #80]	; (8004158 <prvHeapInit+0xb4>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2200      	movs	r2, #0
 800410c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800410e:	4b12      	ldr	r3, [pc, #72]	; (8004158 <prvHeapInit+0xb4>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2200      	movs	r2, #0
 8004114:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	1ad2      	subs	r2, r2, r3
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004124:	4b0c      	ldr	r3, [pc, #48]	; (8004158 <prvHeapInit+0xb4>)
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	4a0a      	ldr	r2, [pc, #40]	; (800415c <prvHeapInit+0xb8>)
 8004132:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	4a09      	ldr	r2, [pc, #36]	; (8004160 <prvHeapInit+0xbc>)
 800413a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800413c:	4b09      	ldr	r3, [pc, #36]	; (8004164 <prvHeapInit+0xc0>)
 800413e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004142:	601a      	str	r2, [r3, #0]
}
 8004144:	bf00      	nop
 8004146:	3714      	adds	r7, #20
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr
 8004150:	20000d1c 	.word	0x20000d1c
 8004154:	2000491c 	.word	0x2000491c
 8004158:	20004924 	.word	0x20004924
 800415c:	2000492c 	.word	0x2000492c
 8004160:	20004928 	.word	0x20004928
 8004164:	20004930 	.word	0x20004930

08004168 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004170:	4b28      	ldr	r3, [pc, #160]	; (8004214 <prvInsertBlockIntoFreeList+0xac>)
 8004172:	60fb      	str	r3, [r7, #12]
 8004174:	e002      	b.n	800417c <prvInsertBlockIntoFreeList+0x14>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	60fb      	str	r3, [r7, #12]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	429a      	cmp	r2, r3
 8004184:	d8f7      	bhi.n	8004176 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	68ba      	ldr	r2, [r7, #8]
 8004190:	4413      	add	r3, r2
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	429a      	cmp	r2, r3
 8004196:	d108      	bne.n	80041aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	441a      	add	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	68ba      	ldr	r2, [r7, #8]
 80041b4:	441a      	add	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d118      	bne.n	80041f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	4b15      	ldr	r3, [pc, #84]	; (8004218 <prvInsertBlockIntoFreeList+0xb0>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d00d      	beq.n	80041e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685a      	ldr	r2, [r3, #4]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	441a      	add	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	601a      	str	r2, [r3, #0]
 80041e4:	e008      	b.n	80041f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80041e6:	4b0c      	ldr	r3, [pc, #48]	; (8004218 <prvInsertBlockIntoFreeList+0xb0>)
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	601a      	str	r2, [r3, #0]
 80041ee:	e003      	b.n	80041f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d002      	beq.n	8004206 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004206:	bf00      	nop
 8004208:	3714      	adds	r7, #20
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	2000491c 	.word	0x2000491c
 8004218:	20004924 	.word	0x20004924

0800421c <__libc_init_array>:
 800421c:	b570      	push	{r4, r5, r6, lr}
 800421e:	4e0d      	ldr	r6, [pc, #52]	; (8004254 <__libc_init_array+0x38>)
 8004220:	4c0d      	ldr	r4, [pc, #52]	; (8004258 <__libc_init_array+0x3c>)
 8004222:	1ba4      	subs	r4, r4, r6
 8004224:	10a4      	asrs	r4, r4, #2
 8004226:	2500      	movs	r5, #0
 8004228:	42a5      	cmp	r5, r4
 800422a:	d109      	bne.n	8004240 <__libc_init_array+0x24>
 800422c:	4e0b      	ldr	r6, [pc, #44]	; (800425c <__libc_init_array+0x40>)
 800422e:	4c0c      	ldr	r4, [pc, #48]	; (8004260 <__libc_init_array+0x44>)
 8004230:	f000 f82c 	bl	800428c <_init>
 8004234:	1ba4      	subs	r4, r4, r6
 8004236:	10a4      	asrs	r4, r4, #2
 8004238:	2500      	movs	r5, #0
 800423a:	42a5      	cmp	r5, r4
 800423c:	d105      	bne.n	800424a <__libc_init_array+0x2e>
 800423e:	bd70      	pop	{r4, r5, r6, pc}
 8004240:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004244:	4798      	blx	r3
 8004246:	3501      	adds	r5, #1
 8004248:	e7ee      	b.n	8004228 <__libc_init_array+0xc>
 800424a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800424e:	4798      	blx	r3
 8004250:	3501      	adds	r5, #1
 8004252:	e7f2      	b.n	800423a <__libc_init_array+0x1e>
 8004254:	08004334 	.word	0x08004334
 8004258:	08004334 	.word	0x08004334
 800425c:	08004334 	.word	0x08004334
 8004260:	08004338 	.word	0x08004338

08004264 <memcpy>:
 8004264:	b510      	push	{r4, lr}
 8004266:	1e43      	subs	r3, r0, #1
 8004268:	440a      	add	r2, r1
 800426a:	4291      	cmp	r1, r2
 800426c:	d100      	bne.n	8004270 <memcpy+0xc>
 800426e:	bd10      	pop	{r4, pc}
 8004270:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004274:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004278:	e7f7      	b.n	800426a <memcpy+0x6>

0800427a <memset>:
 800427a:	4402      	add	r2, r0
 800427c:	4603      	mov	r3, r0
 800427e:	4293      	cmp	r3, r2
 8004280:	d100      	bne.n	8004284 <memset+0xa>
 8004282:	4770      	bx	lr
 8004284:	f803 1b01 	strb.w	r1, [r3], #1
 8004288:	e7f9      	b.n	800427e <memset+0x4>
	...

0800428c <_init>:
 800428c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800428e:	bf00      	nop
 8004290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004292:	bc08      	pop	{r3}
 8004294:	469e      	mov	lr, r3
 8004296:	4770      	bx	lr

08004298 <_fini>:
 8004298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800429a:	bf00      	nop
 800429c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800429e:	bc08      	pop	{r3}
 80042a0:	469e      	mov	lr, r3
 80042a2:	4770      	bx	lr
