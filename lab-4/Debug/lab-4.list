
lab-4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004694  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08004844  08004844  00014844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048f0  080048f0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080048f0  080048f0  000148f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048f8  080048f8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048f8  080048f8  000148f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048fc  080048fc  000148fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004900  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004980  20000010  08004910  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004990  08004910  00024990  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000104d2  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021b3  00000000  00000000  00030512  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b78  00000000  00000000  000326c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a80  00000000  00000000  00033240  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000023b1  00000000  00000000  00033cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a3e3  00000000  00000000  00036071  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d71d9  00000000  00000000  00040454  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011762d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e18  00000000  00000000  001176a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800482c 	.word	0x0800482c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	0800482c 	.word	0x0800482c

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b972 	b.w	80004ec <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	4688      	mov	r8, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14b      	bne.n	80002c6 <__udivmoddi4+0xa6>
 800022e:	428a      	cmp	r2, r1
 8000230:	4615      	mov	r5, r2
 8000232:	d967      	bls.n	8000304 <__udivmoddi4+0xe4>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0720 	rsb	r7, r2, #32
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	fa20 f707 	lsr.w	r7, r0, r7
 8000246:	4095      	lsls	r5, r2
 8000248:	ea47 0803 	orr.w	r8, r7, r3
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbb8 f7fe 	udiv	r7, r8, lr
 8000258:	fa1f fc85 	uxth.w	ip, r5
 800025c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000260:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000264:	fb07 f10c 	mul.w	r1, r7, ip
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18eb      	adds	r3, r5, r3
 800026e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000272:	f080 811b 	bcs.w	80004ac <__udivmoddi4+0x28c>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8118 	bls.w	80004ac <__udivmoddi4+0x28c>
 800027c:	3f02      	subs	r7, #2
 800027e:	442b      	add	r3, r5
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0fe 	udiv	r0, r3, lr
 8000288:	fb0e 3310 	mls	r3, lr, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fc0c 	mul.w	ip, r0, ip
 8000294:	45a4      	cmp	ip, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	192c      	adds	r4, r5, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x290>
 80002a2:	45a4      	cmp	ip, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x290>
 80002a8:	3802      	subs	r0, #2
 80002aa:	442c      	add	r4, r5
 80002ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b0:	eba4 040c 	sub.w	r4, r4, ip
 80002b4:	2700      	movs	r7, #0
 80002b6:	b11e      	cbz	r6, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c6 4300 	strd	r4, r3, [r6]
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xbe>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80eb 	beq.w	80004a6 <__udivmoddi4+0x286>
 80002d0:	2700      	movs	r7, #0
 80002d2:	e9c6 0100 	strd	r0, r1, [r6]
 80002d6:	4638      	mov	r0, r7
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f783 	clz	r7, r3
 80002e2:	2f00      	cmp	r7, #0
 80002e4:	d147      	bne.n	8000376 <__udivmoddi4+0x156>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd0>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80fa 	bhi.w	80004e4 <__udivmoddi4+0x2c4>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	4698      	mov	r8, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa0>
 80002fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xe8>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 808f 	bne.w	8000430 <__udivmoddi4+0x210>
 8000312:	1b49      	subs	r1, r1, r5
 8000314:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000318:	fa1f f885 	uxth.w	r8, r5
 800031c:	2701      	movs	r7, #1
 800031e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fb0e 111c 	mls	r1, lr, ip, r1
 8000328:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032c:	fb08 f10c 	mul.w	r1, r8, ip
 8000330:	4299      	cmp	r1, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x124>
 8000334:	18eb      	adds	r3, r5, r3
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4299      	cmp	r1, r3
 800033e:	f200 80cd 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 8000342:	4684      	mov	ip, r0
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000350:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x14c>
 800035c:	192c      	adds	r4, r5, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x14a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80b6 	bhi.w	80004d6 <__udivmoddi4+0x2b6>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e79f      	b.n	80002b6 <__udivmoddi4+0x96>
 8000376:	f1c7 0c20 	rsb	ip, r7, #32
 800037a:	40bb      	lsls	r3, r7
 800037c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000380:	ea4e 0e03 	orr.w	lr, lr, r3
 8000384:	fa01 f407 	lsl.w	r4, r1, r7
 8000388:	fa20 f50c 	lsr.w	r5, r0, ip
 800038c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000390:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000394:	4325      	orrs	r5, r4
 8000396:	fbb3 f9f8 	udiv	r9, r3, r8
 800039a:	0c2c      	lsrs	r4, r5, #16
 800039c:	fb08 3319 	mls	r3, r8, r9, r3
 80003a0:	fa1f fa8e 	uxth.w	sl, lr
 80003a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ac:	429c      	cmp	r4, r3
 80003ae:	fa02 f207 	lsl.w	r2, r2, r7
 80003b2:	fa00 f107 	lsl.w	r1, r0, r7
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1e 0303 	adds.w	r3, lr, r3
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c0:	f080 8087 	bcs.w	80004d2 <__udivmoddi4+0x2b2>
 80003c4:	429c      	cmp	r4, r3
 80003c6:	f240 8084 	bls.w	80004d2 <__udivmoddi4+0x2b2>
 80003ca:	f1a9 0902 	sub.w	r9, r9, #2
 80003ce:	4473      	add	r3, lr
 80003d0:	1b1b      	subs	r3, r3, r4
 80003d2:	b2ad      	uxth	r5, r5
 80003d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d8:	fb08 3310 	mls	r3, r8, r0, r3
 80003dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1e 0404 	adds.w	r4, lr, r4
 80003ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f0:	d26b      	bcs.n	80004ca <__udivmoddi4+0x2aa>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d969      	bls.n	80004ca <__udivmoddi4+0x2aa>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4474      	add	r4, lr
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c2      	mov	sl, r8
 800040a:	464b      	mov	r3, r9
 800040c:	d354      	bcc.n	80004b8 <__udivmoddi4+0x298>
 800040e:	d051      	beq.n	80004b4 <__udivmoddi4+0x294>
 8000410:	2e00      	cmp	r6, #0
 8000412:	d069      	beq.n	80004e8 <__udivmoddi4+0x2c8>
 8000414:	ebb1 050a 	subs.w	r5, r1, sl
 8000418:	eb64 0403 	sbc.w	r4, r4, r3
 800041c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000420:	40fd      	lsrs	r5, r7
 8000422:	40fc      	lsrs	r4, r7
 8000424:	ea4c 0505 	orr.w	r5, ip, r5
 8000428:	e9c6 5400 	strd	r5, r4, [r6]
 800042c:	2700      	movs	r7, #0
 800042e:	e747      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f703 	lsr.w	r7, r0, r3
 8000438:	4095      	lsls	r5, r2
 800043a:	fa01 f002 	lsl.w	r0, r1, r2
 800043e:	fa21 f303 	lsr.w	r3, r1, r3
 8000442:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000446:	4338      	orrs	r0, r7
 8000448:	0c01      	lsrs	r1, r0, #16
 800044a:	fbb3 f7fe 	udiv	r7, r3, lr
 800044e:	fa1f f885 	uxth.w	r8, r5
 8000452:	fb0e 3317 	mls	r3, lr, r7, r3
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb07 f308 	mul.w	r3, r7, r8
 800045e:	428b      	cmp	r3, r1
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x256>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f107 3cff 	add.w	ip, r7, #4294967295
 800046c:	d22f      	bcs.n	80004ce <__udivmoddi4+0x2ae>
 800046e:	428b      	cmp	r3, r1
 8000470:	d92d      	bls.n	80004ce <__udivmoddi4+0x2ae>
 8000472:	3f02      	subs	r7, #2
 8000474:	4429      	add	r1, r5
 8000476:	1acb      	subs	r3, r1, r3
 8000478:	b281      	uxth	r1, r0
 800047a:	fbb3 f0fe 	udiv	r0, r3, lr
 800047e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb00 f308 	mul.w	r3, r0, r8
 800048a:	428b      	cmp	r3, r1
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x27e>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f100 3cff 	add.w	ip, r0, #4294967295
 8000494:	d217      	bcs.n	80004c6 <__udivmoddi4+0x2a6>
 8000496:	428b      	cmp	r3, r1
 8000498:	d915      	bls.n	80004c6 <__udivmoddi4+0x2a6>
 800049a:	3802      	subs	r0, #2
 800049c:	4429      	add	r1, r5
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a4:	e73b      	b.n	800031e <__udivmoddi4+0xfe>
 80004a6:	4637      	mov	r7, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e709      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004ac:	4607      	mov	r7, r0
 80004ae:	e6e7      	b.n	8000280 <__udivmoddi4+0x60>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b4:	4541      	cmp	r1, r8
 80004b6:	d2ab      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004bc:	eb69 020e 	sbc.w	r2, r9, lr
 80004c0:	3801      	subs	r0, #1
 80004c2:	4613      	mov	r3, r2
 80004c4:	e7a4      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c6:	4660      	mov	r0, ip
 80004c8:	e7e9      	b.n	800049e <__udivmoddi4+0x27e>
 80004ca:	4618      	mov	r0, r3
 80004cc:	e795      	b.n	80003fa <__udivmoddi4+0x1da>
 80004ce:	4667      	mov	r7, ip
 80004d0:	e7d1      	b.n	8000476 <__udivmoddi4+0x256>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e77c      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	442c      	add	r4, r5
 80004da:	e747      	b.n	800036c <__udivmoddi4+0x14c>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	442b      	add	r3, r5
 80004e2:	e72f      	b.n	8000344 <__udivmoddi4+0x124>
 80004e4:	4638      	mov	r0, r7
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xda>
 80004e8:	4637      	mov	r7, r6
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0xa0>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f4:	f000 fa32 	bl	800095c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f8:	f000 f84e 	bl	8000598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fc:	f000 f8ac 	bl	8000658 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000500:	f001 f972 	bl	80017e8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of task_1 */
  task_1Handle = osThreadNew(StartTask01, NULL, &task_1_attributes);
 8000504:	4a18      	ldr	r2, [pc, #96]	; (8000568 <main+0x78>)
 8000506:	2100      	movs	r1, #0
 8000508:	4818      	ldr	r0, [pc, #96]	; (800056c <main+0x7c>)
 800050a:	f001 f9d7 	bl	80018bc <osThreadNew>
 800050e:	4602      	mov	r2, r0
 8000510:	4b17      	ldr	r3, [pc, #92]	; (8000570 <main+0x80>)
 8000512:	601a      	str	r2, [r3, #0]

  /* creation of task_2 */
  task_2Handle = osThreadNew(StartTask02, NULL, &task_2_attributes);
 8000514:	4a17      	ldr	r2, [pc, #92]	; (8000574 <main+0x84>)
 8000516:	2100      	movs	r1, #0
 8000518:	4817      	ldr	r0, [pc, #92]	; (8000578 <main+0x88>)
 800051a:	f001 f9cf 	bl	80018bc <osThreadNew>
 800051e:	4602      	mov	r2, r0
 8000520:	4b16      	ldr	r3, [pc, #88]	; (800057c <main+0x8c>)
 8000522:	601a      	str	r2, [r3, #0]

  /* creation of task_3 */
  task_3Handle = osThreadNew(StartTask03, NULL, &task_3_attributes);
 8000524:	4a16      	ldr	r2, [pc, #88]	; (8000580 <main+0x90>)
 8000526:	2100      	movs	r1, #0
 8000528:	4816      	ldr	r0, [pc, #88]	; (8000584 <main+0x94>)
 800052a:	f001 f9c7 	bl	80018bc <osThreadNew>
 800052e:	4602      	mov	r2, r0
 8000530:	4b15      	ldr	r3, [pc, #84]	; (8000588 <main+0x98>)
 8000532:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */
  q1 = xQueueCreate(7, sizeof(unsigned int));
 8000534:	2200      	movs	r2, #0
 8000536:	2104      	movs	r1, #4
 8000538:	2007      	movs	r0, #7
 800053a:	f001 fc56 	bl	8001dea <xQueueGenericCreate>
 800053e:	4602      	mov	r2, r0
 8000540:	4b12      	ldr	r3, [pc, #72]	; (800058c <main+0x9c>)
 8000542:	601a      	str	r2, [r3, #0]
  q2 = xQueueCreate(7, sizeof(unsigned int));
 8000544:	2200      	movs	r2, #0
 8000546:	2104      	movs	r1, #4
 8000548:	2007      	movs	r0, #7
 800054a:	f001 fc4e 	bl	8001dea <xQueueGenericCreate>
 800054e:	4602      	mov	r2, r0
 8000550:	4b0f      	ldr	r3, [pc, #60]	; (8000590 <main+0xa0>)
 8000552:	601a      	str	r2, [r3, #0]

  xSemaphore = xSemaphoreCreateCounting(1, 1);
 8000554:	2101      	movs	r1, #1
 8000556:	2001      	movs	r0, #1
 8000558:	f001 fca9 	bl	8001eae <xQueueCreateCountingSemaphore>
 800055c:	4602      	mov	r2, r0
 800055e:	4b0d      	ldr	r3, [pc, #52]	; (8000594 <main+0xa4>)
 8000560:	601a      	str	r2, [r3, #0]
  /* Start scheduler */
  osKernelStart();
 8000562:	f001 f975 	bl	8001850 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000566:	e7fe      	b.n	8000566 <main+0x76>
 8000568:	08004874 	.word	0x08004874
 800056c:	080006c1 	.word	0x080006c1
 8000570:	20004940 	.word	0x20004940
 8000574:	08004898 	.word	0x08004898
 8000578:	0800071d 	.word	0x0800071d
 800057c:	20004944 	.word	0x20004944
 8000580:	080048bc 	.word	0x080048bc
 8000584:	080007a1 	.word	0x080007a1
 8000588:	2000493c 	.word	0x2000493c
 800058c:	20004948 	.word	0x20004948
 8000590:	20004934 	.word	0x20004934
 8000594:	20004938 	.word	0x20004938

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b094      	sub	sp, #80	; 0x50
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 0320 	add.w	r3, r7, #32
 80005a2:	2230      	movs	r2, #48	; 0x30
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f004 f937 	bl	800481a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	f107 030c 	add.w	r3, r7, #12
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005bc:	2300      	movs	r3, #0
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	4b23      	ldr	r3, [pc, #140]	; (8000650 <SystemClock_Config+0xb8>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c4:	4a22      	ldr	r2, [pc, #136]	; (8000650 <SystemClock_Config+0xb8>)
 80005c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ca:	6413      	str	r3, [r2, #64]	; 0x40
 80005cc:	4b20      	ldr	r3, [pc, #128]	; (8000650 <SystemClock_Config+0xb8>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d4:	60bb      	str	r3, [r7, #8]
 80005d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005d8:	2300      	movs	r3, #0
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	4b1d      	ldr	r3, [pc, #116]	; (8000654 <SystemClock_Config+0xbc>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005e4:	4a1b      	ldr	r2, [pc, #108]	; (8000654 <SystemClock_Config+0xbc>)
 80005e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ea:	6013      	str	r3, [r2, #0]
 80005ec:	4b19      	ldr	r3, [pc, #100]	; (8000654 <SystemClock_Config+0xbc>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f8:	2302      	movs	r3, #2
 80005fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005fc:	2301      	movs	r3, #1
 80005fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000600:	2310      	movs	r3, #16
 8000602:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000604:	2300      	movs	r3, #0
 8000606:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000608:	f107 0320 	add.w	r3, r7, #32
 800060c:	4618      	mov	r0, r3
 800060e:	f000 fcdb 	bl	8000fc8 <HAL_RCC_OscConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000618:	f000 f904 	bl	8000824 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061c:	230f      	movs	r3, #15
 800061e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000620:	2300      	movs	r3, #0
 8000622:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f000 ff36 	bl	80014a8 <HAL_RCC_ClockConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000642:	f000 f8ef 	bl	8000824 <Error_Handler>
  }
}
 8000646:	bf00      	nop
 8000648:	3750      	adds	r7, #80	; 0x50
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40023800 	.word	0x40023800
 8000654:	40007000 	.word	0x40007000

08000658 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b086      	sub	sp, #24
 800065c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800066c:	2300      	movs	r3, #0
 800066e:	603b      	str	r3, [r7, #0]
 8000670:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <MX_GPIO_Init+0x60>)
 8000672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000674:	4a10      	ldr	r2, [pc, #64]	; (80006b8 <MX_GPIO_Init+0x60>)
 8000676:	f043 0302 	orr.w	r3, r3, #2
 800067a:	6313      	str	r3, [r2, #48]	; 0x30
 800067c:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <MX_GPIO_Init+0x60>)
 800067e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000680:	f003 0302 	and.w	r3, r3, #2
 8000684:	603b      	str	r3, [r7, #0]
 8000686:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000688:	2200      	movs	r2, #0
 800068a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800068e:	480b      	ldr	r0, [pc, #44]	; (80006bc <MX_GPIO_Init+0x64>)
 8000690:	f000 fc66 	bl	8000f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000694:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000698:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069a:	2301      	movs	r3, #1
 800069c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a2:	2300      	movs	r3, #0
 80006a4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	4619      	mov	r1, r3
 80006aa:	4804      	ldr	r0, [pc, #16]	; (80006bc <MX_GPIO_Init+0x64>)
 80006ac:	f000 faae 	bl	8000c0c <HAL_GPIO_Init>

}
 80006b0:	bf00      	nop
 80006b2:	3718      	adds	r7, #24
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40020400 	.word	0x40020400

080006c0 <StartTask01>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  unsigned int counter = 0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	60bb      	str	r3, [r7, #8]
  unsigned int c = 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
	xQueueSend(q1, (void*)&counter, 500);
 80006d0:	4b10      	ldr	r3, [pc, #64]	; (8000714 <StartTask01+0x54>)
 80006d2:	6818      	ldr	r0, [r3, #0]
 80006d4:	f107 0108 	add.w	r1, r7, #8
 80006d8:	2300      	movs	r3, #0
 80006da:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80006de:	f001 fc17 	bl	8001f10 <xQueueGenericSend>
    ++counter;
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	3301      	adds	r3, #1
 80006e6:	60bb      	str	r3, [r7, #8]
    osDelay(1000);
 80006e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006ec:	f001 f98c 	bl	8001a08 <osDelay>
    if (c++ % 2 != 0)
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	1c5a      	adds	r2, r3, #1
 80006f4:	60fa      	str	r2, [r7, #12]
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d0e8      	beq.n	80006d0 <StartTask01+0x10>
    	xQueueSend(q2, (void*)&counter, 500);
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <StartTask01+0x58>)
 8000700:	6818      	ldr	r0, [r3, #0]
 8000702:	f107 0108 	add.w	r1, r7, #8
 8000706:	2300      	movs	r3, #0
 8000708:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800070c:	f001 fc00 	bl	8001f10 <xQueueGenericSend>
	xQueueSend(q1, (void*)&counter, 500);
 8000710:	e7de      	b.n	80006d0 <StartTask01+0x10>
 8000712:	bf00      	nop
 8000714:	20004948 	.word	0x20004948
 8000718:	20004934 	.word	0x20004934

0800071c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    unsigned int data;
    if (uxQueueMessagesWaiting(q1) > 1)
 8000724:	4b1b      	ldr	r3, [pc, #108]	; (8000794 <StartTask02+0x78>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4618      	mov	r0, r3
 800072a:	f001 ff63 	bl	80025f4 <uxQueueMessagesWaiting>
 800072e:	4603      	mov	r3, r0
 8000730:	2b01      	cmp	r3, #1
 8000732:	d9f7      	bls.n	8000724 <StartTask02+0x8>
    {
    	xQueueReceive(q1, &(data), 500);
 8000734:	4b17      	ldr	r3, [pc, #92]	; (8000794 <StartTask02+0x78>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f107 0108 	add.w	r1, r7, #8
 800073c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000740:	4618      	mov	r0, r3
 8000742:	f001 fd73 	bl	800222c <xQueueReceive>
    	if (xSemaphore != NULL)
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <StartTask02+0x7c>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d0ea      	beq.n	8000724 <StartTask02+0x8>
    	{
    		xSemaphoreTake(xSemaphore, portMAX_DELAY);
 800074e:	4b12      	ldr	r3, [pc, #72]	; (8000798 <StartTask02+0x7c>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	f04f 31ff 	mov.w	r1, #4294967295
 8000756:	4618      	mov	r0, r3
 8000758:	f001 fe44 	bl	80023e4 <xQueueSemaphoreTake>
    	for (int i = 0; i <= data; ++i)
 800075c:	2300      	movs	r3, #0
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	e00b      	b.n	800077a <StartTask02+0x5e>
    	{

    			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000762:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000766:	480d      	ldr	r0, [pc, #52]	; (800079c <StartTask02+0x80>)
 8000768:	f000 fc13 	bl	8000f92 <HAL_GPIO_TogglePin>
    			osDelay(500);
 800076c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000770:	f001 f94a 	bl	8001a08 <osDelay>
    	for (int i = 0; i <= data; ++i)
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	3301      	adds	r3, #1
 8000778:	60fb      	str	r3, [r7, #12]
 800077a:	68fa      	ldr	r2, [r7, #12]
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	429a      	cmp	r2, r3
 8000780:	d9ef      	bls.n	8000762 <StartTask02+0x46>

    	}
    	xSemaphoreGive(xSemaphore);
 8000782:	4b05      	ldr	r3, [pc, #20]	; (8000798 <StartTask02+0x7c>)
 8000784:	6818      	ldr	r0, [r3, #0]
 8000786:	2300      	movs	r3, #0
 8000788:	2200      	movs	r2, #0
 800078a:	2100      	movs	r1, #0
 800078c:	f001 fbc0 	bl	8001f10 <xQueueGenericSend>
  {
 8000790:	e7c8      	b.n	8000724 <StartTask02+0x8>
 8000792:	bf00      	nop
 8000794:	20004948 	.word	0x20004948
 8000798:	20004938 	.word	0x20004938
 800079c:	40020400 	.word	0x40020400

080007a0 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  unsigned int data;
	  if (uxQueueMessagesWaiting(q2) > 1)
 80007a8:	4b1b      	ldr	r3, [pc, #108]	; (8000818 <StartTask03+0x78>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4618      	mov	r0, r3
 80007ae:	f001 ff21 	bl	80025f4 <uxQueueMessagesWaiting>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d9f7      	bls.n	80007a8 <StartTask03+0x8>
	  {
		  xQueueReceive(q2, &(data), 500);
 80007b8:	4b17      	ldr	r3, [pc, #92]	; (8000818 <StartTask03+0x78>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f107 0108 	add.w	r1, r7, #8
 80007c0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80007c4:	4618      	mov	r0, r3
 80007c6:	f001 fd31 	bl	800222c <xQueueReceive>
		  if (xSemaphore != NULL)
 80007ca:	4b14      	ldr	r3, [pc, #80]	; (800081c <StartTask03+0x7c>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d0ea      	beq.n	80007a8 <StartTask03+0x8>
		  {

			  xSemaphoreTake(xSemaphore, portMAX_DELAY);
 80007d2:	4b12      	ldr	r3, [pc, #72]	; (800081c <StartTask03+0x7c>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f04f 31ff 	mov.w	r1, #4294967295
 80007da:	4618      	mov	r0, r3
 80007dc:	f001 fe02 	bl	80023e4 <xQueueSemaphoreTake>
				  for (int i = 0; i <= data; ++i)
 80007e0:	2300      	movs	r3, #0
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	e00b      	b.n	80007fe <StartTask03+0x5e>
				  		  {


				  				  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80007e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007ea:	480d      	ldr	r0, [pc, #52]	; (8000820 <StartTask03+0x80>)
 80007ec:	f000 fbd1 	bl	8000f92 <HAL_GPIO_TogglePin>
				  				  osDelay(500);
 80007f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007f4:	f001 f908 	bl	8001a08 <osDelay>
				  for (int i = 0; i <= data; ++i)
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	3301      	adds	r3, #1
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	68fa      	ldr	r2, [r7, #12]
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	429a      	cmp	r2, r3
 8000804:	d9ef      	bls.n	80007e6 <StartTask03+0x46>


				  		  }
				  xSemaphoreGive(xSemaphore);
 8000806:	4b05      	ldr	r3, [pc, #20]	; (800081c <StartTask03+0x7c>)
 8000808:	6818      	ldr	r0, [r3, #0]
 800080a:	2300      	movs	r3, #0
 800080c:	2200      	movs	r2, #0
 800080e:	2100      	movs	r1, #0
 8000810:	f001 fb7e 	bl	8001f10 <xQueueGenericSend>
  {
 8000814:	e7c8      	b.n	80007a8 <StartTask03+0x8>
 8000816:	bf00      	nop
 8000818:	20004934 	.word	0x20004934
 800081c:	20004938 	.word	0x20004938
 8000820:	40020400 	.word	0x40020400

08000824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
	...

08000834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	4b12      	ldr	r3, [pc, #72]	; (8000888 <HAL_MspInit+0x54>)
 8000840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000842:	4a11      	ldr	r2, [pc, #68]	; (8000888 <HAL_MspInit+0x54>)
 8000844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000848:	6453      	str	r3, [r2, #68]	; 0x44
 800084a:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <HAL_MspInit+0x54>)
 800084c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	603b      	str	r3, [r7, #0]
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <HAL_MspInit+0x54>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085e:	4a0a      	ldr	r2, [pc, #40]	; (8000888 <HAL_MspInit+0x54>)
 8000860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000864:	6413      	str	r3, [r2, #64]	; 0x40
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <HAL_MspInit+0x54>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000872:	2200      	movs	r2, #0
 8000874:	210f      	movs	r1, #15
 8000876:	f06f 0001 	mvn.w	r0, #1
 800087a:	f000 f99e 	bl	8000bba <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40023800 	.word	0x40023800

0800088c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr

0800089a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800089e:	e7fe      	b.n	800089e <HardFault_Handler+0x4>

080008a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <MemManage_Handler+0x4>

080008a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008aa:	e7fe      	b.n	80008aa <BusFault_Handler+0x4>

080008ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <UsageFault_Handler+0x4>

080008b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr

080008c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008c4:	f000 f89c 	bl	8000a00 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80008c8:	f002 fe3e 	bl	8003548 <xTaskGetSchedulerState>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d001      	beq.n	80008d6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80008d2:	f003 fd11 	bl	80042f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008e0:	4b08      	ldr	r3, [pc, #32]	; (8000904 <SystemInit+0x28>)
 80008e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008e6:	4a07      	ldr	r2, [pc, #28]	; (8000904 <SystemInit+0x28>)
 80008e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008f0:	4b04      	ldr	r3, [pc, #16]	; (8000904 <SystemInit+0x28>)
 80008f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008f6:	609a      	str	r2, [r3, #8]
#endif
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000908:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000940 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800090c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800090e:	e003      	b.n	8000918 <LoopCopyDataInit>

08000910 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000912:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000914:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000916:	3104      	adds	r1, #4

08000918 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000918:	480b      	ldr	r0, [pc, #44]	; (8000948 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800091a:	4b0c      	ldr	r3, [pc, #48]	; (800094c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800091c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800091e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000920:	d3f6      	bcc.n	8000910 <CopyDataInit>
  ldr  r2, =_sbss
 8000922:	4a0b      	ldr	r2, [pc, #44]	; (8000950 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000924:	e002      	b.n	800092c <LoopFillZerobss>

08000926 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000926:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000928:	f842 3b04 	str.w	r3, [r2], #4

0800092c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800092c:	4b09      	ldr	r3, [pc, #36]	; (8000954 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800092e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000930:	d3f9      	bcc.n	8000926 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000932:	f7ff ffd3 	bl	80008dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000936:	f003 ff41 	bl	80047bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800093a:	f7ff fdd9 	bl	80004f0 <main>
  bx  lr    
 800093e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000940:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000944:	08004900 	.word	0x08004900
  ldr  r0, =_sdata
 8000948:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800094c:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000950:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000954:	20004990 	.word	0x20004990

08000958 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000958:	e7fe      	b.n	8000958 <ADC_IRQHandler>
	...

0800095c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000960:	4b0e      	ldr	r3, [pc, #56]	; (800099c <HAL_Init+0x40>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a0d      	ldr	r2, [pc, #52]	; (800099c <HAL_Init+0x40>)
 8000966:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800096a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800096c:	4b0b      	ldr	r3, [pc, #44]	; (800099c <HAL_Init+0x40>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a0a      	ldr	r2, [pc, #40]	; (800099c <HAL_Init+0x40>)
 8000972:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000976:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000978:	4b08      	ldr	r3, [pc, #32]	; (800099c <HAL_Init+0x40>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a07      	ldr	r2, [pc, #28]	; (800099c <HAL_Init+0x40>)
 800097e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000982:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000984:	2003      	movs	r0, #3
 8000986:	f000 f90d 	bl	8000ba4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800098a:	200f      	movs	r0, #15
 800098c:	f000 f808 	bl	80009a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000990:	f7ff ff50 	bl	8000834 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000994:	2300      	movs	r3, #0
}
 8000996:	4618      	mov	r0, r3
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40023c00 	.word	0x40023c00

080009a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009a8:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <HAL_InitTick+0x54>)
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <HAL_InitTick+0x58>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	4619      	mov	r1, r3
 80009b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80009be:	4618      	mov	r0, r3
 80009c0:	f000 f917 	bl	8000bf2 <HAL_SYSTICK_Config>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ca:	2301      	movs	r3, #1
 80009cc:	e00e      	b.n	80009ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2b0f      	cmp	r3, #15
 80009d2:	d80a      	bhi.n	80009ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d4:	2200      	movs	r2, #0
 80009d6:	6879      	ldr	r1, [r7, #4]
 80009d8:	f04f 30ff 	mov.w	r0, #4294967295
 80009dc:	f000 f8ed 	bl	8000bba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009e0:	4a06      	ldr	r2, [pc, #24]	; (80009fc <HAL_InitTick+0x5c>)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009e6:	2300      	movs	r3, #0
 80009e8:	e000      	b.n	80009ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009ea:	2301      	movs	r3, #1
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20000000 	.word	0x20000000
 80009f8:	20000008 	.word	0x20000008
 80009fc:	20000004 	.word	0x20000004

08000a00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <HAL_IncTick+0x20>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	461a      	mov	r2, r3
 8000a0a:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <HAL_IncTick+0x24>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4413      	add	r3, r2
 8000a10:	4a04      	ldr	r2, [pc, #16]	; (8000a24 <HAL_IncTick+0x24>)
 8000a12:	6013      	str	r3, [r2, #0]
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	20000008 	.word	0x20000008
 8000a24:	2000494c 	.word	0x2000494c

08000a28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a2c:	4b03      	ldr	r3, [pc, #12]	; (8000a3c <HAL_GetTick+0x14>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	2000494c 	.word	0x2000494c

08000a40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <__NVIC_SetPriorityGrouping+0x44>)
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a56:	68ba      	ldr	r2, [r7, #8]
 8000a58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a72:	4a04      	ldr	r2, [pc, #16]	; (8000a84 <__NVIC_SetPriorityGrouping+0x44>)
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	60d3      	str	r3, [r2, #12]
}
 8000a78:	bf00      	nop
 8000a7a:	3714      	adds	r7, #20
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a8c:	4b04      	ldr	r3, [pc, #16]	; (8000aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	0a1b      	lsrs	r3, r3, #8
 8000a92:	f003 0307 	and.w	r3, r3, #7
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	6039      	str	r1, [r7, #0]
 8000aae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	db0a      	blt.n	8000ace <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	b2da      	uxtb	r2, r3
 8000abc:	490c      	ldr	r1, [pc, #48]	; (8000af0 <__NVIC_SetPriority+0x4c>)
 8000abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac2:	0112      	lsls	r2, r2, #4
 8000ac4:	b2d2      	uxtb	r2, r2
 8000ac6:	440b      	add	r3, r1
 8000ac8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000acc:	e00a      	b.n	8000ae4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	b2da      	uxtb	r2, r3
 8000ad2:	4908      	ldr	r1, [pc, #32]	; (8000af4 <__NVIC_SetPriority+0x50>)
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	f003 030f 	and.w	r3, r3, #15
 8000ada:	3b04      	subs	r3, #4
 8000adc:	0112      	lsls	r2, r2, #4
 8000ade:	b2d2      	uxtb	r2, r2
 8000ae0:	440b      	add	r3, r1
 8000ae2:	761a      	strb	r2, [r3, #24]
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	e000e100 	.word	0xe000e100
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b089      	sub	sp, #36	; 0x24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	f003 0307 	and.w	r3, r3, #7
 8000b0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b0c:	69fb      	ldr	r3, [r7, #28]
 8000b0e:	f1c3 0307 	rsb	r3, r3, #7
 8000b12:	2b04      	cmp	r3, #4
 8000b14:	bf28      	it	cs
 8000b16:	2304      	movcs	r3, #4
 8000b18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	3304      	adds	r3, #4
 8000b1e:	2b06      	cmp	r3, #6
 8000b20:	d902      	bls.n	8000b28 <NVIC_EncodePriority+0x30>
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	3b03      	subs	r3, #3
 8000b26:	e000      	b.n	8000b2a <NVIC_EncodePriority+0x32>
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	fa02 f303 	lsl.w	r3, r2, r3
 8000b36:	43da      	mvns	r2, r3
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	401a      	ands	r2, r3
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b40:	f04f 31ff 	mov.w	r1, #4294967295
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	fa01 f303 	lsl.w	r3, r1, r3
 8000b4a:	43d9      	mvns	r1, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b50:	4313      	orrs	r3, r2
         );
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3724      	adds	r7, #36	; 0x24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
	...

08000b60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	3b01      	subs	r3, #1
 8000b6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b70:	d301      	bcc.n	8000b76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b72:	2301      	movs	r3, #1
 8000b74:	e00f      	b.n	8000b96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b76:	4a0a      	ldr	r2, [pc, #40]	; (8000ba0 <SysTick_Config+0x40>)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	3b01      	subs	r3, #1
 8000b7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b7e:	210f      	movs	r1, #15
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295
 8000b84:	f7ff ff8e 	bl	8000aa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b88:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <SysTick_Config+0x40>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b8e:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <SysTick_Config+0x40>)
 8000b90:	2207      	movs	r2, #7
 8000b92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b94:	2300      	movs	r3, #0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	e000e010 	.word	0xe000e010

08000ba4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f7ff ff47 	bl	8000a40 <__NVIC_SetPriorityGrouping>
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b086      	sub	sp, #24
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	60b9      	str	r1, [r7, #8]
 8000bc4:	607a      	str	r2, [r7, #4]
 8000bc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bcc:	f7ff ff5c 	bl	8000a88 <__NVIC_GetPriorityGrouping>
 8000bd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bd2:	687a      	ldr	r2, [r7, #4]
 8000bd4:	68b9      	ldr	r1, [r7, #8]
 8000bd6:	6978      	ldr	r0, [r7, #20]
 8000bd8:	f7ff ff8e 	bl	8000af8 <NVIC_EncodePriority>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000be2:	4611      	mov	r1, r2
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff ff5d 	bl	8000aa4 <__NVIC_SetPriority>
}
 8000bea:	bf00      	nop
 8000bec:	3718      	adds	r7, #24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b082      	sub	sp, #8
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f7ff ffb0 	bl	8000b60 <SysTick_Config>
 8000c00:	4603      	mov	r3, r0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
	...

08000c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b089      	sub	sp, #36	; 0x24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]
 8000c26:	e177      	b.n	8000f18 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c28:	2201      	movs	r2, #1
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	697a      	ldr	r2, [r7, #20]
 8000c38:	4013      	ands	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f040 8166 	bne.w	8000f12 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d00b      	beq.n	8000c66 <HAL_GPIO_Init+0x5a>
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d007      	beq.n	8000c66 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c5a:	2b11      	cmp	r3, #17
 8000c5c:	d003      	beq.n	8000c66 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	2b12      	cmp	r3, #18
 8000c64:	d130      	bne.n	8000cc8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	2203      	movs	r2, #3
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	43db      	mvns	r3, r3
 8000c78:	69ba      	ldr	r2, [r7, #24]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	68da      	ldr	r2, [r3, #12]
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	69ba      	ldr	r2, [r7, #24]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	69ba      	ldr	r2, [r7, #24]
 8000c94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	69ba      	ldr	r2, [r7, #24]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	091b      	lsrs	r3, r3, #4
 8000cb2:	f003 0201 	and.w	r2, r3, #1
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	69ba      	ldr	r2, [r7, #24]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	2203      	movs	r2, #3
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	689a      	ldr	r2, [r3, #8]
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	d003      	beq.n	8000d08 <HAL_GPIO_Init+0xfc>
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	2b12      	cmp	r3, #18
 8000d06:	d123      	bne.n	8000d50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	08da      	lsrs	r2, r3, #3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	3208      	adds	r2, #8
 8000d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	f003 0307 	and.w	r3, r3, #7
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	220f      	movs	r2, #15
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	691a      	ldr	r2, [r3, #16]
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	08da      	lsrs	r2, r3, #3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	3208      	adds	r2, #8
 8000d4a:	69b9      	ldr	r1, [r7, #24]
 8000d4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	2203      	movs	r2, #3
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	43db      	mvns	r3, r3
 8000d62:	69ba      	ldr	r2, [r7, #24]
 8000d64:	4013      	ands	r3, r2
 8000d66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f003 0203 	and.w	r2, r3, #3
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	f000 80c0 	beq.w	8000f12 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	4b65      	ldr	r3, [pc, #404]	; (8000f2c <HAL_GPIO_Init+0x320>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	4a64      	ldr	r2, [pc, #400]	; (8000f2c <HAL_GPIO_Init+0x320>)
 8000d9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da0:	6453      	str	r3, [r2, #68]	; 0x44
 8000da2:	4b62      	ldr	r3, [pc, #392]	; (8000f2c <HAL_GPIO_Init+0x320>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dae:	4a60      	ldr	r2, [pc, #384]	; (8000f30 <HAL_GPIO_Init+0x324>)
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	089b      	lsrs	r3, r3, #2
 8000db4:	3302      	adds	r3, #2
 8000db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	f003 0303 	and.w	r3, r3, #3
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	220f      	movs	r2, #15
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a57      	ldr	r2, [pc, #348]	; (8000f34 <HAL_GPIO_Init+0x328>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d037      	beq.n	8000e4a <HAL_GPIO_Init+0x23e>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a56      	ldr	r2, [pc, #344]	; (8000f38 <HAL_GPIO_Init+0x32c>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d031      	beq.n	8000e46 <HAL_GPIO_Init+0x23a>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a55      	ldr	r2, [pc, #340]	; (8000f3c <HAL_GPIO_Init+0x330>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d02b      	beq.n	8000e42 <HAL_GPIO_Init+0x236>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a54      	ldr	r2, [pc, #336]	; (8000f40 <HAL_GPIO_Init+0x334>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d025      	beq.n	8000e3e <HAL_GPIO_Init+0x232>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a53      	ldr	r2, [pc, #332]	; (8000f44 <HAL_GPIO_Init+0x338>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d01f      	beq.n	8000e3a <HAL_GPIO_Init+0x22e>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a52      	ldr	r2, [pc, #328]	; (8000f48 <HAL_GPIO_Init+0x33c>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d019      	beq.n	8000e36 <HAL_GPIO_Init+0x22a>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a51      	ldr	r2, [pc, #324]	; (8000f4c <HAL_GPIO_Init+0x340>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d013      	beq.n	8000e32 <HAL_GPIO_Init+0x226>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a50      	ldr	r2, [pc, #320]	; (8000f50 <HAL_GPIO_Init+0x344>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d00d      	beq.n	8000e2e <HAL_GPIO_Init+0x222>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a4f      	ldr	r2, [pc, #316]	; (8000f54 <HAL_GPIO_Init+0x348>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d007      	beq.n	8000e2a <HAL_GPIO_Init+0x21e>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a4e      	ldr	r2, [pc, #312]	; (8000f58 <HAL_GPIO_Init+0x34c>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d101      	bne.n	8000e26 <HAL_GPIO_Init+0x21a>
 8000e22:	2309      	movs	r3, #9
 8000e24:	e012      	b.n	8000e4c <HAL_GPIO_Init+0x240>
 8000e26:	230a      	movs	r3, #10
 8000e28:	e010      	b.n	8000e4c <HAL_GPIO_Init+0x240>
 8000e2a:	2308      	movs	r3, #8
 8000e2c:	e00e      	b.n	8000e4c <HAL_GPIO_Init+0x240>
 8000e2e:	2307      	movs	r3, #7
 8000e30:	e00c      	b.n	8000e4c <HAL_GPIO_Init+0x240>
 8000e32:	2306      	movs	r3, #6
 8000e34:	e00a      	b.n	8000e4c <HAL_GPIO_Init+0x240>
 8000e36:	2305      	movs	r3, #5
 8000e38:	e008      	b.n	8000e4c <HAL_GPIO_Init+0x240>
 8000e3a:	2304      	movs	r3, #4
 8000e3c:	e006      	b.n	8000e4c <HAL_GPIO_Init+0x240>
 8000e3e:	2303      	movs	r3, #3
 8000e40:	e004      	b.n	8000e4c <HAL_GPIO_Init+0x240>
 8000e42:	2302      	movs	r3, #2
 8000e44:	e002      	b.n	8000e4c <HAL_GPIO_Init+0x240>
 8000e46:	2301      	movs	r3, #1
 8000e48:	e000      	b.n	8000e4c <HAL_GPIO_Init+0x240>
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	69fa      	ldr	r2, [r7, #28]
 8000e4e:	f002 0203 	and.w	r2, r2, #3
 8000e52:	0092      	lsls	r2, r2, #2
 8000e54:	4093      	lsls	r3, r2
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e5c:	4934      	ldr	r1, [pc, #208]	; (8000f30 <HAL_GPIO_Init+0x324>)
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	089b      	lsrs	r3, r3, #2
 8000e62:	3302      	adds	r3, #2
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e6a:	4b3c      	ldr	r3, [pc, #240]	; (8000f5c <HAL_GPIO_Init+0x350>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	43db      	mvns	r3, r3
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	4013      	ands	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d003      	beq.n	8000e8e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e8e:	4a33      	ldr	r2, [pc, #204]	; (8000f5c <HAL_GPIO_Init+0x350>)
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e94:	4b31      	ldr	r3, [pc, #196]	; (8000f5c <HAL_GPIO_Init+0x350>)
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d003      	beq.n	8000eb8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000eb8:	4a28      	ldr	r2, [pc, #160]	; (8000f5c <HAL_GPIO_Init+0x350>)
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ebe:	4b27      	ldr	r3, [pc, #156]	; (8000f5c <HAL_GPIO_Init+0x350>)
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d003      	beq.n	8000ee2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ee2:	4a1e      	ldr	r2, [pc, #120]	; (8000f5c <HAL_GPIO_Init+0x350>)
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ee8:	4b1c      	ldr	r3, [pc, #112]	; (8000f5c <HAL_GPIO_Init+0x350>)
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d003      	beq.n	8000f0c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f0c:	4a13      	ldr	r2, [pc, #76]	; (8000f5c <HAL_GPIO_Init+0x350>)
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3301      	adds	r3, #1
 8000f16:	61fb      	str	r3, [r7, #28]
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	2b0f      	cmp	r3, #15
 8000f1c:	f67f ae84 	bls.w	8000c28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f20:	bf00      	nop
 8000f22:	3724      	adds	r7, #36	; 0x24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	40013800 	.word	0x40013800
 8000f34:	40020000 	.word	0x40020000
 8000f38:	40020400 	.word	0x40020400
 8000f3c:	40020800 	.word	0x40020800
 8000f40:	40020c00 	.word	0x40020c00
 8000f44:	40021000 	.word	0x40021000
 8000f48:	40021400 	.word	0x40021400
 8000f4c:	40021800 	.word	0x40021800
 8000f50:	40021c00 	.word	0x40021c00
 8000f54:	40022000 	.word	0x40022000
 8000f58:	40022400 	.word	0x40022400
 8000f5c:	40013c00 	.word	0x40013c00

08000f60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	807b      	strh	r3, [r7, #2]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f70:	787b      	ldrb	r3, [r7, #1]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d003      	beq.n	8000f7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f76:	887a      	ldrh	r2, [r7, #2]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f7c:	e003      	b.n	8000f86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f7e:	887b      	ldrh	r3, [r7, #2]
 8000f80:	041a      	lsls	r2, r3, #16
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	619a      	str	r2, [r3, #24]
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b083      	sub	sp, #12
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	695a      	ldr	r2, [r3, #20]
 8000fa2:	887b      	ldrh	r3, [r7, #2]
 8000fa4:	401a      	ands	r2, r3
 8000fa6:	887b      	ldrh	r3, [r7, #2]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d104      	bne.n	8000fb6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000fac:	887b      	ldrh	r3, [r7, #2]
 8000fae:	041a      	lsls	r2, r3, #16
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000fb4:	e002      	b.n	8000fbc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000fb6:	887a      	ldrh	r2, [r7, #2]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	619a      	str	r2, [r3, #24]
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d101      	bne.n	8000fda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e25b      	b.n	8001492 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d075      	beq.n	80010d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fe6:	4ba3      	ldr	r3, [pc, #652]	; (8001274 <HAL_RCC_OscConfig+0x2ac>)
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	f003 030c 	and.w	r3, r3, #12
 8000fee:	2b04      	cmp	r3, #4
 8000ff0:	d00c      	beq.n	800100c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ff2:	4ba0      	ldr	r3, [pc, #640]	; (8001274 <HAL_RCC_OscConfig+0x2ac>)
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ffa:	2b08      	cmp	r3, #8
 8000ffc:	d112      	bne.n	8001024 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ffe:	4b9d      	ldr	r3, [pc, #628]	; (8001274 <HAL_RCC_OscConfig+0x2ac>)
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001006:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800100a:	d10b      	bne.n	8001024 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800100c:	4b99      	ldr	r3, [pc, #612]	; (8001274 <HAL_RCC_OscConfig+0x2ac>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001014:	2b00      	cmp	r3, #0
 8001016:	d05b      	beq.n	80010d0 <HAL_RCC_OscConfig+0x108>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d157      	bne.n	80010d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	e236      	b.n	8001492 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800102c:	d106      	bne.n	800103c <HAL_RCC_OscConfig+0x74>
 800102e:	4b91      	ldr	r3, [pc, #580]	; (8001274 <HAL_RCC_OscConfig+0x2ac>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a90      	ldr	r2, [pc, #576]	; (8001274 <HAL_RCC_OscConfig+0x2ac>)
 8001034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001038:	6013      	str	r3, [r2, #0]
 800103a:	e01d      	b.n	8001078 <HAL_RCC_OscConfig+0xb0>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001044:	d10c      	bne.n	8001060 <HAL_RCC_OscConfig+0x98>
 8001046:	4b8b      	ldr	r3, [pc, #556]	; (8001274 <HAL_RCC_OscConfig+0x2ac>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a8a      	ldr	r2, [pc, #552]	; (8001274 <HAL_RCC_OscConfig+0x2ac>)
 800104c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001050:	6013      	str	r3, [r2, #0]
 8001052:	4b88      	ldr	r3, [pc, #544]	; (8001274 <HAL_RCC_OscConfig+0x2ac>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a87      	ldr	r2, [pc, #540]	; (8001274 <HAL_RCC_OscConfig+0x2ac>)
 8001058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800105c:	6013      	str	r3, [r2, #0]
 800105e:	e00b      	b.n	8001078 <HAL_RCC_OscConfig+0xb0>
 8001060:	4b84      	ldr	r3, [pc, #528]	; (8001274 <HAL_RCC_OscConfig+0x2ac>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a83      	ldr	r2, [pc, #524]	; (8001274 <HAL_RCC_OscConfig+0x2ac>)
 8001066:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800106a:	6013      	str	r3, [r2, #0]
 800106c:	4b81      	ldr	r3, [pc, #516]	; (8001274 <HAL_RCC_OscConfig+0x2ac>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a80      	ldr	r2, [pc, #512]	; (8001274 <HAL_RCC_OscConfig+0x2ac>)
 8001072:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001076:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d013      	beq.n	80010a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001080:	f7ff fcd2 	bl	8000a28 <HAL_GetTick>
 8001084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001086:	e008      	b.n	800109a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001088:	f7ff fcce 	bl	8000a28 <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	2b64      	cmp	r3, #100	; 0x64
 8001094:	d901      	bls.n	800109a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001096:	2303      	movs	r3, #3
 8001098:	e1fb      	b.n	8001492 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800109a:	4b76      	ldr	r3, [pc, #472]	; (8001274 <HAL_RCC_OscConfig+0x2ac>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d0f0      	beq.n	8001088 <HAL_RCC_OscConfig+0xc0>
 80010a6:	e014      	b.n	80010d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a8:	f7ff fcbe 	bl	8000a28 <HAL_GetTick>
 80010ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ae:	e008      	b.n	80010c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010b0:	f7ff fcba 	bl	8000a28 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	2b64      	cmp	r3, #100	; 0x64
 80010bc:	d901      	bls.n	80010c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010be:	2303      	movs	r3, #3
 80010c0:	e1e7      	b.n	8001492 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010c2:	4b6c      	ldr	r3, [pc, #432]	; (8001274 <HAL_RCC_OscConfig+0x2ac>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d1f0      	bne.n	80010b0 <HAL_RCC_OscConfig+0xe8>
 80010ce:	e000      	b.n	80010d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d063      	beq.n	80011a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010de:	4b65      	ldr	r3, [pc, #404]	; (8001274 <HAL_RCC_OscConfig+0x2ac>)
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	f003 030c 	and.w	r3, r3, #12
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d00b      	beq.n	8001102 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010ea:	4b62      	ldr	r3, [pc, #392]	; (8001274 <HAL_RCC_OscConfig+0x2ac>)
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010f2:	2b08      	cmp	r3, #8
 80010f4:	d11c      	bne.n	8001130 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010f6:	4b5f      	ldr	r3, [pc, #380]	; (8001274 <HAL_RCC_OscConfig+0x2ac>)
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d116      	bne.n	8001130 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001102:	4b5c      	ldr	r3, [pc, #368]	; (8001274 <HAL_RCC_OscConfig+0x2ac>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	2b00      	cmp	r3, #0
 800110c:	d005      	beq.n	800111a <HAL_RCC_OscConfig+0x152>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d001      	beq.n	800111a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e1bb      	b.n	8001492 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800111a:	4b56      	ldr	r3, [pc, #344]	; (8001274 <HAL_RCC_OscConfig+0x2ac>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	691b      	ldr	r3, [r3, #16]
 8001126:	00db      	lsls	r3, r3, #3
 8001128:	4952      	ldr	r1, [pc, #328]	; (8001274 <HAL_RCC_OscConfig+0x2ac>)
 800112a:	4313      	orrs	r3, r2
 800112c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800112e:	e03a      	b.n	80011a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d020      	beq.n	800117a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001138:	4b4f      	ldr	r3, [pc, #316]	; (8001278 <HAL_RCC_OscConfig+0x2b0>)
 800113a:	2201      	movs	r2, #1
 800113c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800113e:	f7ff fc73 	bl	8000a28 <HAL_GetTick>
 8001142:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001144:	e008      	b.n	8001158 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001146:	f7ff fc6f 	bl	8000a28 <HAL_GetTick>
 800114a:	4602      	mov	r2, r0
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	2b02      	cmp	r3, #2
 8001152:	d901      	bls.n	8001158 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001154:	2303      	movs	r3, #3
 8001156:	e19c      	b.n	8001492 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001158:	4b46      	ldr	r3, [pc, #280]	; (8001274 <HAL_RCC_OscConfig+0x2ac>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0302 	and.w	r3, r3, #2
 8001160:	2b00      	cmp	r3, #0
 8001162:	d0f0      	beq.n	8001146 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001164:	4b43      	ldr	r3, [pc, #268]	; (8001274 <HAL_RCC_OscConfig+0x2ac>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	691b      	ldr	r3, [r3, #16]
 8001170:	00db      	lsls	r3, r3, #3
 8001172:	4940      	ldr	r1, [pc, #256]	; (8001274 <HAL_RCC_OscConfig+0x2ac>)
 8001174:	4313      	orrs	r3, r2
 8001176:	600b      	str	r3, [r1, #0]
 8001178:	e015      	b.n	80011a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800117a:	4b3f      	ldr	r3, [pc, #252]	; (8001278 <HAL_RCC_OscConfig+0x2b0>)
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001180:	f7ff fc52 	bl	8000a28 <HAL_GetTick>
 8001184:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001186:	e008      	b.n	800119a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001188:	f7ff fc4e 	bl	8000a28 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	2b02      	cmp	r3, #2
 8001194:	d901      	bls.n	800119a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e17b      	b.n	8001492 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800119a:	4b36      	ldr	r3, [pc, #216]	; (8001274 <HAL_RCC_OscConfig+0x2ac>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d1f0      	bne.n	8001188 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0308 	and.w	r3, r3, #8
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d030      	beq.n	8001214 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	695b      	ldr	r3, [r3, #20]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d016      	beq.n	80011e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011ba:	4b30      	ldr	r3, [pc, #192]	; (800127c <HAL_RCC_OscConfig+0x2b4>)
 80011bc:	2201      	movs	r2, #1
 80011be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011c0:	f7ff fc32 	bl	8000a28 <HAL_GetTick>
 80011c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011c6:	e008      	b.n	80011da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011c8:	f7ff fc2e 	bl	8000a28 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d901      	bls.n	80011da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e15b      	b.n	8001492 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011da:	4b26      	ldr	r3, [pc, #152]	; (8001274 <HAL_RCC_OscConfig+0x2ac>)
 80011dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d0f0      	beq.n	80011c8 <HAL_RCC_OscConfig+0x200>
 80011e6:	e015      	b.n	8001214 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011e8:	4b24      	ldr	r3, [pc, #144]	; (800127c <HAL_RCC_OscConfig+0x2b4>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ee:	f7ff fc1b 	bl	8000a28 <HAL_GetTick>
 80011f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011f4:	e008      	b.n	8001208 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011f6:	f7ff fc17 	bl	8000a28 <HAL_GetTick>
 80011fa:	4602      	mov	r2, r0
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	2b02      	cmp	r3, #2
 8001202:	d901      	bls.n	8001208 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001204:	2303      	movs	r3, #3
 8001206:	e144      	b.n	8001492 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001208:	4b1a      	ldr	r3, [pc, #104]	; (8001274 <HAL_RCC_OscConfig+0x2ac>)
 800120a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d1f0      	bne.n	80011f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0304 	and.w	r3, r3, #4
 800121c:	2b00      	cmp	r3, #0
 800121e:	f000 80a0 	beq.w	8001362 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001222:	2300      	movs	r3, #0
 8001224:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001226:	4b13      	ldr	r3, [pc, #76]	; (8001274 <HAL_RCC_OscConfig+0x2ac>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d10f      	bne.n	8001252 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <HAL_RCC_OscConfig+0x2ac>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	4a0e      	ldr	r2, [pc, #56]	; (8001274 <HAL_RCC_OscConfig+0x2ac>)
 800123c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001240:	6413      	str	r3, [r2, #64]	; 0x40
 8001242:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <HAL_RCC_OscConfig+0x2ac>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800124e:	2301      	movs	r3, #1
 8001250:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001252:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <HAL_RCC_OscConfig+0x2b8>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800125a:	2b00      	cmp	r3, #0
 800125c:	d121      	bne.n	80012a2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800125e:	4b08      	ldr	r3, [pc, #32]	; (8001280 <HAL_RCC_OscConfig+0x2b8>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a07      	ldr	r2, [pc, #28]	; (8001280 <HAL_RCC_OscConfig+0x2b8>)
 8001264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001268:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800126a:	f7ff fbdd 	bl	8000a28 <HAL_GetTick>
 800126e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001270:	e011      	b.n	8001296 <HAL_RCC_OscConfig+0x2ce>
 8001272:	bf00      	nop
 8001274:	40023800 	.word	0x40023800
 8001278:	42470000 	.word	0x42470000
 800127c:	42470e80 	.word	0x42470e80
 8001280:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001284:	f7ff fbd0 	bl	8000a28 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b02      	cmp	r3, #2
 8001290:	d901      	bls.n	8001296 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e0fd      	b.n	8001492 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001296:	4b81      	ldr	r3, [pc, #516]	; (800149c <HAL_RCC_OscConfig+0x4d4>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d0f0      	beq.n	8001284 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d106      	bne.n	80012b8 <HAL_RCC_OscConfig+0x2f0>
 80012aa:	4b7d      	ldr	r3, [pc, #500]	; (80014a0 <HAL_RCC_OscConfig+0x4d8>)
 80012ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012ae:	4a7c      	ldr	r2, [pc, #496]	; (80014a0 <HAL_RCC_OscConfig+0x4d8>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	6713      	str	r3, [r2, #112]	; 0x70
 80012b6:	e01c      	b.n	80012f2 <HAL_RCC_OscConfig+0x32a>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	2b05      	cmp	r3, #5
 80012be:	d10c      	bne.n	80012da <HAL_RCC_OscConfig+0x312>
 80012c0:	4b77      	ldr	r3, [pc, #476]	; (80014a0 <HAL_RCC_OscConfig+0x4d8>)
 80012c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012c4:	4a76      	ldr	r2, [pc, #472]	; (80014a0 <HAL_RCC_OscConfig+0x4d8>)
 80012c6:	f043 0304 	orr.w	r3, r3, #4
 80012ca:	6713      	str	r3, [r2, #112]	; 0x70
 80012cc:	4b74      	ldr	r3, [pc, #464]	; (80014a0 <HAL_RCC_OscConfig+0x4d8>)
 80012ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012d0:	4a73      	ldr	r2, [pc, #460]	; (80014a0 <HAL_RCC_OscConfig+0x4d8>)
 80012d2:	f043 0301 	orr.w	r3, r3, #1
 80012d6:	6713      	str	r3, [r2, #112]	; 0x70
 80012d8:	e00b      	b.n	80012f2 <HAL_RCC_OscConfig+0x32a>
 80012da:	4b71      	ldr	r3, [pc, #452]	; (80014a0 <HAL_RCC_OscConfig+0x4d8>)
 80012dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012de:	4a70      	ldr	r2, [pc, #448]	; (80014a0 <HAL_RCC_OscConfig+0x4d8>)
 80012e0:	f023 0301 	bic.w	r3, r3, #1
 80012e4:	6713      	str	r3, [r2, #112]	; 0x70
 80012e6:	4b6e      	ldr	r3, [pc, #440]	; (80014a0 <HAL_RCC_OscConfig+0x4d8>)
 80012e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012ea:	4a6d      	ldr	r2, [pc, #436]	; (80014a0 <HAL_RCC_OscConfig+0x4d8>)
 80012ec:	f023 0304 	bic.w	r3, r3, #4
 80012f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d015      	beq.n	8001326 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012fa:	f7ff fb95 	bl	8000a28 <HAL_GetTick>
 80012fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001300:	e00a      	b.n	8001318 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001302:	f7ff fb91 	bl	8000a28 <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001310:	4293      	cmp	r3, r2
 8001312:	d901      	bls.n	8001318 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e0bc      	b.n	8001492 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001318:	4b61      	ldr	r3, [pc, #388]	; (80014a0 <HAL_RCC_OscConfig+0x4d8>)
 800131a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800131c:	f003 0302 	and.w	r3, r3, #2
 8001320:	2b00      	cmp	r3, #0
 8001322:	d0ee      	beq.n	8001302 <HAL_RCC_OscConfig+0x33a>
 8001324:	e014      	b.n	8001350 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001326:	f7ff fb7f 	bl	8000a28 <HAL_GetTick>
 800132a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800132c:	e00a      	b.n	8001344 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800132e:	f7ff fb7b 	bl	8000a28 <HAL_GetTick>
 8001332:	4602      	mov	r2, r0
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	f241 3288 	movw	r2, #5000	; 0x1388
 800133c:	4293      	cmp	r3, r2
 800133e:	d901      	bls.n	8001344 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e0a6      	b.n	8001492 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001344:	4b56      	ldr	r3, [pc, #344]	; (80014a0 <HAL_RCC_OscConfig+0x4d8>)
 8001346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001348:	f003 0302 	and.w	r3, r3, #2
 800134c:	2b00      	cmp	r3, #0
 800134e:	d1ee      	bne.n	800132e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001350:	7dfb      	ldrb	r3, [r7, #23]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d105      	bne.n	8001362 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001356:	4b52      	ldr	r3, [pc, #328]	; (80014a0 <HAL_RCC_OscConfig+0x4d8>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	4a51      	ldr	r2, [pc, #324]	; (80014a0 <HAL_RCC_OscConfig+0x4d8>)
 800135c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001360:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	2b00      	cmp	r3, #0
 8001368:	f000 8092 	beq.w	8001490 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800136c:	4b4c      	ldr	r3, [pc, #304]	; (80014a0 <HAL_RCC_OscConfig+0x4d8>)
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	f003 030c 	and.w	r3, r3, #12
 8001374:	2b08      	cmp	r3, #8
 8001376:	d05c      	beq.n	8001432 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	2b02      	cmp	r3, #2
 800137e:	d141      	bne.n	8001404 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001380:	4b48      	ldr	r3, [pc, #288]	; (80014a4 <HAL_RCC_OscConfig+0x4dc>)
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001386:	f7ff fb4f 	bl	8000a28 <HAL_GetTick>
 800138a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800138c:	e008      	b.n	80013a0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800138e:	f7ff fb4b 	bl	8000a28 <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e078      	b.n	8001492 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013a0:	4b3f      	ldr	r3, [pc, #252]	; (80014a0 <HAL_RCC_OscConfig+0x4d8>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1f0      	bne.n	800138e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	69da      	ldr	r2, [r3, #28]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a1b      	ldr	r3, [r3, #32]
 80013b4:	431a      	orrs	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ba:	019b      	lsls	r3, r3, #6
 80013bc:	431a      	orrs	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c2:	085b      	lsrs	r3, r3, #1
 80013c4:	3b01      	subs	r3, #1
 80013c6:	041b      	lsls	r3, r3, #16
 80013c8:	431a      	orrs	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ce:	061b      	lsls	r3, r3, #24
 80013d0:	4933      	ldr	r1, [pc, #204]	; (80014a0 <HAL_RCC_OscConfig+0x4d8>)
 80013d2:	4313      	orrs	r3, r2
 80013d4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013d6:	4b33      	ldr	r3, [pc, #204]	; (80014a4 <HAL_RCC_OscConfig+0x4dc>)
 80013d8:	2201      	movs	r2, #1
 80013da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013dc:	f7ff fb24 	bl	8000a28 <HAL_GetTick>
 80013e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013e4:	f7ff fb20 	bl	8000a28 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e04d      	b.n	8001492 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013f6:	4b2a      	ldr	r3, [pc, #168]	; (80014a0 <HAL_RCC_OscConfig+0x4d8>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d0f0      	beq.n	80013e4 <HAL_RCC_OscConfig+0x41c>
 8001402:	e045      	b.n	8001490 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001404:	4b27      	ldr	r3, [pc, #156]	; (80014a4 <HAL_RCC_OscConfig+0x4dc>)
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140a:	f7ff fb0d 	bl	8000a28 <HAL_GetTick>
 800140e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001410:	e008      	b.n	8001424 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001412:	f7ff fb09 	bl	8000a28 <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d901      	bls.n	8001424 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e036      	b.n	8001492 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001424:	4b1e      	ldr	r3, [pc, #120]	; (80014a0 <HAL_RCC_OscConfig+0x4d8>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d1f0      	bne.n	8001412 <HAL_RCC_OscConfig+0x44a>
 8001430:	e02e      	b.n	8001490 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d101      	bne.n	800143e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e029      	b.n	8001492 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800143e:	4b18      	ldr	r3, [pc, #96]	; (80014a0 <HAL_RCC_OscConfig+0x4d8>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	429a      	cmp	r2, r3
 8001450:	d11c      	bne.n	800148c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800145c:	429a      	cmp	r2, r3
 800145e:	d115      	bne.n	800148c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001460:	68fa      	ldr	r2, [r7, #12]
 8001462:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001466:	4013      	ands	r3, r2
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800146c:	4293      	cmp	r3, r2
 800146e:	d10d      	bne.n	800148c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800147a:	429a      	cmp	r2, r3
 800147c:	d106      	bne.n	800148c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001488:	429a      	cmp	r2, r3
 800148a:	d001      	beq.n	8001490 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e000      	b.n	8001492 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3718      	adds	r7, #24
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40007000 	.word	0x40007000
 80014a0:	40023800 	.word	0x40023800
 80014a4:	42470060 	.word	0x42470060

080014a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d101      	bne.n	80014bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e0cc      	b.n	8001656 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014bc:	4b68      	ldr	r3, [pc, #416]	; (8001660 <HAL_RCC_ClockConfig+0x1b8>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 030f 	and.w	r3, r3, #15
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d90c      	bls.n	80014e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ca:	4b65      	ldr	r3, [pc, #404]	; (8001660 <HAL_RCC_ClockConfig+0x1b8>)
 80014cc:	683a      	ldr	r2, [r7, #0]
 80014ce:	b2d2      	uxtb	r2, r2
 80014d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014d2:	4b63      	ldr	r3, [pc, #396]	; (8001660 <HAL_RCC_ClockConfig+0x1b8>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 030f 	and.w	r3, r3, #15
 80014da:	683a      	ldr	r2, [r7, #0]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d001      	beq.n	80014e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e0b8      	b.n	8001656 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0302 	and.w	r3, r3, #2
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d020      	beq.n	8001532 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0304 	and.w	r3, r3, #4
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d005      	beq.n	8001508 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014fc:	4b59      	ldr	r3, [pc, #356]	; (8001664 <HAL_RCC_ClockConfig+0x1bc>)
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	4a58      	ldr	r2, [pc, #352]	; (8001664 <HAL_RCC_ClockConfig+0x1bc>)
 8001502:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001506:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0308 	and.w	r3, r3, #8
 8001510:	2b00      	cmp	r3, #0
 8001512:	d005      	beq.n	8001520 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001514:	4b53      	ldr	r3, [pc, #332]	; (8001664 <HAL_RCC_ClockConfig+0x1bc>)
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	4a52      	ldr	r2, [pc, #328]	; (8001664 <HAL_RCC_ClockConfig+0x1bc>)
 800151a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800151e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001520:	4b50      	ldr	r3, [pc, #320]	; (8001664 <HAL_RCC_ClockConfig+0x1bc>)
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	494d      	ldr	r1, [pc, #308]	; (8001664 <HAL_RCC_ClockConfig+0x1bc>)
 800152e:	4313      	orrs	r3, r2
 8001530:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	2b00      	cmp	r3, #0
 800153c:	d044      	beq.n	80015c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d107      	bne.n	8001556 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001546:	4b47      	ldr	r3, [pc, #284]	; (8001664 <HAL_RCC_ClockConfig+0x1bc>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d119      	bne.n	8001586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e07f      	b.n	8001656 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	2b02      	cmp	r3, #2
 800155c:	d003      	beq.n	8001566 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001562:	2b03      	cmp	r3, #3
 8001564:	d107      	bne.n	8001576 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001566:	4b3f      	ldr	r3, [pc, #252]	; (8001664 <HAL_RCC_ClockConfig+0x1bc>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d109      	bne.n	8001586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e06f      	b.n	8001656 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001576:	4b3b      	ldr	r3, [pc, #236]	; (8001664 <HAL_RCC_ClockConfig+0x1bc>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d101      	bne.n	8001586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e067      	b.n	8001656 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001586:	4b37      	ldr	r3, [pc, #220]	; (8001664 <HAL_RCC_ClockConfig+0x1bc>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f023 0203 	bic.w	r2, r3, #3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	4934      	ldr	r1, [pc, #208]	; (8001664 <HAL_RCC_ClockConfig+0x1bc>)
 8001594:	4313      	orrs	r3, r2
 8001596:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001598:	f7ff fa46 	bl	8000a28 <HAL_GetTick>
 800159c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800159e:	e00a      	b.n	80015b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015a0:	f7ff fa42 	bl	8000a28 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e04f      	b.n	8001656 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015b6:	4b2b      	ldr	r3, [pc, #172]	; (8001664 <HAL_RCC_ClockConfig+0x1bc>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f003 020c 	and.w	r2, r3, #12
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d1eb      	bne.n	80015a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015c8:	4b25      	ldr	r3, [pc, #148]	; (8001660 <HAL_RCC_ClockConfig+0x1b8>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 030f 	and.w	r3, r3, #15
 80015d0:	683a      	ldr	r2, [r7, #0]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d20c      	bcs.n	80015f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015d6:	4b22      	ldr	r3, [pc, #136]	; (8001660 <HAL_RCC_ClockConfig+0x1b8>)
 80015d8:	683a      	ldr	r2, [r7, #0]
 80015da:	b2d2      	uxtb	r2, r2
 80015dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015de:	4b20      	ldr	r3, [pc, #128]	; (8001660 <HAL_RCC_ClockConfig+0x1b8>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 030f 	and.w	r3, r3, #15
 80015e6:	683a      	ldr	r2, [r7, #0]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d001      	beq.n	80015f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e032      	b.n	8001656 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0304 	and.w	r3, r3, #4
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d008      	beq.n	800160e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015fc:	4b19      	ldr	r3, [pc, #100]	; (8001664 <HAL_RCC_ClockConfig+0x1bc>)
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	4916      	ldr	r1, [pc, #88]	; (8001664 <HAL_RCC_ClockConfig+0x1bc>)
 800160a:	4313      	orrs	r3, r2
 800160c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0308 	and.w	r3, r3, #8
 8001616:	2b00      	cmp	r3, #0
 8001618:	d009      	beq.n	800162e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800161a:	4b12      	ldr	r3, [pc, #72]	; (8001664 <HAL_RCC_ClockConfig+0x1bc>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	490e      	ldr	r1, [pc, #56]	; (8001664 <HAL_RCC_ClockConfig+0x1bc>)
 800162a:	4313      	orrs	r3, r2
 800162c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800162e:	f000 f821 	bl	8001674 <HAL_RCC_GetSysClockFreq>
 8001632:	4601      	mov	r1, r0
 8001634:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <HAL_RCC_ClockConfig+0x1bc>)
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	091b      	lsrs	r3, r3, #4
 800163a:	f003 030f 	and.w	r3, r3, #15
 800163e:	4a0a      	ldr	r2, [pc, #40]	; (8001668 <HAL_RCC_ClockConfig+0x1c0>)
 8001640:	5cd3      	ldrb	r3, [r2, r3]
 8001642:	fa21 f303 	lsr.w	r3, r1, r3
 8001646:	4a09      	ldr	r2, [pc, #36]	; (800166c <HAL_RCC_ClockConfig+0x1c4>)
 8001648:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800164a:	4b09      	ldr	r3, [pc, #36]	; (8001670 <HAL_RCC_ClockConfig+0x1c8>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff f9a6 	bl	80009a0 <HAL_InitTick>

  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40023c00 	.word	0x40023c00
 8001664:	40023800 	.word	0x40023800
 8001668:	080048e0 	.word	0x080048e0
 800166c:	20000000 	.word	0x20000000
 8001670:	20000004 	.word	0x20000004

08001674 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800167a:	2300      	movs	r3, #0
 800167c:	607b      	str	r3, [r7, #4]
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	2300      	movs	r3, #0
 8001684:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001686:	2300      	movs	r3, #0
 8001688:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800168a:	4b50      	ldr	r3, [pc, #320]	; (80017cc <HAL_RCC_GetSysClockFreq+0x158>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f003 030c 	and.w	r3, r3, #12
 8001692:	2b04      	cmp	r3, #4
 8001694:	d007      	beq.n	80016a6 <HAL_RCC_GetSysClockFreq+0x32>
 8001696:	2b08      	cmp	r3, #8
 8001698:	d008      	beq.n	80016ac <HAL_RCC_GetSysClockFreq+0x38>
 800169a:	2b00      	cmp	r3, #0
 800169c:	f040 808d 	bne.w	80017ba <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016a0:	4b4b      	ldr	r3, [pc, #300]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80016a2:	60bb      	str	r3, [r7, #8]
       break;
 80016a4:	e08c      	b.n	80017c0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016a6:	4b4b      	ldr	r3, [pc, #300]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80016a8:	60bb      	str	r3, [r7, #8]
      break;
 80016aa:	e089      	b.n	80017c0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016ac:	4b47      	ldr	r3, [pc, #284]	; (80017cc <HAL_RCC_GetSysClockFreq+0x158>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016b4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016b6:	4b45      	ldr	r3, [pc, #276]	; (80017cc <HAL_RCC_GetSysClockFreq+0x158>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d023      	beq.n	800170a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016c2:	4b42      	ldr	r3, [pc, #264]	; (80017cc <HAL_RCC_GetSysClockFreq+0x158>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	099b      	lsrs	r3, r3, #6
 80016c8:	f04f 0400 	mov.w	r4, #0
 80016cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80016d0:	f04f 0200 	mov.w	r2, #0
 80016d4:	ea03 0501 	and.w	r5, r3, r1
 80016d8:	ea04 0602 	and.w	r6, r4, r2
 80016dc:	4a3d      	ldr	r2, [pc, #244]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80016de:	fb02 f106 	mul.w	r1, r2, r6
 80016e2:	2200      	movs	r2, #0
 80016e4:	fb02 f205 	mul.w	r2, r2, r5
 80016e8:	440a      	add	r2, r1
 80016ea:	493a      	ldr	r1, [pc, #232]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80016ec:	fba5 0101 	umull	r0, r1, r5, r1
 80016f0:	1853      	adds	r3, r2, r1
 80016f2:	4619      	mov	r1, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f04f 0400 	mov.w	r4, #0
 80016fa:	461a      	mov	r2, r3
 80016fc:	4623      	mov	r3, r4
 80016fe:	f7fe fd77 	bl	80001f0 <__aeabi_uldivmod>
 8001702:	4603      	mov	r3, r0
 8001704:	460c      	mov	r4, r1
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	e049      	b.n	800179e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800170a:	4b30      	ldr	r3, [pc, #192]	; (80017cc <HAL_RCC_GetSysClockFreq+0x158>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	099b      	lsrs	r3, r3, #6
 8001710:	f04f 0400 	mov.w	r4, #0
 8001714:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001718:	f04f 0200 	mov.w	r2, #0
 800171c:	ea03 0501 	and.w	r5, r3, r1
 8001720:	ea04 0602 	and.w	r6, r4, r2
 8001724:	4629      	mov	r1, r5
 8001726:	4632      	mov	r2, r6
 8001728:	f04f 0300 	mov.w	r3, #0
 800172c:	f04f 0400 	mov.w	r4, #0
 8001730:	0154      	lsls	r4, r2, #5
 8001732:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001736:	014b      	lsls	r3, r1, #5
 8001738:	4619      	mov	r1, r3
 800173a:	4622      	mov	r2, r4
 800173c:	1b49      	subs	r1, r1, r5
 800173e:	eb62 0206 	sbc.w	r2, r2, r6
 8001742:	f04f 0300 	mov.w	r3, #0
 8001746:	f04f 0400 	mov.w	r4, #0
 800174a:	0194      	lsls	r4, r2, #6
 800174c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001750:	018b      	lsls	r3, r1, #6
 8001752:	1a5b      	subs	r3, r3, r1
 8001754:	eb64 0402 	sbc.w	r4, r4, r2
 8001758:	f04f 0100 	mov.w	r1, #0
 800175c:	f04f 0200 	mov.w	r2, #0
 8001760:	00e2      	lsls	r2, r4, #3
 8001762:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001766:	00d9      	lsls	r1, r3, #3
 8001768:	460b      	mov	r3, r1
 800176a:	4614      	mov	r4, r2
 800176c:	195b      	adds	r3, r3, r5
 800176e:	eb44 0406 	adc.w	r4, r4, r6
 8001772:	f04f 0100 	mov.w	r1, #0
 8001776:	f04f 0200 	mov.w	r2, #0
 800177a:	02a2      	lsls	r2, r4, #10
 800177c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001780:	0299      	lsls	r1, r3, #10
 8001782:	460b      	mov	r3, r1
 8001784:	4614      	mov	r4, r2
 8001786:	4618      	mov	r0, r3
 8001788:	4621      	mov	r1, r4
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f04f 0400 	mov.w	r4, #0
 8001790:	461a      	mov	r2, r3
 8001792:	4623      	mov	r3, r4
 8001794:	f7fe fd2c 	bl	80001f0 <__aeabi_uldivmod>
 8001798:	4603      	mov	r3, r0
 800179a:	460c      	mov	r4, r1
 800179c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800179e:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <HAL_RCC_GetSysClockFreq+0x158>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	0c1b      	lsrs	r3, r3, #16
 80017a4:	f003 0303 	and.w	r3, r3, #3
 80017a8:	3301      	adds	r3, #1
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b6:	60bb      	str	r3, [r7, #8]
      break;
 80017b8:	e002      	b.n	80017c0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017ba:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80017bc:	60bb      	str	r3, [r7, #8]
      break;
 80017be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017c0:	68bb      	ldr	r3, [r7, #8]
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3714      	adds	r7, #20
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40023800 	.word	0x40023800
 80017d0:	00f42400 	.word	0x00f42400
 80017d4:	017d7840 	.word	0x017d7840

080017d8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
	...

080017e8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80017ee:	f3ef 8305 	mrs	r3, IPSR
 80017f2:	60bb      	str	r3, [r7, #8]
  return(result);
 80017f4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d10f      	bne.n	800181a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80017fa:	f3ef 8310 	mrs	r3, PRIMASK
 80017fe:	607b      	str	r3, [r7, #4]
  return(result);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d105      	bne.n	8001812 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001806:	f3ef 8311 	mrs	r3, BASEPRI
 800180a:	603b      	str	r3, [r7, #0]
  return(result);
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d007      	beq.n	8001822 <osKernelInitialize+0x3a>
 8001812:	4b0e      	ldr	r3, [pc, #56]	; (800184c <osKernelInitialize+0x64>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2b02      	cmp	r3, #2
 8001818:	d103      	bne.n	8001822 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800181a:	f06f 0305 	mvn.w	r3, #5
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	e00c      	b.n	800183c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001822:	4b0a      	ldr	r3, [pc, #40]	; (800184c <osKernelInitialize+0x64>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d105      	bne.n	8001836 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800182a:	4b08      	ldr	r3, [pc, #32]	; (800184c <osKernelInitialize+0x64>)
 800182c:	2201      	movs	r2, #1
 800182e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001830:	2300      	movs	r3, #0
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	e002      	b.n	800183c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001836:	f04f 33ff 	mov.w	r3, #4294967295
 800183a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800183c:	68fb      	ldr	r3, [r7, #12]
}
 800183e:	4618      	mov	r0, r3
 8001840:	3714      	adds	r7, #20
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	2000002c 	.word	0x2000002c

08001850 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001856:	f3ef 8305 	mrs	r3, IPSR
 800185a:	60bb      	str	r3, [r7, #8]
  return(result);
 800185c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800185e:	2b00      	cmp	r3, #0
 8001860:	d10f      	bne.n	8001882 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001862:	f3ef 8310 	mrs	r3, PRIMASK
 8001866:	607b      	str	r3, [r7, #4]
  return(result);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d105      	bne.n	800187a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800186e:	f3ef 8311 	mrs	r3, BASEPRI
 8001872:	603b      	str	r3, [r7, #0]
  return(result);
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d007      	beq.n	800188a <osKernelStart+0x3a>
 800187a:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <osKernelStart+0x68>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2b02      	cmp	r3, #2
 8001880:	d103      	bne.n	800188a <osKernelStart+0x3a>
    stat = osErrorISR;
 8001882:	f06f 0305 	mvn.w	r3, #5
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	e010      	b.n	80018ac <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800188a:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <osKernelStart+0x68>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d109      	bne.n	80018a6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001892:	f7ff ffa1 	bl	80017d8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001896:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <osKernelStart+0x68>)
 8001898:	2202      	movs	r2, #2
 800189a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800189c:	f001 fa1e 	bl	8002cdc <vTaskStartScheduler>
      stat = osOK;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	e002      	b.n	80018ac <osKernelStart+0x5c>
    } else {
      stat = osError;
 80018a6:	f04f 33ff 	mov.w	r3, #4294967295
 80018aa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80018ac:	68fb      	ldr	r3, [r7, #12]
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	2000002c 	.word	0x2000002c

080018bc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80018bc:	b580      	push	{r7, lr}
 80018be:	b090      	sub	sp, #64	; 0x40
 80018c0:	af04      	add	r7, sp, #16
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80018cc:	f3ef 8305 	mrs	r3, IPSR
 80018d0:	61fb      	str	r3, [r7, #28]
  return(result);
 80018d2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	f040 808f 	bne.w	80019f8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80018da:	f3ef 8310 	mrs	r3, PRIMASK
 80018de:	61bb      	str	r3, [r7, #24]
  return(result);
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d105      	bne.n	80018f2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80018e6:	f3ef 8311 	mrs	r3, BASEPRI
 80018ea:	617b      	str	r3, [r7, #20]
  return(result);
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <osThreadNew+0x3e>
 80018f2:	4b44      	ldr	r3, [pc, #272]	; (8001a04 <osThreadNew+0x148>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d07e      	beq.n	80019f8 <osThreadNew+0x13c>
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d07b      	beq.n	80019f8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8001900:	2380      	movs	r3, #128	; 0x80
 8001902:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8001904:	2318      	movs	r3, #24
 8001906:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8001908:	2300      	movs	r3, #0
 800190a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800190c:	f04f 33ff 	mov.w	r3, #4294967295
 8001910:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d045      	beq.n	80019a4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d002      	beq.n	8001926 <osThreadNew+0x6a>
        name = attr->name;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d002      	beq.n	8001934 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001936:	2b00      	cmp	r3, #0
 8001938:	d008      	beq.n	800194c <osThreadNew+0x90>
 800193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193c:	2b38      	cmp	r3, #56	; 0x38
 800193e:	d805      	bhi.n	800194c <osThreadNew+0x90>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <osThreadNew+0x94>
        return (NULL);
 800194c:	2300      	movs	r3, #0
 800194e:	e054      	b.n	80019fa <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	695b      	ldr	r3, [r3, #20]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d003      	beq.n	8001960 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	695b      	ldr	r3, [r3, #20]
 800195c:	089b      	lsrs	r3, r3, #2
 800195e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d00e      	beq.n	8001986 <osThreadNew+0xca>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	2b5b      	cmp	r3, #91	; 0x5b
 800196e:	d90a      	bls.n	8001986 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001974:	2b00      	cmp	r3, #0
 8001976:	d006      	beq.n	8001986 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	695b      	ldr	r3, [r3, #20]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d002      	beq.n	8001986 <osThreadNew+0xca>
        mem = 1;
 8001980:	2301      	movs	r3, #1
 8001982:	623b      	str	r3, [r7, #32]
 8001984:	e010      	b.n	80019a8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d10c      	bne.n	80019a8 <osThreadNew+0xec>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d108      	bne.n	80019a8 <osThreadNew+0xec>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	691b      	ldr	r3, [r3, #16]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d104      	bne.n	80019a8 <osThreadNew+0xec>
          mem = 0;
 800199e:	2300      	movs	r3, #0
 80019a0:	623b      	str	r3, [r7, #32]
 80019a2:	e001      	b.n	80019a8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80019a4:	2300      	movs	r3, #0
 80019a6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80019a8:	6a3b      	ldr	r3, [r7, #32]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d110      	bne.n	80019d0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80019b6:	9202      	str	r2, [sp, #8]
 80019b8:	9301      	str	r3, [sp, #4]
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80019c4:	68f8      	ldr	r0, [r7, #12]
 80019c6:	f000 ffb7 	bl	8002938 <xTaskCreateStatic>
 80019ca:	4603      	mov	r3, r0
 80019cc:	613b      	str	r3, [r7, #16]
 80019ce:	e013      	b.n	80019f8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80019d0:	6a3b      	ldr	r3, [r7, #32]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d110      	bne.n	80019f8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80019d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019d8:	b29a      	uxth	r2, r3
 80019da:	f107 0310 	add.w	r3, r7, #16
 80019de:	9301      	str	r3, [sp, #4]
 80019e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80019e8:	68f8      	ldr	r0, [r7, #12]
 80019ea:	f000 ffff 	bl	80029ec <xTaskCreate>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d001      	beq.n	80019f8 <osThreadNew+0x13c>
          hTask = NULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80019f8:	693b      	ldr	r3, [r7, #16]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3730      	adds	r7, #48	; 0x30
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	2000002c 	.word	0x2000002c

08001a08 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001a10:	f3ef 8305 	mrs	r3, IPSR
 8001a14:	613b      	str	r3, [r7, #16]
  return(result);
 8001a16:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d10f      	bne.n	8001a3c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a1c:	f3ef 8310 	mrs	r3, PRIMASK
 8001a20:	60fb      	str	r3, [r7, #12]
  return(result);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d105      	bne.n	8001a34 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001a28:	f3ef 8311 	mrs	r3, BASEPRI
 8001a2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d007      	beq.n	8001a44 <osDelay+0x3c>
 8001a34:	4b0a      	ldr	r3, [pc, #40]	; (8001a60 <osDelay+0x58>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d103      	bne.n	8001a44 <osDelay+0x3c>
    stat = osErrorISR;
 8001a3c:	f06f 0305 	mvn.w	r3, #5
 8001a40:	617b      	str	r3, [r7, #20]
 8001a42:	e007      	b.n	8001a54 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d002      	beq.n	8001a54 <osDelay+0x4c>
      vTaskDelay(ticks);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f001 f910 	bl	8002c74 <vTaskDelay>
    }
  }

  return (stat);
 8001a54:	697b      	ldr	r3, [r7, #20]
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3718      	adds	r7, #24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	2000002c 	.word	0x2000002c

08001a64 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	4a07      	ldr	r2, [pc, #28]	; (8001a90 <vApplicationGetIdleTaskMemory+0x2c>)
 8001a74:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	4a06      	ldr	r2, [pc, #24]	; (8001a94 <vApplicationGetIdleTaskMemory+0x30>)
 8001a7a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2280      	movs	r2, #128	; 0x80
 8001a80:	601a      	str	r2, [r3, #0]
}
 8001a82:	bf00      	nop
 8001a84:	3714      	adds	r7, #20
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	20000030 	.word	0x20000030
 8001a94:	2000008c 	.word	0x2000008c

08001a98 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	4a07      	ldr	r2, [pc, #28]	; (8001ac4 <vApplicationGetTimerTaskMemory+0x2c>)
 8001aa8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	4a06      	ldr	r2, [pc, #24]	; (8001ac8 <vApplicationGetTimerTaskMemory+0x30>)
 8001aae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ab6:	601a      	str	r2, [r3, #0]
}
 8001ab8:	bf00      	nop
 8001aba:	3714      	adds	r7, #20
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	2000028c 	.word	0x2000028c
 8001ac8:	200002e8 	.word	0x200002e8

08001acc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f103 0208 	add.w	r2, r3, #8
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f103 0208 	add.w	r2, r3, #8
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f103 0208 	add.w	r2, r3, #8
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001b26:	b480      	push	{r7}
 8001b28:	b085      	sub	sp, #20
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
 8001b2e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	68fa      	ldr	r2, [r7, #12]
 8001b3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	1c5a      	adds	r2, r3, #1
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	601a      	str	r2, [r3, #0]
}
 8001b62:	bf00      	nop
 8001b64:	3714      	adds	r7, #20
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b085      	sub	sp, #20
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
 8001b76:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b84:	d103      	bne.n	8001b8e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	e00c      	b.n	8001ba8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	3308      	adds	r3, #8
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	e002      	b.n	8001b9c <vListInsert+0x2e>
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68ba      	ldr	r2, [r7, #8]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d2f6      	bcs.n	8001b96 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	685a      	ldr	r2, [r3, #4]
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	1c5a      	adds	r2, r3, #1
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	601a      	str	r2, [r3, #0]
}
 8001bd4:	bf00      	nop
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	6892      	ldr	r2, [r2, #8]
 8001bf6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	6852      	ldr	r2, [r2, #4]
 8001c00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d103      	bne.n	8001c14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	1e5a      	subs	r2, r3, #1
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d109      	bne.n	8001c5c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c4c:	f383 8811 	msr	BASEPRI, r3
 8001c50:	f3bf 8f6f 	isb	sy
 8001c54:	f3bf 8f4f 	dsb	sy
 8001c58:	60bb      	str	r3, [r7, #8]
 8001c5a:	e7fe      	b.n	8001c5a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8001c5c:	f002 fabe 	bl	80041dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c68:	68f9      	ldr	r1, [r7, #12]
 8001c6a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001c6c:	fb01 f303 	mul.w	r3, r1, r3
 8001c70:	441a      	add	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	68f9      	ldr	r1, [r7, #12]
 8001c90:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001c92:	fb01 f303 	mul.w	r3, r1, r3
 8001c96:	441a      	add	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	22ff      	movs	r2, #255	; 0xff
 8001ca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	22ff      	movs	r2, #255	; 0xff
 8001ca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d114      	bne.n	8001cdc <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d01a      	beq.n	8001cf0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	3310      	adds	r3, #16
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f001 fa8c 	bl	80031dc <xTaskRemoveFromEventList>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d012      	beq.n	8001cf0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001cca:	4b0d      	ldr	r3, [pc, #52]	; (8001d00 <xQueueGenericReset+0xcc>)
 8001ccc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	f3bf 8f4f 	dsb	sy
 8001cd6:	f3bf 8f6f 	isb	sy
 8001cda:	e009      	b.n	8001cf0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	3310      	adds	r3, #16
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff fef3 	bl	8001acc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	3324      	adds	r3, #36	; 0x24
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff feee 	bl	8001acc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001cf0:	f002 faa2 	bl	8004238 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001cf4:	2301      	movs	r3, #1
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	e000ed04 	.word	0xe000ed04

08001d04 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08e      	sub	sp, #56	; 0x38
 8001d08:	af02      	add	r7, sp, #8
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
 8001d10:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d109      	bne.n	8001d2c <xQueueGenericCreateStatic+0x28>
 8001d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d1c:	f383 8811 	msr	BASEPRI, r3
 8001d20:	f3bf 8f6f 	isb	sy
 8001d24:	f3bf 8f4f 	dsb	sy
 8001d28:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d2a:	e7fe      	b.n	8001d2a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d109      	bne.n	8001d46 <xQueueGenericCreateStatic+0x42>
 8001d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d36:	f383 8811 	msr	BASEPRI, r3
 8001d3a:	f3bf 8f6f 	isb	sy
 8001d3e:	f3bf 8f4f 	dsb	sy
 8001d42:	627b      	str	r3, [r7, #36]	; 0x24
 8001d44:	e7fe      	b.n	8001d44 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d002      	beq.n	8001d52 <xQueueGenericCreateStatic+0x4e>
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <xQueueGenericCreateStatic+0x52>
 8001d52:	2301      	movs	r3, #1
 8001d54:	e000      	b.n	8001d58 <xQueueGenericCreateStatic+0x54>
 8001d56:	2300      	movs	r3, #0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d109      	bne.n	8001d70 <xQueueGenericCreateStatic+0x6c>
 8001d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d60:	f383 8811 	msr	BASEPRI, r3
 8001d64:	f3bf 8f6f 	isb	sy
 8001d68:	f3bf 8f4f 	dsb	sy
 8001d6c:	623b      	str	r3, [r7, #32]
 8001d6e:	e7fe      	b.n	8001d6e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d102      	bne.n	8001d7c <xQueueGenericCreateStatic+0x78>
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d101      	bne.n	8001d80 <xQueueGenericCreateStatic+0x7c>
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e000      	b.n	8001d82 <xQueueGenericCreateStatic+0x7e>
 8001d80:	2300      	movs	r3, #0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d109      	bne.n	8001d9a <xQueueGenericCreateStatic+0x96>
 8001d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d8a:	f383 8811 	msr	BASEPRI, r3
 8001d8e:	f3bf 8f6f 	isb	sy
 8001d92:	f3bf 8f4f 	dsb	sy
 8001d96:	61fb      	str	r3, [r7, #28]
 8001d98:	e7fe      	b.n	8001d98 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001d9a:	2350      	movs	r3, #80	; 0x50
 8001d9c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	2b50      	cmp	r3, #80	; 0x50
 8001da2:	d009      	beq.n	8001db8 <xQueueGenericCreateStatic+0xb4>
 8001da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001da8:	f383 8811 	msr	BASEPRI, r3
 8001dac:	f3bf 8f6f 	isb	sy
 8001db0:	f3bf 8f4f 	dsb	sy
 8001db4:	61bb      	str	r3, [r7, #24]
 8001db6:	e7fe      	b.n	8001db6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001db8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d00d      	beq.n	8001de0 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001dcc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	68b9      	ldr	r1, [r7, #8]
 8001dda:	68f8      	ldr	r0, [r7, #12]
 8001ddc:	f000 f844 	bl	8001e68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3730      	adds	r7, #48	; 0x30
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b08a      	sub	sp, #40	; 0x28
 8001dee:	af02      	add	r7, sp, #8
 8001df0:	60f8      	str	r0, [r7, #12]
 8001df2:	60b9      	str	r1, [r7, #8]
 8001df4:	4613      	mov	r3, r2
 8001df6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d109      	bne.n	8001e12 <xQueueGenericCreate+0x28>
 8001dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e02:	f383 8811 	msr	BASEPRI, r3
 8001e06:	f3bf 8f6f 	isb	sy
 8001e0a:	f3bf 8f4f 	dsb	sy
 8001e0e:	613b      	str	r3, [r7, #16]
 8001e10:	e7fe      	b.n	8001e10 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d102      	bne.n	8001e1e <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	61fb      	str	r3, [r7, #28]
 8001e1c:	e004      	b.n	8001e28 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	68ba      	ldr	r2, [r7, #8]
 8001e22:	fb02 f303 	mul.w	r3, r2, r3
 8001e26:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	3350      	adds	r3, #80	; 0x50
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f002 faef 	bl	8004410 <pvPortMalloc>
 8001e32:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d011      	beq.n	8001e5e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	3350      	adds	r3, #80	; 0x50
 8001e42:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001e4c:	79fa      	ldrb	r2, [r7, #7]
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	9300      	str	r3, [sp, #0]
 8001e52:	4613      	mov	r3, r2
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	68b9      	ldr	r1, [r7, #8]
 8001e58:	68f8      	ldr	r0, [r7, #12]
 8001e5a:	f000 f805 	bl	8001e68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001e5e:	69bb      	ldr	r3, [r7, #24]
	}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3720      	adds	r7, #32
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
 8001e74:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d103      	bne.n	8001e84 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	e002      	b.n	8001e8a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	68ba      	ldr	r2, [r7, #8]
 8001e94:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001e96:	2101      	movs	r1, #1
 8001e98:	69b8      	ldr	r0, [r7, #24]
 8001e9a:	f7ff fecb 	bl	8001c34 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	78fa      	ldrb	r2, [r7, #3]
 8001ea2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001ea6:	bf00      	nop
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b086      	sub	sp, #24
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
 8001eb6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d109      	bne.n	8001ed2 <xQueueCreateCountingSemaphore+0x24>
 8001ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ec2:	f383 8811 	msr	BASEPRI, r3
 8001ec6:	f3bf 8f6f 	isb	sy
 8001eca:	f3bf 8f4f 	dsb	sy
 8001ece:	613b      	str	r3, [r7, #16]
 8001ed0:	e7fe      	b.n	8001ed0 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d909      	bls.n	8001eee <xQueueCreateCountingSemaphore+0x40>
 8001eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ede:	f383 8811 	msr	BASEPRI, r3
 8001ee2:	f3bf 8f6f 	isb	sy
 8001ee6:	f3bf 8f4f 	dsb	sy
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	e7fe      	b.n	8001eec <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8001eee:	2202      	movs	r2, #2
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7ff ff79 	bl	8001dea <xQueueGenericCreate>
 8001ef8:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d002      	beq.n	8001f06 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8001f06:	697b      	ldr	r3, [r7, #20]
	}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3718      	adds	r7, #24
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08e      	sub	sp, #56	; 0x38
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
 8001f1c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d109      	bne.n	8001f40 <xQueueGenericSend+0x30>
 8001f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f30:	f383 8811 	msr	BASEPRI, r3
 8001f34:	f3bf 8f6f 	isb	sy
 8001f38:	f3bf 8f4f 	dsb	sy
 8001f3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f3e:	e7fe      	b.n	8001f3e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d103      	bne.n	8001f4e <xQueueGenericSend+0x3e>
 8001f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <xQueueGenericSend+0x42>
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e000      	b.n	8001f54 <xQueueGenericSend+0x44>
 8001f52:	2300      	movs	r3, #0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d109      	bne.n	8001f6c <xQueueGenericSend+0x5c>
 8001f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f5c:	f383 8811 	msr	BASEPRI, r3
 8001f60:	f3bf 8f6f 	isb	sy
 8001f64:	f3bf 8f4f 	dsb	sy
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
 8001f6a:	e7fe      	b.n	8001f6a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d103      	bne.n	8001f7a <xQueueGenericSend+0x6a>
 8001f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d101      	bne.n	8001f7e <xQueueGenericSend+0x6e>
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e000      	b.n	8001f80 <xQueueGenericSend+0x70>
 8001f7e:	2300      	movs	r3, #0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d109      	bne.n	8001f98 <xQueueGenericSend+0x88>
 8001f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f88:	f383 8811 	msr	BASEPRI, r3
 8001f8c:	f3bf 8f6f 	isb	sy
 8001f90:	f3bf 8f4f 	dsb	sy
 8001f94:	623b      	str	r3, [r7, #32]
 8001f96:	e7fe      	b.n	8001f96 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001f98:	f001 fad6 	bl	8003548 <xTaskGetSchedulerState>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d102      	bne.n	8001fa8 <xQueueGenericSend+0x98>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <xQueueGenericSend+0x9c>
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e000      	b.n	8001fae <xQueueGenericSend+0x9e>
 8001fac:	2300      	movs	r3, #0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d109      	bne.n	8001fc6 <xQueueGenericSend+0xb6>
 8001fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fb6:	f383 8811 	msr	BASEPRI, r3
 8001fba:	f3bf 8f6f 	isb	sy
 8001fbe:	f3bf 8f4f 	dsb	sy
 8001fc2:	61fb      	str	r3, [r7, #28]
 8001fc4:	e7fe      	b.n	8001fc4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001fc6:	f002 f909 	bl	80041dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d302      	bcc.n	8001fdc <xQueueGenericSend+0xcc>
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d129      	bne.n	8002030 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	68b9      	ldr	r1, [r7, #8]
 8001fe0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001fe2:	f000 fb3c 	bl	800265e <prvCopyDataToQueue>
 8001fe6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d010      	beq.n	8002012 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ff2:	3324      	adds	r3, #36	; 0x24
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f001 f8f1 	bl	80031dc <xTaskRemoveFromEventList>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d013      	beq.n	8002028 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002000:	4b3f      	ldr	r3, [pc, #252]	; (8002100 <xQueueGenericSend+0x1f0>)
 8002002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	f3bf 8f4f 	dsb	sy
 800200c:	f3bf 8f6f 	isb	sy
 8002010:	e00a      	b.n	8002028 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002014:	2b00      	cmp	r3, #0
 8002016:	d007      	beq.n	8002028 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002018:	4b39      	ldr	r3, [pc, #228]	; (8002100 <xQueueGenericSend+0x1f0>)
 800201a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	f3bf 8f4f 	dsb	sy
 8002024:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002028:	f002 f906 	bl	8004238 <vPortExitCritical>
				return pdPASS;
 800202c:	2301      	movs	r3, #1
 800202e:	e063      	b.n	80020f8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d103      	bne.n	800203e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002036:	f002 f8ff 	bl	8004238 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800203a:	2300      	movs	r3, #0
 800203c:	e05c      	b.n	80020f8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800203e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002040:	2b00      	cmp	r3, #0
 8002042:	d106      	bne.n	8002052 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002044:	f107 0314 	add.w	r3, r7, #20
 8002048:	4618      	mov	r0, r3
 800204a:	f001 f929 	bl	80032a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800204e:	2301      	movs	r3, #1
 8002050:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002052:	f002 f8f1 	bl	8004238 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002056:	f000 fea5 	bl	8002da4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800205a:	f002 f8bf 	bl	80041dc <vPortEnterCritical>
 800205e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002060:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002064:	b25b      	sxtb	r3, r3
 8002066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800206a:	d103      	bne.n	8002074 <xQueueGenericSend+0x164>
 800206c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800206e:	2200      	movs	r2, #0
 8002070:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002076:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800207a:	b25b      	sxtb	r3, r3
 800207c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002080:	d103      	bne.n	800208a <xQueueGenericSend+0x17a>
 8002082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002084:	2200      	movs	r2, #0
 8002086:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800208a:	f002 f8d5 	bl	8004238 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800208e:	1d3a      	adds	r2, r7, #4
 8002090:	f107 0314 	add.w	r3, r7, #20
 8002094:	4611      	mov	r1, r2
 8002096:	4618      	mov	r0, r3
 8002098:	f001 f918 	bl	80032cc <xTaskCheckForTimeOut>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d124      	bne.n	80020ec <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80020a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80020a4:	f000 fbd3 	bl	800284e <prvIsQueueFull>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d018      	beq.n	80020e0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80020ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b0:	3310      	adds	r3, #16
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	4611      	mov	r1, r2
 80020b6:	4618      	mov	r0, r3
 80020b8:	f001 f842 	bl	8003140 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80020bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80020be:	f000 fb5e 	bl	800277e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80020c2:	f000 fe7d 	bl	8002dc0 <xTaskResumeAll>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f47f af7c 	bne.w	8001fc6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80020ce:	4b0c      	ldr	r3, [pc, #48]	; (8002100 <xQueueGenericSend+0x1f0>)
 80020d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	f3bf 8f4f 	dsb	sy
 80020da:	f3bf 8f6f 	isb	sy
 80020de:	e772      	b.n	8001fc6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80020e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80020e2:	f000 fb4c 	bl	800277e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80020e6:	f000 fe6b 	bl	8002dc0 <xTaskResumeAll>
 80020ea:	e76c      	b.n	8001fc6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80020ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80020ee:	f000 fb46 	bl	800277e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80020f2:	f000 fe65 	bl	8002dc0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80020f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3738      	adds	r7, #56	; 0x38
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	e000ed04 	.word	0xe000ed04

08002104 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b08e      	sub	sp, #56	; 0x38
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
 8002110:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002118:	2b00      	cmp	r3, #0
 800211a:	d109      	bne.n	8002130 <xQueueGenericSendFromISR+0x2c>
 800211c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002120:	f383 8811 	msr	BASEPRI, r3
 8002124:	f3bf 8f6f 	isb	sy
 8002128:	f3bf 8f4f 	dsb	sy
 800212c:	627b      	str	r3, [r7, #36]	; 0x24
 800212e:	e7fe      	b.n	800212e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d103      	bne.n	800213e <xQueueGenericSendFromISR+0x3a>
 8002136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	2b00      	cmp	r3, #0
 800213c:	d101      	bne.n	8002142 <xQueueGenericSendFromISR+0x3e>
 800213e:	2301      	movs	r3, #1
 8002140:	e000      	b.n	8002144 <xQueueGenericSendFromISR+0x40>
 8002142:	2300      	movs	r3, #0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d109      	bne.n	800215c <xQueueGenericSendFromISR+0x58>
 8002148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800214c:	f383 8811 	msr	BASEPRI, r3
 8002150:	f3bf 8f6f 	isb	sy
 8002154:	f3bf 8f4f 	dsb	sy
 8002158:	623b      	str	r3, [r7, #32]
 800215a:	e7fe      	b.n	800215a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	2b02      	cmp	r3, #2
 8002160:	d103      	bne.n	800216a <xQueueGenericSendFromISR+0x66>
 8002162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002166:	2b01      	cmp	r3, #1
 8002168:	d101      	bne.n	800216e <xQueueGenericSendFromISR+0x6a>
 800216a:	2301      	movs	r3, #1
 800216c:	e000      	b.n	8002170 <xQueueGenericSendFromISR+0x6c>
 800216e:	2300      	movs	r3, #0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d109      	bne.n	8002188 <xQueueGenericSendFromISR+0x84>
 8002174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002178:	f383 8811 	msr	BASEPRI, r3
 800217c:	f3bf 8f6f 	isb	sy
 8002180:	f3bf 8f4f 	dsb	sy
 8002184:	61fb      	str	r3, [r7, #28]
 8002186:	e7fe      	b.n	8002186 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002188:	f002 f904 	bl	8004394 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800218c:	f3ef 8211 	mrs	r2, BASEPRI
 8002190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002194:	f383 8811 	msr	BASEPRI, r3
 8002198:	f3bf 8f6f 	isb	sy
 800219c:	f3bf 8f4f 	dsb	sy
 80021a0:	61ba      	str	r2, [r7, #24]
 80021a2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80021a4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80021a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80021a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d302      	bcc.n	80021ba <xQueueGenericSendFromISR+0xb6>
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d12c      	bne.n	8002214 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80021ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	68b9      	ldr	r1, [r7, #8]
 80021c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021ca:	f000 fa48 	bl	800265e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80021ce:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80021d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d6:	d112      	bne.n	80021fe <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80021d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d016      	beq.n	800220e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80021e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e2:	3324      	adds	r3, #36	; 0x24
 80021e4:	4618      	mov	r0, r3
 80021e6:	f000 fff9 	bl	80031dc <xTaskRemoveFromEventList>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00e      	beq.n	800220e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00b      	beq.n	800220e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	e007      	b.n	800220e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80021fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002202:	3301      	adds	r3, #1
 8002204:	b2db      	uxtb	r3, r3
 8002206:	b25a      	sxtb	r2, r3
 8002208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800220a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800220e:	2301      	movs	r3, #1
 8002210:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002212:	e001      	b.n	8002218 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002214:	2300      	movs	r3, #0
 8002216:	637b      	str	r3, [r7, #52]	; 0x34
 8002218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800221a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002224:	4618      	mov	r0, r3
 8002226:	3738      	adds	r7, #56	; 0x38
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b08c      	sub	sp, #48	; 0x30
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002238:	2300      	movs	r3, #0
 800223a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002242:	2b00      	cmp	r3, #0
 8002244:	d109      	bne.n	800225a <xQueueReceive+0x2e>
	__asm volatile
 8002246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800224a:	f383 8811 	msr	BASEPRI, r3
 800224e:	f3bf 8f6f 	isb	sy
 8002252:	f3bf 8f4f 	dsb	sy
 8002256:	623b      	str	r3, [r7, #32]
 8002258:	e7fe      	b.n	8002258 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d103      	bne.n	8002268 <xQueueReceive+0x3c>
 8002260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002264:	2b00      	cmp	r3, #0
 8002266:	d101      	bne.n	800226c <xQueueReceive+0x40>
 8002268:	2301      	movs	r3, #1
 800226a:	e000      	b.n	800226e <xQueueReceive+0x42>
 800226c:	2300      	movs	r3, #0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d109      	bne.n	8002286 <xQueueReceive+0x5a>
 8002272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002276:	f383 8811 	msr	BASEPRI, r3
 800227a:	f3bf 8f6f 	isb	sy
 800227e:	f3bf 8f4f 	dsb	sy
 8002282:	61fb      	str	r3, [r7, #28]
 8002284:	e7fe      	b.n	8002284 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002286:	f001 f95f 	bl	8003548 <xTaskGetSchedulerState>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d102      	bne.n	8002296 <xQueueReceive+0x6a>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <xQueueReceive+0x6e>
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <xQueueReceive+0x70>
 800229a:	2300      	movs	r3, #0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d109      	bne.n	80022b4 <xQueueReceive+0x88>
 80022a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022a4:	f383 8811 	msr	BASEPRI, r3
 80022a8:	f3bf 8f6f 	isb	sy
 80022ac:	f3bf 8f4f 	dsb	sy
 80022b0:	61bb      	str	r3, [r7, #24]
 80022b2:	e7fe      	b.n	80022b2 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80022b4:	f001 ff92 	bl	80041dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80022b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80022be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d01f      	beq.n	8002304 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80022c4:	68b9      	ldr	r1, [r7, #8]
 80022c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022c8:	f000 fa33 	bl	8002732 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80022cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ce:	1e5a      	subs	r2, r3, #1
 80022d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00f      	beq.n	80022fc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022de:	3310      	adds	r3, #16
 80022e0:	4618      	mov	r0, r3
 80022e2:	f000 ff7b 	bl	80031dc <xTaskRemoveFromEventList>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d007      	beq.n	80022fc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80022ec:	4b3c      	ldr	r3, [pc, #240]	; (80023e0 <xQueueReceive+0x1b4>)
 80022ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	f3bf 8f4f 	dsb	sy
 80022f8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80022fc:	f001 ff9c 	bl	8004238 <vPortExitCritical>
				return pdPASS;
 8002300:	2301      	movs	r3, #1
 8002302:	e069      	b.n	80023d8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d103      	bne.n	8002312 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800230a:	f001 ff95 	bl	8004238 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800230e:	2300      	movs	r3, #0
 8002310:	e062      	b.n	80023d8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002314:	2b00      	cmp	r3, #0
 8002316:	d106      	bne.n	8002326 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002318:	f107 0310 	add.w	r3, r7, #16
 800231c:	4618      	mov	r0, r3
 800231e:	f000 ffbf 	bl	80032a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002322:	2301      	movs	r3, #1
 8002324:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002326:	f001 ff87 	bl	8004238 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800232a:	f000 fd3b 	bl	8002da4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800232e:	f001 ff55 	bl	80041dc <vPortEnterCritical>
 8002332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002334:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002338:	b25b      	sxtb	r3, r3
 800233a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800233e:	d103      	bne.n	8002348 <xQueueReceive+0x11c>
 8002340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002342:	2200      	movs	r2, #0
 8002344:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800234a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800234e:	b25b      	sxtb	r3, r3
 8002350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002354:	d103      	bne.n	800235e <xQueueReceive+0x132>
 8002356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002358:	2200      	movs	r2, #0
 800235a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800235e:	f001 ff6b 	bl	8004238 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002362:	1d3a      	adds	r2, r7, #4
 8002364:	f107 0310 	add.w	r3, r7, #16
 8002368:	4611      	mov	r1, r2
 800236a:	4618      	mov	r0, r3
 800236c:	f000 ffae 	bl	80032cc <xTaskCheckForTimeOut>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d123      	bne.n	80023be <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002376:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002378:	f000 fa53 	bl	8002822 <prvIsQueueEmpty>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d017      	beq.n	80023b2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002384:	3324      	adds	r3, #36	; 0x24
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	4611      	mov	r1, r2
 800238a:	4618      	mov	r0, r3
 800238c:	f000 fed8 	bl	8003140 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002390:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002392:	f000 f9f4 	bl	800277e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002396:	f000 fd13 	bl	8002dc0 <xTaskResumeAll>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d189      	bne.n	80022b4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80023a0:	4b0f      	ldr	r3, [pc, #60]	; (80023e0 <xQueueReceive+0x1b4>)
 80023a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	f3bf 8f4f 	dsb	sy
 80023ac:	f3bf 8f6f 	isb	sy
 80023b0:	e780      	b.n	80022b4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80023b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023b4:	f000 f9e3 	bl	800277e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80023b8:	f000 fd02 	bl	8002dc0 <xTaskResumeAll>
 80023bc:	e77a      	b.n	80022b4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80023be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023c0:	f000 f9dd 	bl	800277e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80023c4:	f000 fcfc 	bl	8002dc0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80023c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023ca:	f000 fa2a 	bl	8002822 <prvIsQueueEmpty>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f43f af6f 	beq.w	80022b4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80023d6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3730      	adds	r7, #48	; 0x30
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	e000ed04 	.word	0xe000ed04

080023e4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b08e      	sub	sp, #56	; 0x38
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80023ee:	2300      	movs	r3, #0
 80023f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80023f6:	2300      	movs	r3, #0
 80023f8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80023fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d109      	bne.n	8002414 <xQueueSemaphoreTake+0x30>
 8002400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002404:	f383 8811 	msr	BASEPRI, r3
 8002408:	f3bf 8f6f 	isb	sy
 800240c:	f3bf 8f4f 	dsb	sy
 8002410:	623b      	str	r3, [r7, #32]
 8002412:	e7fe      	b.n	8002412 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002418:	2b00      	cmp	r3, #0
 800241a:	d009      	beq.n	8002430 <xQueueSemaphoreTake+0x4c>
 800241c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002420:	f383 8811 	msr	BASEPRI, r3
 8002424:	f3bf 8f6f 	isb	sy
 8002428:	f3bf 8f4f 	dsb	sy
 800242c:	61fb      	str	r3, [r7, #28]
 800242e:	e7fe      	b.n	800242e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002430:	f001 f88a 	bl	8003548 <xTaskGetSchedulerState>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d102      	bne.n	8002440 <xQueueSemaphoreTake+0x5c>
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d101      	bne.n	8002444 <xQueueSemaphoreTake+0x60>
 8002440:	2301      	movs	r3, #1
 8002442:	e000      	b.n	8002446 <xQueueSemaphoreTake+0x62>
 8002444:	2300      	movs	r3, #0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d109      	bne.n	800245e <xQueueSemaphoreTake+0x7a>
 800244a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800244e:	f383 8811 	msr	BASEPRI, r3
 8002452:	f3bf 8f6f 	isb	sy
 8002456:	f3bf 8f4f 	dsb	sy
 800245a:	61bb      	str	r3, [r7, #24]
 800245c:	e7fe      	b.n	800245c <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800245e:	f001 febd 	bl	80041dc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002466:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800246a:	2b00      	cmp	r3, #0
 800246c:	d024      	beq.n	80024b8 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800246e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002470:	1e5a      	subs	r2, r3, #1
 8002472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002474:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d104      	bne.n	8002488 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800247e:	f001 f9d5 	bl	800382c <pvTaskIncrementMutexHeldCount>
 8002482:	4602      	mov	r2, r0
 8002484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002486:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00f      	beq.n	80024b0 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002492:	3310      	adds	r3, #16
 8002494:	4618      	mov	r0, r3
 8002496:	f000 fea1 	bl	80031dc <xTaskRemoveFromEventList>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d007      	beq.n	80024b0 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80024a0:	4b53      	ldr	r3, [pc, #332]	; (80025f0 <xQueueSemaphoreTake+0x20c>)
 80024a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	f3bf 8f4f 	dsb	sy
 80024ac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80024b0:	f001 fec2 	bl	8004238 <vPortExitCritical>
				return pdPASS;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e096      	b.n	80025e6 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d110      	bne.n	80024e0 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80024be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d009      	beq.n	80024d8 <xQueueSemaphoreTake+0xf4>
 80024c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024c8:	f383 8811 	msr	BASEPRI, r3
 80024cc:	f3bf 8f6f 	isb	sy
 80024d0:	f3bf 8f4f 	dsb	sy
 80024d4:	617b      	str	r3, [r7, #20]
 80024d6:	e7fe      	b.n	80024d6 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80024d8:	f001 feae 	bl	8004238 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80024dc:	2300      	movs	r3, #0
 80024de:	e082      	b.n	80025e6 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80024e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d106      	bne.n	80024f4 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80024e6:	f107 030c 	add.w	r3, r7, #12
 80024ea:	4618      	mov	r0, r3
 80024ec:	f000 fed8 	bl	80032a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80024f0:	2301      	movs	r3, #1
 80024f2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80024f4:	f001 fea0 	bl	8004238 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80024f8:	f000 fc54 	bl	8002da4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80024fc:	f001 fe6e 	bl	80041dc <vPortEnterCritical>
 8002500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002502:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002506:	b25b      	sxtb	r3, r3
 8002508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800250c:	d103      	bne.n	8002516 <xQueueSemaphoreTake+0x132>
 800250e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002510:	2200      	movs	r2, #0
 8002512:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002518:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800251c:	b25b      	sxtb	r3, r3
 800251e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002522:	d103      	bne.n	800252c <xQueueSemaphoreTake+0x148>
 8002524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002526:	2200      	movs	r2, #0
 8002528:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800252c:	f001 fe84 	bl	8004238 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002530:	463a      	mov	r2, r7
 8002532:	f107 030c 	add.w	r3, r7, #12
 8002536:	4611      	mov	r1, r2
 8002538:	4618      	mov	r0, r3
 800253a:	f000 fec7 	bl	80032cc <xTaskCheckForTimeOut>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d132      	bne.n	80025aa <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002544:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002546:	f000 f96c 	bl	8002822 <prvIsQueueEmpty>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d026      	beq.n	800259e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d109      	bne.n	800256c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8002558:	f001 fe40 	bl	80041dc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800255c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	4618      	mov	r0, r3
 8002562:	f001 f80f 	bl	8003584 <xTaskPriorityInherit>
 8002566:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8002568:	f001 fe66 	bl	8004238 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800256c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256e:	3324      	adds	r3, #36	; 0x24
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	4611      	mov	r1, r2
 8002574:	4618      	mov	r0, r3
 8002576:	f000 fde3 	bl	8003140 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800257a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800257c:	f000 f8ff 	bl	800277e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002580:	f000 fc1e 	bl	8002dc0 <xTaskResumeAll>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	f47f af69 	bne.w	800245e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800258c:	4b18      	ldr	r3, [pc, #96]	; (80025f0 <xQueueSemaphoreTake+0x20c>)
 800258e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	f3bf 8f4f 	dsb	sy
 8002598:	f3bf 8f6f 	isb	sy
 800259c:	e75f      	b.n	800245e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800259e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80025a0:	f000 f8ed 	bl	800277e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80025a4:	f000 fc0c 	bl	8002dc0 <xTaskResumeAll>
 80025a8:	e759      	b.n	800245e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80025aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80025ac:	f000 f8e7 	bl	800277e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80025b0:	f000 fc06 	bl	8002dc0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80025b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80025b6:	f000 f934 	bl	8002822 <prvIsQueueEmpty>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f43f af4e 	beq.w	800245e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80025c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00d      	beq.n	80025e4 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80025c8:	f001 fe08 	bl	80041dc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80025cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80025ce:	f000 f82e 	bl	800262e <prvGetDisinheritPriorityAfterTimeout>
 80025d2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80025d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025da:	4618      	mov	r0, r3
 80025dc:	f001 f8a6 	bl	800372c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80025e0:	f001 fe2a 	bl	8004238 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80025e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3738      	adds	r7, #56	; 0x38
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	e000ed04 	.word	0xe000ed04

080025f4 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d109      	bne.n	8002616 <uxQueueMessagesWaiting+0x22>
 8002602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002606:	f383 8811 	msr	BASEPRI, r3
 800260a:	f3bf 8f6f 	isb	sy
 800260e:	f3bf 8f4f 	dsb	sy
 8002612:	60bb      	str	r3, [r7, #8]
 8002614:	e7fe      	b.n	8002614 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 8002616:	f001 fde1 	bl	80041dc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800261e:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8002620:	f001 fe0a 	bl	8004238 <vPortExitCritical>

	return uxReturn;
 8002624:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8002626:	4618      	mov	r0, r3
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800262e:	b480      	push	{r7}
 8002630:	b085      	sub	sp, #20
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263a:	2b00      	cmp	r3, #0
 800263c:	d006      	beq.n	800264c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	e001      	b.n	8002650 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800264c:	2300      	movs	r3, #0
 800264e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8002650:	68fb      	ldr	r3, [r7, #12]
	}
 8002652:	4618      	mov	r0, r3
 8002654:	3714      	adds	r7, #20
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b086      	sub	sp, #24
 8002662:	af00      	add	r7, sp, #0
 8002664:	60f8      	str	r0, [r7, #12]
 8002666:	60b9      	str	r1, [r7, #8]
 8002668:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800266a:	2300      	movs	r3, #0
 800266c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002672:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002678:	2b00      	cmp	r3, #0
 800267a:	d10d      	bne.n	8002698 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d14d      	bne.n	8002720 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	4618      	mov	r0, r3
 800268a:	f000 ffe3 	bl	8003654 <xTaskPriorityDisinherit>
 800268e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	609a      	str	r2, [r3, #8]
 8002696:	e043      	b.n	8002720 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d119      	bne.n	80026d2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6858      	ldr	r0, [r3, #4]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	461a      	mov	r2, r3
 80026a8:	68b9      	ldr	r1, [r7, #8]
 80026aa:	f002 f8ab 	bl	8004804 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	441a      	add	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	685a      	ldr	r2, [r3, #4]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d32b      	bcc.n	8002720 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	605a      	str	r2, [r3, #4]
 80026d0:	e026      	b.n	8002720 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	68d8      	ldr	r0, [r3, #12]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	461a      	mov	r2, r3
 80026dc:	68b9      	ldr	r1, [r7, #8]
 80026de:	f002 f891 	bl	8004804 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	68da      	ldr	r2, [r3, #12]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	425b      	negs	r3, r3
 80026ec:	441a      	add	r2, r3
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	68da      	ldr	r2, [r3, #12]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d207      	bcs.n	800270e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	425b      	negs	r3, r3
 8002708:	441a      	add	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2b02      	cmp	r3, #2
 8002712:	d105      	bne.n	8002720 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d002      	beq.n	8002720 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	3b01      	subs	r3, #1
 800271e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1c5a      	adds	r2, r3, #1
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002728:	697b      	ldr	r3, [r7, #20]
}
 800272a:	4618      	mov	r0, r3
 800272c:	3718      	adds	r7, #24
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b082      	sub	sp, #8
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
 800273a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002740:	2b00      	cmp	r3, #0
 8002742:	d018      	beq.n	8002776 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68da      	ldr	r2, [r3, #12]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274c:	441a      	add	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68da      	ldr	r2, [r3, #12]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	429a      	cmp	r2, r3
 800275c:	d303      	bcc.n	8002766 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68d9      	ldr	r1, [r3, #12]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	461a      	mov	r2, r3
 8002770:	6838      	ldr	r0, [r7, #0]
 8002772:	f002 f847 	bl	8004804 <memcpy>
	}
}
 8002776:	bf00      	nop
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b084      	sub	sp, #16
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002786:	f001 fd29 	bl	80041dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002790:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002792:	e011      	b.n	80027b8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002798:	2b00      	cmp	r3, #0
 800279a:	d012      	beq.n	80027c2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	3324      	adds	r3, #36	; 0x24
 80027a0:	4618      	mov	r0, r3
 80027a2:	f000 fd1b 	bl	80031dc <xTaskRemoveFromEventList>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80027ac:	f000 fdee 	bl	800338c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80027b0:	7bfb      	ldrb	r3, [r7, #15]
 80027b2:	3b01      	subs	r3, #1
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80027b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	dce9      	bgt.n	8002794 <prvUnlockQueue+0x16>
 80027c0:	e000      	b.n	80027c4 <prvUnlockQueue+0x46>
					break;
 80027c2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	22ff      	movs	r2, #255	; 0xff
 80027c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80027cc:	f001 fd34 	bl	8004238 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80027d0:	f001 fd04 	bl	80041dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027da:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80027dc:	e011      	b.n	8002802 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d012      	beq.n	800280c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	3310      	adds	r3, #16
 80027ea:	4618      	mov	r0, r3
 80027ec:	f000 fcf6 	bl	80031dc <xTaskRemoveFromEventList>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80027f6:	f000 fdc9 	bl	800338c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80027fa:	7bbb      	ldrb	r3, [r7, #14]
 80027fc:	3b01      	subs	r3, #1
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002802:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002806:	2b00      	cmp	r3, #0
 8002808:	dce9      	bgt.n	80027de <prvUnlockQueue+0x60>
 800280a:	e000      	b.n	800280e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800280c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	22ff      	movs	r2, #255	; 0xff
 8002812:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002816:	f001 fd0f 	bl	8004238 <vPortExitCritical>
}
 800281a:	bf00      	nop
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b084      	sub	sp, #16
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800282a:	f001 fcd7 	bl	80041dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002832:	2b00      	cmp	r3, #0
 8002834:	d102      	bne.n	800283c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002836:	2301      	movs	r3, #1
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	e001      	b.n	8002840 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800283c:	2300      	movs	r3, #0
 800283e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002840:	f001 fcfa 	bl	8004238 <vPortExitCritical>

	return xReturn;
 8002844:	68fb      	ldr	r3, [r7, #12]
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b084      	sub	sp, #16
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002856:	f001 fcc1 	bl	80041dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002862:	429a      	cmp	r2, r3
 8002864:	d102      	bne.n	800286c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002866:	2301      	movs	r3, #1
 8002868:	60fb      	str	r3, [r7, #12]
 800286a:	e001      	b.n	8002870 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800286c:	2300      	movs	r3, #0
 800286e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002870:	f001 fce2 	bl	8004238 <vPortExitCritical>

	return xReturn;
 8002874:	68fb      	ldr	r3, [r7, #12]
}
 8002876:	4618      	mov	r0, r3
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
	...

08002880 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800288a:	2300      	movs	r3, #0
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	e014      	b.n	80028ba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002890:	4a0e      	ldr	r2, [pc, #56]	; (80028cc <vQueueAddToRegistry+0x4c>)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10b      	bne.n	80028b4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800289c:	490b      	ldr	r1, [pc, #44]	; (80028cc <vQueueAddToRegistry+0x4c>)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80028a6:	4a09      	ldr	r2, [pc, #36]	; (80028cc <vQueueAddToRegistry+0x4c>)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	4413      	add	r3, r2
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80028b2:	e005      	b.n	80028c0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	3301      	adds	r3, #1
 80028b8:	60fb      	str	r3, [r7, #12]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2b07      	cmp	r3, #7
 80028be:	d9e7      	bls.n	8002890 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80028c0:	bf00      	nop
 80028c2:	3714      	adds	r7, #20
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr
 80028cc:	20004950 	.word	0x20004950

080028d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80028e0:	f001 fc7c 	bl	80041dc <vPortEnterCritical>
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028ea:	b25b      	sxtb	r3, r3
 80028ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f0:	d103      	bne.n	80028fa <vQueueWaitForMessageRestricted+0x2a>
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002900:	b25b      	sxtb	r3, r3
 8002902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002906:	d103      	bne.n	8002910 <vQueueWaitForMessageRestricted+0x40>
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002910:	f001 fc92 	bl	8004238 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002918:	2b00      	cmp	r3, #0
 800291a:	d106      	bne.n	800292a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	3324      	adds	r3, #36	; 0x24
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	68b9      	ldr	r1, [r7, #8]
 8002924:	4618      	mov	r0, r3
 8002926:	f000 fc2f 	bl	8003188 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800292a:	6978      	ldr	r0, [r7, #20]
 800292c:	f7ff ff27 	bl	800277e <prvUnlockQueue>
	}
 8002930:	bf00      	nop
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002938:	b580      	push	{r7, lr}
 800293a:	b08e      	sub	sp, #56	; 0x38
 800293c:	af04      	add	r7, sp, #16
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
 8002944:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002948:	2b00      	cmp	r3, #0
 800294a:	d109      	bne.n	8002960 <xTaskCreateStatic+0x28>
 800294c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002950:	f383 8811 	msr	BASEPRI, r3
 8002954:	f3bf 8f6f 	isb	sy
 8002958:	f3bf 8f4f 	dsb	sy
 800295c:	623b      	str	r3, [r7, #32]
 800295e:	e7fe      	b.n	800295e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8002960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002962:	2b00      	cmp	r3, #0
 8002964:	d109      	bne.n	800297a <xTaskCreateStatic+0x42>
 8002966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800296a:	f383 8811 	msr	BASEPRI, r3
 800296e:	f3bf 8f6f 	isb	sy
 8002972:	f3bf 8f4f 	dsb	sy
 8002976:	61fb      	str	r3, [r7, #28]
 8002978:	e7fe      	b.n	8002978 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800297a:	235c      	movs	r3, #92	; 0x5c
 800297c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	2b5c      	cmp	r3, #92	; 0x5c
 8002982:	d009      	beq.n	8002998 <xTaskCreateStatic+0x60>
 8002984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002988:	f383 8811 	msr	BASEPRI, r3
 800298c:	f3bf 8f6f 	isb	sy
 8002990:	f3bf 8f4f 	dsb	sy
 8002994:	61bb      	str	r3, [r7, #24]
 8002996:	e7fe      	b.n	8002996 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002998:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800299a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800299c:	2b00      	cmp	r3, #0
 800299e:	d01e      	beq.n	80029de <xTaskCreateStatic+0xa6>
 80029a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d01b      	beq.n	80029de <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80029a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029a8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029ae:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80029b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b2:	2202      	movs	r2, #2
 80029b4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80029b8:	2300      	movs	r3, #0
 80029ba:	9303      	str	r3, [sp, #12]
 80029bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029be:	9302      	str	r3, [sp, #8]
 80029c0:	f107 0314 	add.w	r3, r7, #20
 80029c4:	9301      	str	r3, [sp, #4]
 80029c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c8:	9300      	str	r3, [sp, #0]
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	68b9      	ldr	r1, [r7, #8]
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f000 f850 	bl	8002a76 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80029d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80029d8:	f000 f8dc 	bl	8002b94 <prvAddNewTaskToReadyList>
 80029dc:	e001      	b.n	80029e2 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80029e2:	697b      	ldr	r3, [r7, #20]
	}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3728      	adds	r7, #40	; 0x28
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b08c      	sub	sp, #48	; 0x30
 80029f0:	af04      	add	r7, sp, #16
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	603b      	str	r3, [r7, #0]
 80029f8:	4613      	mov	r3, r2
 80029fa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80029fc:	88fb      	ldrh	r3, [r7, #6]
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4618      	mov	r0, r3
 8002a02:	f001 fd05 	bl	8004410 <pvPortMalloc>
 8002a06:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00e      	beq.n	8002a2c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002a0e:	205c      	movs	r0, #92	; 0x5c
 8002a10:	f001 fcfe 	bl	8004410 <pvPortMalloc>
 8002a14:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d003      	beq.n	8002a24 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	631a      	str	r2, [r3, #48]	; 0x30
 8002a22:	e005      	b.n	8002a30 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002a24:	6978      	ldr	r0, [r7, #20]
 8002a26:	f001 fdb5 	bl	8004594 <vPortFree>
 8002a2a:	e001      	b.n	8002a30 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d017      	beq.n	8002a66 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002a3e:	88fa      	ldrh	r2, [r7, #6]
 8002a40:	2300      	movs	r3, #0
 8002a42:	9303      	str	r3, [sp, #12]
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	9302      	str	r3, [sp, #8]
 8002a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a4a:	9301      	str	r3, [sp, #4]
 8002a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	68b9      	ldr	r1, [r7, #8]
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f000 f80e 	bl	8002a76 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002a5a:	69f8      	ldr	r0, [r7, #28]
 8002a5c:	f000 f89a 	bl	8002b94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002a60:	2301      	movs	r3, #1
 8002a62:	61bb      	str	r3, [r7, #24]
 8002a64:	e002      	b.n	8002a6c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002a66:	f04f 33ff 	mov.w	r3, #4294967295
 8002a6a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002a6c:	69bb      	ldr	r3, [r7, #24]
	}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3720      	adds	r7, #32
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b088      	sub	sp, #32
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	60f8      	str	r0, [r7, #12]
 8002a7e:	60b9      	str	r1, [r7, #8]
 8002a80:	607a      	str	r2, [r7, #4]
 8002a82:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a86:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	21a5      	movs	r1, #165	; 0xa5
 8002a90:	f001 fec3 	bl	800481a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4413      	add	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	f023 0307 	bic.w	r3, r3, #7
 8002aac:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d009      	beq.n	8002acc <prvInitialiseNewTask+0x56>
 8002ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002abc:	f383 8811 	msr	BASEPRI, r3
 8002ac0:	f3bf 8f6f 	isb	sy
 8002ac4:	f3bf 8f4f 	dsb	sy
 8002ac8:	617b      	str	r3, [r7, #20]
 8002aca:	e7fe      	b.n	8002aca <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d01f      	beq.n	8002b12 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	61fb      	str	r3, [r7, #28]
 8002ad6:	e012      	b.n	8002afe <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002ad8:	68ba      	ldr	r2, [r7, #8]
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	4413      	add	r3, r2
 8002ade:	7819      	ldrb	r1, [r3, #0]
 8002ae0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	3334      	adds	r3, #52	; 0x34
 8002ae8:	460a      	mov	r2, r1
 8002aea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002aec:	68ba      	ldr	r2, [r7, #8]
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	4413      	add	r3, r2
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d006      	beq.n	8002b06 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	3301      	adds	r3, #1
 8002afc:	61fb      	str	r3, [r7, #28]
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	2b0f      	cmp	r3, #15
 8002b02:	d9e9      	bls.n	8002ad8 <prvInitialiseNewTask+0x62>
 8002b04:	e000      	b.n	8002b08 <prvInitialiseNewTask+0x92>
			{
				break;
 8002b06:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b10:	e003      	b.n	8002b1a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b1c:	2b37      	cmp	r3, #55	; 0x37
 8002b1e:	d901      	bls.n	8002b24 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002b20:	2337      	movs	r3, #55	; 0x37
 8002b22:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b28:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b2e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b32:	2200      	movs	r2, #0
 8002b34:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b38:	3304      	adds	r3, #4
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7fe ffe6 	bl	8001b0c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b42:	3318      	adds	r3, #24
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7fe ffe1 	bl	8001b0c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b4e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b52:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b58:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b5e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b62:	2200      	movs	r2, #0
 8002b64:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	68f9      	ldr	r1, [r7, #12]
 8002b72:	69b8      	ldr	r0, [r7, #24]
 8002b74:	f001 fa08 	bl	8003f88 <pxPortInitialiseStack>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d002      	beq.n	8002b8a <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002b8a:	bf00      	nop
 8002b8c:	3720      	adds	r7, #32
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
	...

08002b94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002b9c:	f001 fb1e 	bl	80041dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002ba0:	4b2d      	ldr	r3, [pc, #180]	; (8002c58 <prvAddNewTaskToReadyList+0xc4>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	4a2c      	ldr	r2, [pc, #176]	; (8002c58 <prvAddNewTaskToReadyList+0xc4>)
 8002ba8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002baa:	4b2c      	ldr	r3, [pc, #176]	; (8002c5c <prvAddNewTaskToReadyList+0xc8>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d109      	bne.n	8002bc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002bb2:	4a2a      	ldr	r2, [pc, #168]	; (8002c5c <prvAddNewTaskToReadyList+0xc8>)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002bb8:	4b27      	ldr	r3, [pc, #156]	; (8002c58 <prvAddNewTaskToReadyList+0xc4>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d110      	bne.n	8002be2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002bc0:	f000 fc08 	bl	80033d4 <prvInitialiseTaskLists>
 8002bc4:	e00d      	b.n	8002be2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002bc6:	4b26      	ldr	r3, [pc, #152]	; (8002c60 <prvAddNewTaskToReadyList+0xcc>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d109      	bne.n	8002be2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002bce:	4b23      	ldr	r3, [pc, #140]	; (8002c5c <prvAddNewTaskToReadyList+0xc8>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d802      	bhi.n	8002be2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002bdc:	4a1f      	ldr	r2, [pc, #124]	; (8002c5c <prvAddNewTaskToReadyList+0xc8>)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002be2:	4b20      	ldr	r3, [pc, #128]	; (8002c64 <prvAddNewTaskToReadyList+0xd0>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	3301      	adds	r3, #1
 8002be8:	4a1e      	ldr	r2, [pc, #120]	; (8002c64 <prvAddNewTaskToReadyList+0xd0>)
 8002bea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002bec:	4b1d      	ldr	r3, [pc, #116]	; (8002c64 <prvAddNewTaskToReadyList+0xd0>)
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bf8:	4b1b      	ldr	r3, [pc, #108]	; (8002c68 <prvAddNewTaskToReadyList+0xd4>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d903      	bls.n	8002c08 <prvAddNewTaskToReadyList+0x74>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c04:	4a18      	ldr	r2, [pc, #96]	; (8002c68 <prvAddNewTaskToReadyList+0xd4>)
 8002c06:	6013      	str	r3, [r2, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	4413      	add	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	4a15      	ldr	r2, [pc, #84]	; (8002c6c <prvAddNewTaskToReadyList+0xd8>)
 8002c16:	441a      	add	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	3304      	adds	r3, #4
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4610      	mov	r0, r2
 8002c20:	f7fe ff81 	bl	8001b26 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002c24:	f001 fb08 	bl	8004238 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002c28:	4b0d      	ldr	r3, [pc, #52]	; (8002c60 <prvAddNewTaskToReadyList+0xcc>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00e      	beq.n	8002c4e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002c30:	4b0a      	ldr	r3, [pc, #40]	; (8002c5c <prvAddNewTaskToReadyList+0xc8>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d207      	bcs.n	8002c4e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002c3e:	4b0c      	ldr	r3, [pc, #48]	; (8002c70 <prvAddNewTaskToReadyList+0xdc>)
 8002c40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c44:	601a      	str	r2, [r3, #0]
 8002c46:	f3bf 8f4f 	dsb	sy
 8002c4a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c4e:	bf00      	nop
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	20000bbc 	.word	0x20000bbc
 8002c5c:	200006e8 	.word	0x200006e8
 8002c60:	20000bc8 	.word	0x20000bc8
 8002c64:	20000bd8 	.word	0x20000bd8
 8002c68:	20000bc4 	.word	0x20000bc4
 8002c6c:	200006ec 	.word	0x200006ec
 8002c70:	e000ed04 	.word	0xe000ed04

08002c74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d016      	beq.n	8002cb4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002c86:	4b13      	ldr	r3, [pc, #76]	; (8002cd4 <vTaskDelay+0x60>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d009      	beq.n	8002ca2 <vTaskDelay+0x2e>
 8002c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c92:	f383 8811 	msr	BASEPRI, r3
 8002c96:	f3bf 8f6f 	isb	sy
 8002c9a:	f3bf 8f4f 	dsb	sy
 8002c9e:	60bb      	str	r3, [r7, #8]
 8002ca0:	e7fe      	b.n	8002ca0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002ca2:	f000 f87f 	bl	8002da4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 fdd3 	bl	8003854 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002cae:	f000 f887 	bl	8002dc0 <xTaskResumeAll>
 8002cb2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d107      	bne.n	8002cca <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8002cba:	4b07      	ldr	r3, [pc, #28]	; (8002cd8 <vTaskDelay+0x64>)
 8002cbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cc0:	601a      	str	r2, [r3, #0]
 8002cc2:	f3bf 8f4f 	dsb	sy
 8002cc6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002cca:	bf00      	nop
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	20000be4 	.word	0x20000be4
 8002cd8:	e000ed04 	.word	0xe000ed04

08002cdc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b08a      	sub	sp, #40	; 0x28
 8002ce0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002cea:	463a      	mov	r2, r7
 8002cec:	1d39      	adds	r1, r7, #4
 8002cee:	f107 0308 	add.w	r3, r7, #8
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fe feb6 	bl	8001a64 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002cf8:	6839      	ldr	r1, [r7, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	68ba      	ldr	r2, [r7, #8]
 8002cfe:	9202      	str	r2, [sp, #8]
 8002d00:	9301      	str	r3, [sp, #4]
 8002d02:	2300      	movs	r3, #0
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	2300      	movs	r3, #0
 8002d08:	460a      	mov	r2, r1
 8002d0a:	4920      	ldr	r1, [pc, #128]	; (8002d8c <vTaskStartScheduler+0xb0>)
 8002d0c:	4820      	ldr	r0, [pc, #128]	; (8002d90 <vTaskStartScheduler+0xb4>)
 8002d0e:	f7ff fe13 	bl	8002938 <xTaskCreateStatic>
 8002d12:	4602      	mov	r2, r0
 8002d14:	4b1f      	ldr	r3, [pc, #124]	; (8002d94 <vTaskStartScheduler+0xb8>)
 8002d16:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002d18:	4b1e      	ldr	r3, [pc, #120]	; (8002d94 <vTaskStartScheduler+0xb8>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d002      	beq.n	8002d26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002d20:	2301      	movs	r3, #1
 8002d22:	617b      	str	r3, [r7, #20]
 8002d24:	e001      	b.n	8002d2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002d26:	2300      	movs	r3, #0
 8002d28:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d102      	bne.n	8002d36 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002d30:	f000 fde4 	bl	80038fc <xTimerCreateTimerTask>
 8002d34:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d115      	bne.n	8002d68 <vTaskStartScheduler+0x8c>
 8002d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d40:	f383 8811 	msr	BASEPRI, r3
 8002d44:	f3bf 8f6f 	isb	sy
 8002d48:	f3bf 8f4f 	dsb	sy
 8002d4c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002d4e:	4b12      	ldr	r3, [pc, #72]	; (8002d98 <vTaskStartScheduler+0xbc>)
 8002d50:	f04f 32ff 	mov.w	r2, #4294967295
 8002d54:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002d56:	4b11      	ldr	r3, [pc, #68]	; (8002d9c <vTaskStartScheduler+0xc0>)
 8002d58:	2201      	movs	r2, #1
 8002d5a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002d5c:	4b10      	ldr	r3, [pc, #64]	; (8002da0 <vTaskStartScheduler+0xc4>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002d62:	f001 f99d 	bl	80040a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002d66:	e00d      	b.n	8002d84 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d6e:	d109      	bne.n	8002d84 <vTaskStartScheduler+0xa8>
 8002d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d74:	f383 8811 	msr	BASEPRI, r3
 8002d78:	f3bf 8f6f 	isb	sy
 8002d7c:	f3bf 8f4f 	dsb	sy
 8002d80:	60fb      	str	r3, [r7, #12]
 8002d82:	e7fe      	b.n	8002d82 <vTaskStartScheduler+0xa6>
}
 8002d84:	bf00      	nop
 8002d86:	3718      	adds	r7, #24
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	0800485c 	.word	0x0800485c
 8002d90:	080033a5 	.word	0x080033a5
 8002d94:	20000be0 	.word	0x20000be0
 8002d98:	20000bdc 	.word	0x20000bdc
 8002d9c:	20000bc8 	.word	0x20000bc8
 8002da0:	20000bc0 	.word	0x20000bc0

08002da4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002da8:	4b04      	ldr	r3, [pc, #16]	; (8002dbc <vTaskSuspendAll+0x18>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	3301      	adds	r3, #1
 8002dae:	4a03      	ldr	r2, [pc, #12]	; (8002dbc <vTaskSuspendAll+0x18>)
 8002db0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8002db2:	bf00      	nop
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr
 8002dbc:	20000be4 	.word	0x20000be4

08002dc0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002dce:	4b41      	ldr	r3, [pc, #260]	; (8002ed4 <xTaskResumeAll+0x114>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d109      	bne.n	8002dea <xTaskResumeAll+0x2a>
 8002dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dda:	f383 8811 	msr	BASEPRI, r3
 8002dde:	f3bf 8f6f 	isb	sy
 8002de2:	f3bf 8f4f 	dsb	sy
 8002de6:	603b      	str	r3, [r7, #0]
 8002de8:	e7fe      	b.n	8002de8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002dea:	f001 f9f7 	bl	80041dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002dee:	4b39      	ldr	r3, [pc, #228]	; (8002ed4 <xTaskResumeAll+0x114>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	3b01      	subs	r3, #1
 8002df4:	4a37      	ldr	r2, [pc, #220]	; (8002ed4 <xTaskResumeAll+0x114>)
 8002df6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002df8:	4b36      	ldr	r3, [pc, #216]	; (8002ed4 <xTaskResumeAll+0x114>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d162      	bne.n	8002ec6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002e00:	4b35      	ldr	r3, [pc, #212]	; (8002ed8 <xTaskResumeAll+0x118>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d05e      	beq.n	8002ec6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e08:	e02f      	b.n	8002e6a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e0a:	4b34      	ldr	r3, [pc, #208]	; (8002edc <xTaskResumeAll+0x11c>)
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	3318      	adds	r3, #24
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7fe fee2 	bl	8001be0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	3304      	adds	r3, #4
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7fe fedd 	bl	8001be0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e2a:	4b2d      	ldr	r3, [pc, #180]	; (8002ee0 <xTaskResumeAll+0x120>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d903      	bls.n	8002e3a <xTaskResumeAll+0x7a>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e36:	4a2a      	ldr	r2, [pc, #168]	; (8002ee0 <xTaskResumeAll+0x120>)
 8002e38:	6013      	str	r3, [r2, #0]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e3e:	4613      	mov	r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	4413      	add	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4a27      	ldr	r2, [pc, #156]	; (8002ee4 <xTaskResumeAll+0x124>)
 8002e48:	441a      	add	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	3304      	adds	r3, #4
 8002e4e:	4619      	mov	r1, r3
 8002e50:	4610      	mov	r0, r2
 8002e52:	f7fe fe68 	bl	8001b26 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e5a:	4b23      	ldr	r3, [pc, #140]	; (8002ee8 <xTaskResumeAll+0x128>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d302      	bcc.n	8002e6a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002e64:	4b21      	ldr	r3, [pc, #132]	; (8002eec <xTaskResumeAll+0x12c>)
 8002e66:	2201      	movs	r2, #1
 8002e68:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e6a:	4b1c      	ldr	r3, [pc, #112]	; (8002edc <xTaskResumeAll+0x11c>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1cb      	bne.n	8002e0a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002e78:	f000 fb46 	bl	8003508 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002e7c:	4b1c      	ldr	r3, [pc, #112]	; (8002ef0 <xTaskResumeAll+0x130>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d010      	beq.n	8002eaa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002e88:	f000 f846 	bl	8002f18 <xTaskIncrementTick>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d002      	beq.n	8002e98 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002e92:	4b16      	ldr	r3, [pc, #88]	; (8002eec <xTaskResumeAll+0x12c>)
 8002e94:	2201      	movs	r2, #1
 8002e96:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1f1      	bne.n	8002e88 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8002ea4:	4b12      	ldr	r3, [pc, #72]	; (8002ef0 <xTaskResumeAll+0x130>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002eaa:	4b10      	ldr	r3, [pc, #64]	; (8002eec <xTaskResumeAll+0x12c>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d009      	beq.n	8002ec6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002eb6:	4b0f      	ldr	r3, [pc, #60]	; (8002ef4 <xTaskResumeAll+0x134>)
 8002eb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	f3bf 8f4f 	dsb	sy
 8002ec2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002ec6:	f001 f9b7 	bl	8004238 <vPortExitCritical>

	return xAlreadyYielded;
 8002eca:	68bb      	ldr	r3, [r7, #8]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3710      	adds	r7, #16
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	20000be4 	.word	0x20000be4
 8002ed8:	20000bbc 	.word	0x20000bbc
 8002edc:	20000b7c 	.word	0x20000b7c
 8002ee0:	20000bc4 	.word	0x20000bc4
 8002ee4:	200006ec 	.word	0x200006ec
 8002ee8:	200006e8 	.word	0x200006e8
 8002eec:	20000bd0 	.word	0x20000bd0
 8002ef0:	20000bcc 	.word	0x20000bcc
 8002ef4:	e000ed04 	.word	0xe000ed04

08002ef8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002efe:	4b05      	ldr	r3, [pc, #20]	; (8002f14 <xTaskGetTickCount+0x1c>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002f04:	687b      	ldr	r3, [r7, #4]
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	20000bc0 	.word	0x20000bc0

08002f18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f22:	4b4e      	ldr	r3, [pc, #312]	; (800305c <xTaskIncrementTick+0x144>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	f040 8088 	bne.w	800303c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002f2c:	4b4c      	ldr	r3, [pc, #304]	; (8003060 <xTaskIncrementTick+0x148>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	3301      	adds	r3, #1
 8002f32:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002f34:	4a4a      	ldr	r2, [pc, #296]	; (8003060 <xTaskIncrementTick+0x148>)
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d11f      	bne.n	8002f80 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002f40:	4b48      	ldr	r3, [pc, #288]	; (8003064 <xTaskIncrementTick+0x14c>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d009      	beq.n	8002f5e <xTaskIncrementTick+0x46>
 8002f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f4e:	f383 8811 	msr	BASEPRI, r3
 8002f52:	f3bf 8f6f 	isb	sy
 8002f56:	f3bf 8f4f 	dsb	sy
 8002f5a:	603b      	str	r3, [r7, #0]
 8002f5c:	e7fe      	b.n	8002f5c <xTaskIncrementTick+0x44>
 8002f5e:	4b41      	ldr	r3, [pc, #260]	; (8003064 <xTaskIncrementTick+0x14c>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	60fb      	str	r3, [r7, #12]
 8002f64:	4b40      	ldr	r3, [pc, #256]	; (8003068 <xTaskIncrementTick+0x150>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a3e      	ldr	r2, [pc, #248]	; (8003064 <xTaskIncrementTick+0x14c>)
 8002f6a:	6013      	str	r3, [r2, #0]
 8002f6c:	4a3e      	ldr	r2, [pc, #248]	; (8003068 <xTaskIncrementTick+0x150>)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6013      	str	r3, [r2, #0]
 8002f72:	4b3e      	ldr	r3, [pc, #248]	; (800306c <xTaskIncrementTick+0x154>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	3301      	adds	r3, #1
 8002f78:	4a3c      	ldr	r2, [pc, #240]	; (800306c <xTaskIncrementTick+0x154>)
 8002f7a:	6013      	str	r3, [r2, #0]
 8002f7c:	f000 fac4 	bl	8003508 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002f80:	4b3b      	ldr	r3, [pc, #236]	; (8003070 <xTaskIncrementTick+0x158>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d349      	bcc.n	800301e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f8a:	4b36      	ldr	r3, [pc, #216]	; (8003064 <xTaskIncrementTick+0x14c>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d104      	bne.n	8002f9e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f94:	4b36      	ldr	r3, [pc, #216]	; (8003070 <xTaskIncrementTick+0x158>)
 8002f96:	f04f 32ff 	mov.w	r2, #4294967295
 8002f9a:	601a      	str	r2, [r3, #0]
					break;
 8002f9c:	e03f      	b.n	800301e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f9e:	4b31      	ldr	r3, [pc, #196]	; (8003064 <xTaskIncrementTick+0x14c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d203      	bcs.n	8002fbe <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002fb6:	4a2e      	ldr	r2, [pc, #184]	; (8003070 <xTaskIncrementTick+0x158>)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002fbc:	e02f      	b.n	800301e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	3304      	adds	r3, #4
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7fe fe0c 	bl	8001be0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d004      	beq.n	8002fda <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	3318      	adds	r3, #24
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7fe fe03 	bl	8001be0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fde:	4b25      	ldr	r3, [pc, #148]	; (8003074 <xTaskIncrementTick+0x15c>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d903      	bls.n	8002fee <xTaskIncrementTick+0xd6>
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fea:	4a22      	ldr	r2, [pc, #136]	; (8003074 <xTaskIncrementTick+0x15c>)
 8002fec:	6013      	str	r3, [r2, #0]
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	4413      	add	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4a1f      	ldr	r2, [pc, #124]	; (8003078 <xTaskIncrementTick+0x160>)
 8002ffc:	441a      	add	r2, r3
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	3304      	adds	r3, #4
 8003002:	4619      	mov	r1, r3
 8003004:	4610      	mov	r0, r2
 8003006:	f7fe fd8e 	bl	8001b26 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800300e:	4b1b      	ldr	r3, [pc, #108]	; (800307c <xTaskIncrementTick+0x164>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003014:	429a      	cmp	r2, r3
 8003016:	d3b8      	bcc.n	8002f8a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003018:	2301      	movs	r3, #1
 800301a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800301c:	e7b5      	b.n	8002f8a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800301e:	4b17      	ldr	r3, [pc, #92]	; (800307c <xTaskIncrementTick+0x164>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003024:	4914      	ldr	r1, [pc, #80]	; (8003078 <xTaskIncrementTick+0x160>)
 8003026:	4613      	mov	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	4413      	add	r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	440b      	add	r3, r1
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d907      	bls.n	8003046 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8003036:	2301      	movs	r3, #1
 8003038:	617b      	str	r3, [r7, #20]
 800303a:	e004      	b.n	8003046 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800303c:	4b10      	ldr	r3, [pc, #64]	; (8003080 <xTaskIncrementTick+0x168>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	3301      	adds	r3, #1
 8003042:	4a0f      	ldr	r2, [pc, #60]	; (8003080 <xTaskIncrementTick+0x168>)
 8003044:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003046:	4b0f      	ldr	r3, [pc, #60]	; (8003084 <xTaskIncrementTick+0x16c>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800304e:	2301      	movs	r3, #1
 8003050:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003052:	697b      	ldr	r3, [r7, #20]
}
 8003054:	4618      	mov	r0, r3
 8003056:	3718      	adds	r7, #24
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	20000be4 	.word	0x20000be4
 8003060:	20000bc0 	.word	0x20000bc0
 8003064:	20000b74 	.word	0x20000b74
 8003068:	20000b78 	.word	0x20000b78
 800306c:	20000bd4 	.word	0x20000bd4
 8003070:	20000bdc 	.word	0x20000bdc
 8003074:	20000bc4 	.word	0x20000bc4
 8003078:	200006ec 	.word	0x200006ec
 800307c:	200006e8 	.word	0x200006e8
 8003080:	20000bcc 	.word	0x20000bcc
 8003084:	20000bd0 	.word	0x20000bd0

08003088 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800308e:	4b27      	ldr	r3, [pc, #156]	; (800312c <vTaskSwitchContext+0xa4>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d003      	beq.n	800309e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003096:	4b26      	ldr	r3, [pc, #152]	; (8003130 <vTaskSwitchContext+0xa8>)
 8003098:	2201      	movs	r2, #1
 800309a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800309c:	e040      	b.n	8003120 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800309e:	4b24      	ldr	r3, [pc, #144]	; (8003130 <vTaskSwitchContext+0xa8>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030a4:	4b23      	ldr	r3, [pc, #140]	; (8003134 <vTaskSwitchContext+0xac>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	60fb      	str	r3, [r7, #12]
 80030aa:	e00f      	b.n	80030cc <vTaskSwitchContext+0x44>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d109      	bne.n	80030c6 <vTaskSwitchContext+0x3e>
 80030b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b6:	f383 8811 	msr	BASEPRI, r3
 80030ba:	f3bf 8f6f 	isb	sy
 80030be:	f3bf 8f4f 	dsb	sy
 80030c2:	607b      	str	r3, [r7, #4]
 80030c4:	e7fe      	b.n	80030c4 <vTaskSwitchContext+0x3c>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	3b01      	subs	r3, #1
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	491a      	ldr	r1, [pc, #104]	; (8003138 <vTaskSwitchContext+0xb0>)
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	4613      	mov	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4413      	add	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	440b      	add	r3, r1
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d0e5      	beq.n	80030ac <vTaskSwitchContext+0x24>
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	4613      	mov	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4413      	add	r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	4a13      	ldr	r2, [pc, #76]	; (8003138 <vTaskSwitchContext+0xb0>)
 80030ec:	4413      	add	r3, r2
 80030ee:	60bb      	str	r3, [r7, #8]
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	605a      	str	r2, [r3, #4]
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	3308      	adds	r3, #8
 8003102:	429a      	cmp	r2, r3
 8003104:	d104      	bne.n	8003110 <vTaskSwitchContext+0x88>
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	605a      	str	r2, [r3, #4]
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	4a09      	ldr	r2, [pc, #36]	; (800313c <vTaskSwitchContext+0xb4>)
 8003118:	6013      	str	r3, [r2, #0]
 800311a:	4a06      	ldr	r2, [pc, #24]	; (8003134 <vTaskSwitchContext+0xac>)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6013      	str	r3, [r2, #0]
}
 8003120:	bf00      	nop
 8003122:	3714      	adds	r7, #20
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr
 800312c:	20000be4 	.word	0x20000be4
 8003130:	20000bd0 	.word	0x20000bd0
 8003134:	20000bc4 	.word	0x20000bc4
 8003138:	200006ec 	.word	0x200006ec
 800313c:	200006e8 	.word	0x200006e8

08003140 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d109      	bne.n	8003164 <vTaskPlaceOnEventList+0x24>
 8003150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003154:	f383 8811 	msr	BASEPRI, r3
 8003158:	f3bf 8f6f 	isb	sy
 800315c:	f3bf 8f4f 	dsb	sy
 8003160:	60fb      	str	r3, [r7, #12]
 8003162:	e7fe      	b.n	8003162 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003164:	4b07      	ldr	r3, [pc, #28]	; (8003184 <vTaskPlaceOnEventList+0x44>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	3318      	adds	r3, #24
 800316a:	4619      	mov	r1, r3
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f7fe fcfe 	bl	8001b6e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003172:	2101      	movs	r1, #1
 8003174:	6838      	ldr	r0, [r7, #0]
 8003176:	f000 fb6d 	bl	8003854 <prvAddCurrentTaskToDelayedList>
}
 800317a:	bf00      	nop
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	200006e8 	.word	0x200006e8

08003188 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d109      	bne.n	80031ae <vTaskPlaceOnEventListRestricted+0x26>
 800319a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800319e:	f383 8811 	msr	BASEPRI, r3
 80031a2:	f3bf 8f6f 	isb	sy
 80031a6:	f3bf 8f4f 	dsb	sy
 80031aa:	617b      	str	r3, [r7, #20]
 80031ac:	e7fe      	b.n	80031ac <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80031ae:	4b0a      	ldr	r3, [pc, #40]	; (80031d8 <vTaskPlaceOnEventListRestricted+0x50>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	3318      	adds	r3, #24
 80031b4:	4619      	mov	r1, r3
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f7fe fcb5 	bl	8001b26 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d002      	beq.n	80031c8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80031c2:	f04f 33ff 	mov.w	r3, #4294967295
 80031c6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80031c8:	6879      	ldr	r1, [r7, #4]
 80031ca:	68b8      	ldr	r0, [r7, #8]
 80031cc:	f000 fb42 	bl	8003854 <prvAddCurrentTaskToDelayedList>
	}
 80031d0:	bf00      	nop
 80031d2:	3718      	adds	r7, #24
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	200006e8 	.word	0x200006e8

080031dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d109      	bne.n	8003206 <xTaskRemoveFromEventList+0x2a>
 80031f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f6:	f383 8811 	msr	BASEPRI, r3
 80031fa:	f3bf 8f6f 	isb	sy
 80031fe:	f3bf 8f4f 	dsb	sy
 8003202:	60fb      	str	r3, [r7, #12]
 8003204:	e7fe      	b.n	8003204 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	3318      	adds	r3, #24
 800320a:	4618      	mov	r0, r3
 800320c:	f7fe fce8 	bl	8001be0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003210:	4b1d      	ldr	r3, [pc, #116]	; (8003288 <xTaskRemoveFromEventList+0xac>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d11d      	bne.n	8003254 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	3304      	adds	r3, #4
 800321c:	4618      	mov	r0, r3
 800321e:	f7fe fcdf 	bl	8001be0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003226:	4b19      	ldr	r3, [pc, #100]	; (800328c <xTaskRemoveFromEventList+0xb0>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	429a      	cmp	r2, r3
 800322c:	d903      	bls.n	8003236 <xTaskRemoveFromEventList+0x5a>
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003232:	4a16      	ldr	r2, [pc, #88]	; (800328c <xTaskRemoveFromEventList+0xb0>)
 8003234:	6013      	str	r3, [r2, #0]
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800323a:	4613      	mov	r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	4413      	add	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4a13      	ldr	r2, [pc, #76]	; (8003290 <xTaskRemoveFromEventList+0xb4>)
 8003244:	441a      	add	r2, r3
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	3304      	adds	r3, #4
 800324a:	4619      	mov	r1, r3
 800324c:	4610      	mov	r0, r2
 800324e:	f7fe fc6a 	bl	8001b26 <vListInsertEnd>
 8003252:	e005      	b.n	8003260 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	3318      	adds	r3, #24
 8003258:	4619      	mov	r1, r3
 800325a:	480e      	ldr	r0, [pc, #56]	; (8003294 <xTaskRemoveFromEventList+0xb8>)
 800325c:	f7fe fc63 	bl	8001b26 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003264:	4b0c      	ldr	r3, [pc, #48]	; (8003298 <xTaskRemoveFromEventList+0xbc>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326a:	429a      	cmp	r2, r3
 800326c:	d905      	bls.n	800327a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800326e:	2301      	movs	r3, #1
 8003270:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003272:	4b0a      	ldr	r3, [pc, #40]	; (800329c <xTaskRemoveFromEventList+0xc0>)
 8003274:	2201      	movs	r2, #1
 8003276:	601a      	str	r2, [r3, #0]
 8003278:	e001      	b.n	800327e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800327a:	2300      	movs	r3, #0
 800327c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800327e:	697b      	ldr	r3, [r7, #20]
}
 8003280:	4618      	mov	r0, r3
 8003282:	3718      	adds	r7, #24
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	20000be4 	.word	0x20000be4
 800328c:	20000bc4 	.word	0x20000bc4
 8003290:	200006ec 	.word	0x200006ec
 8003294:	20000b7c 	.word	0x20000b7c
 8003298:	200006e8 	.word	0x200006e8
 800329c:	20000bd0 	.word	0x20000bd0

080032a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80032a8:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <vTaskInternalSetTimeOutState+0x24>)
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80032b0:	4b05      	ldr	r3, [pc, #20]	; (80032c8 <vTaskInternalSetTimeOutState+0x28>)
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	605a      	str	r2, [r3, #4]
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr
 80032c4:	20000bd4 	.word	0x20000bd4
 80032c8:	20000bc0 	.word	0x20000bc0

080032cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b088      	sub	sp, #32
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d109      	bne.n	80032f0 <xTaskCheckForTimeOut+0x24>
 80032dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e0:	f383 8811 	msr	BASEPRI, r3
 80032e4:	f3bf 8f6f 	isb	sy
 80032e8:	f3bf 8f4f 	dsb	sy
 80032ec:	613b      	str	r3, [r7, #16]
 80032ee:	e7fe      	b.n	80032ee <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d109      	bne.n	800330a <xTaskCheckForTimeOut+0x3e>
 80032f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032fa:	f383 8811 	msr	BASEPRI, r3
 80032fe:	f3bf 8f6f 	isb	sy
 8003302:	f3bf 8f4f 	dsb	sy
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	e7fe      	b.n	8003308 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800330a:	f000 ff67 	bl	80041dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800330e:	4b1d      	ldr	r3, [pc, #116]	; (8003384 <xTaskCheckForTimeOut+0xb8>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003326:	d102      	bne.n	800332e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003328:	2300      	movs	r3, #0
 800332a:	61fb      	str	r3, [r7, #28]
 800332c:	e023      	b.n	8003376 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	4b15      	ldr	r3, [pc, #84]	; (8003388 <xTaskCheckForTimeOut+0xbc>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	429a      	cmp	r2, r3
 8003338:	d007      	beq.n	800334a <xTaskCheckForTimeOut+0x7e>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	69ba      	ldr	r2, [r7, #24]
 8003340:	429a      	cmp	r2, r3
 8003342:	d302      	bcc.n	800334a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003344:	2301      	movs	r3, #1
 8003346:	61fb      	str	r3, [r7, #28]
 8003348:	e015      	b.n	8003376 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	429a      	cmp	r2, r3
 8003352:	d20b      	bcs.n	800336c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	1ad2      	subs	r2, r2, r3
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f7ff ff9d 	bl	80032a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003366:	2300      	movs	r3, #0
 8003368:	61fb      	str	r3, [r7, #28]
 800336a:	e004      	b.n	8003376 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	2200      	movs	r2, #0
 8003370:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003372:	2301      	movs	r3, #1
 8003374:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003376:	f000 ff5f 	bl	8004238 <vPortExitCritical>

	return xReturn;
 800337a:	69fb      	ldr	r3, [r7, #28]
}
 800337c:	4618      	mov	r0, r3
 800337e:	3720      	adds	r7, #32
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	20000bc0 	.word	0x20000bc0
 8003388:	20000bd4 	.word	0x20000bd4

0800338c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003390:	4b03      	ldr	r3, [pc, #12]	; (80033a0 <vTaskMissedYield+0x14>)
 8003392:	2201      	movs	r2, #1
 8003394:	601a      	str	r2, [r3, #0]
}
 8003396:	bf00      	nop
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr
 80033a0:	20000bd0 	.word	0x20000bd0

080033a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80033ac:	f000 f852 	bl	8003454 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80033b0:	4b06      	ldr	r3, [pc, #24]	; (80033cc <prvIdleTask+0x28>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d9f9      	bls.n	80033ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80033b8:	4b05      	ldr	r3, [pc, #20]	; (80033d0 <prvIdleTask+0x2c>)
 80033ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033be:	601a      	str	r2, [r3, #0]
 80033c0:	f3bf 8f4f 	dsb	sy
 80033c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80033c8:	e7f0      	b.n	80033ac <prvIdleTask+0x8>
 80033ca:	bf00      	nop
 80033cc:	200006ec 	.word	0x200006ec
 80033d0:	e000ed04 	.word	0xe000ed04

080033d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80033da:	2300      	movs	r3, #0
 80033dc:	607b      	str	r3, [r7, #4]
 80033de:	e00c      	b.n	80033fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	4613      	mov	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4413      	add	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4a12      	ldr	r2, [pc, #72]	; (8003434 <prvInitialiseTaskLists+0x60>)
 80033ec:	4413      	add	r3, r2
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7fe fb6c 	bl	8001acc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	3301      	adds	r3, #1
 80033f8:	607b      	str	r3, [r7, #4]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2b37      	cmp	r3, #55	; 0x37
 80033fe:	d9ef      	bls.n	80033e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003400:	480d      	ldr	r0, [pc, #52]	; (8003438 <prvInitialiseTaskLists+0x64>)
 8003402:	f7fe fb63 	bl	8001acc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003406:	480d      	ldr	r0, [pc, #52]	; (800343c <prvInitialiseTaskLists+0x68>)
 8003408:	f7fe fb60 	bl	8001acc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800340c:	480c      	ldr	r0, [pc, #48]	; (8003440 <prvInitialiseTaskLists+0x6c>)
 800340e:	f7fe fb5d 	bl	8001acc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003412:	480c      	ldr	r0, [pc, #48]	; (8003444 <prvInitialiseTaskLists+0x70>)
 8003414:	f7fe fb5a 	bl	8001acc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003418:	480b      	ldr	r0, [pc, #44]	; (8003448 <prvInitialiseTaskLists+0x74>)
 800341a:	f7fe fb57 	bl	8001acc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800341e:	4b0b      	ldr	r3, [pc, #44]	; (800344c <prvInitialiseTaskLists+0x78>)
 8003420:	4a05      	ldr	r2, [pc, #20]	; (8003438 <prvInitialiseTaskLists+0x64>)
 8003422:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003424:	4b0a      	ldr	r3, [pc, #40]	; (8003450 <prvInitialiseTaskLists+0x7c>)
 8003426:	4a05      	ldr	r2, [pc, #20]	; (800343c <prvInitialiseTaskLists+0x68>)
 8003428:	601a      	str	r2, [r3, #0]
}
 800342a:	bf00      	nop
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	200006ec 	.word	0x200006ec
 8003438:	20000b4c 	.word	0x20000b4c
 800343c:	20000b60 	.word	0x20000b60
 8003440:	20000b7c 	.word	0x20000b7c
 8003444:	20000b90 	.word	0x20000b90
 8003448:	20000ba8 	.word	0x20000ba8
 800344c:	20000b74 	.word	0x20000b74
 8003450:	20000b78 	.word	0x20000b78

08003454 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800345a:	e019      	b.n	8003490 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800345c:	f000 febe 	bl	80041dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003460:	4b0f      	ldr	r3, [pc, #60]	; (80034a0 <prvCheckTasksWaitingTermination+0x4c>)
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	3304      	adds	r3, #4
 800346c:	4618      	mov	r0, r3
 800346e:	f7fe fbb7 	bl	8001be0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003472:	4b0c      	ldr	r3, [pc, #48]	; (80034a4 <prvCheckTasksWaitingTermination+0x50>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	3b01      	subs	r3, #1
 8003478:	4a0a      	ldr	r2, [pc, #40]	; (80034a4 <prvCheckTasksWaitingTermination+0x50>)
 800347a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800347c:	4b0a      	ldr	r3, [pc, #40]	; (80034a8 <prvCheckTasksWaitingTermination+0x54>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	3b01      	subs	r3, #1
 8003482:	4a09      	ldr	r2, [pc, #36]	; (80034a8 <prvCheckTasksWaitingTermination+0x54>)
 8003484:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003486:	f000 fed7 	bl	8004238 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 f80e 	bl	80034ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003490:	4b05      	ldr	r3, [pc, #20]	; (80034a8 <prvCheckTasksWaitingTermination+0x54>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1e1      	bne.n	800345c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003498:	bf00      	nop
 800349a:	3708      	adds	r7, #8
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	20000b90 	.word	0x20000b90
 80034a4:	20000bbc 	.word	0x20000bbc
 80034a8:	20000ba4 	.word	0x20000ba4

080034ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d108      	bne.n	80034d0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c2:	4618      	mov	r0, r3
 80034c4:	f001 f866 	bl	8004594 <vPortFree>
				vPortFree( pxTCB );
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f001 f863 	bl	8004594 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80034ce:	e017      	b.n	8003500 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d103      	bne.n	80034e2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f001 f85a 	bl	8004594 <vPortFree>
	}
 80034e0:	e00e      	b.n	8003500 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d009      	beq.n	8003500 <prvDeleteTCB+0x54>
 80034ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f0:	f383 8811 	msr	BASEPRI, r3
 80034f4:	f3bf 8f6f 	isb	sy
 80034f8:	f3bf 8f4f 	dsb	sy
 80034fc:	60fb      	str	r3, [r7, #12]
 80034fe:	e7fe      	b.n	80034fe <prvDeleteTCB+0x52>
	}
 8003500:	bf00      	nop
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800350e:	4b0c      	ldr	r3, [pc, #48]	; (8003540 <prvResetNextTaskUnblockTime+0x38>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d104      	bne.n	8003522 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003518:	4b0a      	ldr	r3, [pc, #40]	; (8003544 <prvResetNextTaskUnblockTime+0x3c>)
 800351a:	f04f 32ff 	mov.w	r2, #4294967295
 800351e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003520:	e008      	b.n	8003534 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003522:	4b07      	ldr	r3, [pc, #28]	; (8003540 <prvResetNextTaskUnblockTime+0x38>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	4a04      	ldr	r2, [pc, #16]	; (8003544 <prvResetNextTaskUnblockTime+0x3c>)
 8003532:	6013      	str	r3, [r2, #0]
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr
 8003540:	20000b74 	.word	0x20000b74
 8003544:	20000bdc 	.word	0x20000bdc

08003548 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800354e:	4b0b      	ldr	r3, [pc, #44]	; (800357c <xTaskGetSchedulerState+0x34>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d102      	bne.n	800355c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003556:	2301      	movs	r3, #1
 8003558:	607b      	str	r3, [r7, #4]
 800355a:	e008      	b.n	800356e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800355c:	4b08      	ldr	r3, [pc, #32]	; (8003580 <xTaskGetSchedulerState+0x38>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d102      	bne.n	800356a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003564:	2302      	movs	r3, #2
 8003566:	607b      	str	r3, [r7, #4]
 8003568:	e001      	b.n	800356e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800356a:	2300      	movs	r3, #0
 800356c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800356e:	687b      	ldr	r3, [r7, #4]
	}
 8003570:	4618      	mov	r0, r3
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr
 800357c:	20000bc8 	.word	0x20000bc8
 8003580:	20000be4 	.word	0x20000be4

08003584 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003590:	2300      	movs	r3, #0
 8003592:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d051      	beq.n	800363e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800359e:	4b2a      	ldr	r3, [pc, #168]	; (8003648 <xTaskPriorityInherit+0xc4>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d241      	bcs.n	800362c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	db06      	blt.n	80035be <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035b0:	4b25      	ldr	r3, [pc, #148]	; (8003648 <xTaskPriorityInherit+0xc4>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	6959      	ldr	r1, [r3, #20]
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c6:	4613      	mov	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4413      	add	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	4a1f      	ldr	r2, [pc, #124]	; (800364c <xTaskPriorityInherit+0xc8>)
 80035d0:	4413      	add	r3, r2
 80035d2:	4299      	cmp	r1, r3
 80035d4:	d122      	bne.n	800361c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	3304      	adds	r3, #4
 80035da:	4618      	mov	r0, r3
 80035dc:	f7fe fb00 	bl	8001be0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80035e0:	4b19      	ldr	r3, [pc, #100]	; (8003648 <xTaskPriorityInherit+0xc4>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ee:	4b18      	ldr	r3, [pc, #96]	; (8003650 <xTaskPriorityInherit+0xcc>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d903      	bls.n	80035fe <xTaskPriorityInherit+0x7a>
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fa:	4a15      	ldr	r2, [pc, #84]	; (8003650 <xTaskPriorityInherit+0xcc>)
 80035fc:	6013      	str	r3, [r2, #0]
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003602:	4613      	mov	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	4413      	add	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4a10      	ldr	r2, [pc, #64]	; (800364c <xTaskPriorityInherit+0xc8>)
 800360c:	441a      	add	r2, r3
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	3304      	adds	r3, #4
 8003612:	4619      	mov	r1, r3
 8003614:	4610      	mov	r0, r2
 8003616:	f7fe fa86 	bl	8001b26 <vListInsertEnd>
 800361a:	e004      	b.n	8003626 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800361c:	4b0a      	ldr	r3, [pc, #40]	; (8003648 <xTaskPriorityInherit+0xc4>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8003626:	2301      	movs	r3, #1
 8003628:	60fb      	str	r3, [r7, #12]
 800362a:	e008      	b.n	800363e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003630:	4b05      	ldr	r3, [pc, #20]	; (8003648 <xTaskPriorityInherit+0xc4>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003636:	429a      	cmp	r2, r3
 8003638:	d201      	bcs.n	800363e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800363a:	2301      	movs	r3, #1
 800363c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800363e:	68fb      	ldr	r3, [r7, #12]
	}
 8003640:	4618      	mov	r0, r3
 8003642:	3710      	adds	r7, #16
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	200006e8 	.word	0x200006e8
 800364c:	200006ec 	.word	0x200006ec
 8003650:	20000bc4 	.word	0x20000bc4

08003654 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003660:	2300      	movs	r3, #0
 8003662:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d054      	beq.n	8003714 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800366a:	4b2d      	ldr	r3, [pc, #180]	; (8003720 <xTaskPriorityDisinherit+0xcc>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	429a      	cmp	r2, r3
 8003672:	d009      	beq.n	8003688 <xTaskPriorityDisinherit+0x34>
 8003674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003678:	f383 8811 	msr	BASEPRI, r3
 800367c:	f3bf 8f6f 	isb	sy
 8003680:	f3bf 8f4f 	dsb	sy
 8003684:	60fb      	str	r3, [r7, #12]
 8003686:	e7fe      	b.n	8003686 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800368c:	2b00      	cmp	r3, #0
 800368e:	d109      	bne.n	80036a4 <xTaskPriorityDisinherit+0x50>
 8003690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003694:	f383 8811 	msr	BASEPRI, r3
 8003698:	f3bf 8f6f 	isb	sy
 800369c:	f3bf 8f4f 	dsb	sy
 80036a0:	60bb      	str	r3, [r7, #8]
 80036a2:	e7fe      	b.n	80036a2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036a8:	1e5a      	subs	r2, r3, #1
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d02c      	beq.n	8003714 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d128      	bne.n	8003714 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	3304      	adds	r3, #4
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7fe fa8a 	bl	8001be0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e4:	4b0f      	ldr	r3, [pc, #60]	; (8003724 <xTaskPriorityDisinherit+0xd0>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d903      	bls.n	80036f4 <xTaskPriorityDisinherit+0xa0>
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f0:	4a0c      	ldr	r2, [pc, #48]	; (8003724 <xTaskPriorityDisinherit+0xd0>)
 80036f2:	6013      	str	r3, [r2, #0]
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036f8:	4613      	mov	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4413      	add	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	4a09      	ldr	r2, [pc, #36]	; (8003728 <xTaskPriorityDisinherit+0xd4>)
 8003702:	441a      	add	r2, r3
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	3304      	adds	r3, #4
 8003708:	4619      	mov	r1, r3
 800370a:	4610      	mov	r0, r2
 800370c:	f7fe fa0b 	bl	8001b26 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003710:	2301      	movs	r3, #1
 8003712:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003714:	697b      	ldr	r3, [r7, #20]
	}
 8003716:	4618      	mov	r0, r3
 8003718:	3718      	adds	r7, #24
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	200006e8 	.word	0x200006e8
 8003724:	20000bc4 	.word	0x20000bc4
 8003728:	200006ec 	.word	0x200006ec

0800372c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800372c:	b580      	push	{r7, lr}
 800372e:	b088      	sub	sp, #32
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800373a:	2301      	movs	r3, #1
 800373c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d068      	beq.n	8003816 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003748:	2b00      	cmp	r3, #0
 800374a:	d109      	bne.n	8003760 <vTaskPriorityDisinheritAfterTimeout+0x34>
 800374c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003750:	f383 8811 	msr	BASEPRI, r3
 8003754:	f3bf 8f6f 	isb	sy
 8003758:	f3bf 8f4f 	dsb	sy
 800375c:	60fb      	str	r3, [r7, #12]
 800375e:	e7fe      	b.n	800375e <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003764:	683a      	ldr	r2, [r7, #0]
 8003766:	429a      	cmp	r2, r3
 8003768:	d902      	bls.n	8003770 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	61fb      	str	r3, [r7, #28]
 800376e:	e002      	b.n	8003776 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003774:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377a:	69fa      	ldr	r2, [r7, #28]
 800377c:	429a      	cmp	r2, r3
 800377e:	d04a      	beq.n	8003816 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	429a      	cmp	r2, r3
 8003788:	d145      	bne.n	8003816 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800378a:	4b25      	ldr	r3, [pc, #148]	; (8003820 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	429a      	cmp	r2, r3
 8003792:	d109      	bne.n	80037a8 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8003794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003798:	f383 8811 	msr	BASEPRI, r3
 800379c:	f3bf 8f6f 	isb	sy
 80037a0:	f3bf 8f4f 	dsb	sy
 80037a4:	60bb      	str	r3, [r7, #8]
 80037a6:	e7fe      	b.n	80037a6 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ac:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	69fa      	ldr	r2, [r7, #28]
 80037b2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	db04      	blt.n	80037c6 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	6959      	ldr	r1, [r3, #20]
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	4613      	mov	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4413      	add	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4a13      	ldr	r2, [pc, #76]	; (8003824 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80037d6:	4413      	add	r3, r2
 80037d8:	4299      	cmp	r1, r3
 80037da:	d11c      	bne.n	8003816 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	3304      	adds	r3, #4
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7fe f9fd 	bl	8001be0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ea:	4b0f      	ldr	r3, [pc, #60]	; (8003828 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d903      	bls.n	80037fa <vTaskPriorityDisinheritAfterTimeout+0xce>
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f6:	4a0c      	ldr	r2, [pc, #48]	; (8003828 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80037f8:	6013      	str	r3, [r2, #0]
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037fe:	4613      	mov	r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	4413      	add	r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	4a07      	ldr	r2, [pc, #28]	; (8003824 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8003808:	441a      	add	r2, r3
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	3304      	adds	r3, #4
 800380e:	4619      	mov	r1, r3
 8003810:	4610      	mov	r0, r2
 8003812:	f7fe f988 	bl	8001b26 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003816:	bf00      	nop
 8003818:	3720      	adds	r7, #32
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	200006e8 	.word	0x200006e8
 8003824:	200006ec 	.word	0x200006ec
 8003828:	20000bc4 	.word	0x20000bc4

0800382c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003830:	4b07      	ldr	r3, [pc, #28]	; (8003850 <pvTaskIncrementMutexHeldCount+0x24>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d004      	beq.n	8003842 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003838:	4b05      	ldr	r3, [pc, #20]	; (8003850 <pvTaskIncrementMutexHeldCount+0x24>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800383e:	3201      	adds	r2, #1
 8003840:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8003842:	4b03      	ldr	r3, [pc, #12]	; (8003850 <pvTaskIncrementMutexHeldCount+0x24>)
 8003844:	681b      	ldr	r3, [r3, #0]
	}
 8003846:	4618      	mov	r0, r3
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr
 8003850:	200006e8 	.word	0x200006e8

08003854 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800385e:	4b21      	ldr	r3, [pc, #132]	; (80038e4 <prvAddCurrentTaskToDelayedList+0x90>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003864:	4b20      	ldr	r3, [pc, #128]	; (80038e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	3304      	adds	r3, #4
 800386a:	4618      	mov	r0, r3
 800386c:	f7fe f9b8 	bl	8001be0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003876:	d10a      	bne.n	800388e <prvAddCurrentTaskToDelayedList+0x3a>
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d007      	beq.n	800388e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800387e:	4b1a      	ldr	r3, [pc, #104]	; (80038e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	3304      	adds	r3, #4
 8003884:	4619      	mov	r1, r3
 8003886:	4819      	ldr	r0, [pc, #100]	; (80038ec <prvAddCurrentTaskToDelayedList+0x98>)
 8003888:	f7fe f94d 	bl	8001b26 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800388c:	e026      	b.n	80038dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4413      	add	r3, r2
 8003894:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003896:	4b14      	ldr	r3, [pc, #80]	; (80038e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68ba      	ldr	r2, [r7, #8]
 800389c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800389e:	68ba      	ldr	r2, [r7, #8]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d209      	bcs.n	80038ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038a6:	4b12      	ldr	r3, [pc, #72]	; (80038f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	4b0f      	ldr	r3, [pc, #60]	; (80038e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	3304      	adds	r3, #4
 80038b0:	4619      	mov	r1, r3
 80038b2:	4610      	mov	r0, r2
 80038b4:	f7fe f95b 	bl	8001b6e <vListInsert>
}
 80038b8:	e010      	b.n	80038dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038ba:	4b0e      	ldr	r3, [pc, #56]	; (80038f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	4b0a      	ldr	r3, [pc, #40]	; (80038e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	3304      	adds	r3, #4
 80038c4:	4619      	mov	r1, r3
 80038c6:	4610      	mov	r0, r2
 80038c8:	f7fe f951 	bl	8001b6e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80038cc:	4b0a      	ldr	r3, [pc, #40]	; (80038f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68ba      	ldr	r2, [r7, #8]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d202      	bcs.n	80038dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80038d6:	4a08      	ldr	r2, [pc, #32]	; (80038f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	6013      	str	r3, [r2, #0]
}
 80038dc:	bf00      	nop
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	20000bc0 	.word	0x20000bc0
 80038e8:	200006e8 	.word	0x200006e8
 80038ec:	20000ba8 	.word	0x20000ba8
 80038f0:	20000b78 	.word	0x20000b78
 80038f4:	20000b74 	.word	0x20000b74
 80038f8:	20000bdc 	.word	0x20000bdc

080038fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b08a      	sub	sp, #40	; 0x28
 8003900:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003902:	2300      	movs	r3, #0
 8003904:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003906:	f000 faff 	bl	8003f08 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800390a:	4b1c      	ldr	r3, [pc, #112]	; (800397c <xTimerCreateTimerTask+0x80>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d021      	beq.n	8003956 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003912:	2300      	movs	r3, #0
 8003914:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003916:	2300      	movs	r3, #0
 8003918:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800391a:	1d3a      	adds	r2, r7, #4
 800391c:	f107 0108 	add.w	r1, r7, #8
 8003920:	f107 030c 	add.w	r3, r7, #12
 8003924:	4618      	mov	r0, r3
 8003926:	f7fe f8b7 	bl	8001a98 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800392a:	6879      	ldr	r1, [r7, #4]
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	9202      	str	r2, [sp, #8]
 8003932:	9301      	str	r3, [sp, #4]
 8003934:	2302      	movs	r3, #2
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	2300      	movs	r3, #0
 800393a:	460a      	mov	r2, r1
 800393c:	4910      	ldr	r1, [pc, #64]	; (8003980 <xTimerCreateTimerTask+0x84>)
 800393e:	4811      	ldr	r0, [pc, #68]	; (8003984 <xTimerCreateTimerTask+0x88>)
 8003940:	f7fe fffa 	bl	8002938 <xTaskCreateStatic>
 8003944:	4602      	mov	r2, r0
 8003946:	4b10      	ldr	r3, [pc, #64]	; (8003988 <xTimerCreateTimerTask+0x8c>)
 8003948:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800394a:	4b0f      	ldr	r3, [pc, #60]	; (8003988 <xTimerCreateTimerTask+0x8c>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003952:	2301      	movs	r3, #1
 8003954:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d109      	bne.n	8003970 <xTimerCreateTimerTask+0x74>
 800395c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003960:	f383 8811 	msr	BASEPRI, r3
 8003964:	f3bf 8f6f 	isb	sy
 8003968:	f3bf 8f4f 	dsb	sy
 800396c:	613b      	str	r3, [r7, #16]
 800396e:	e7fe      	b.n	800396e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8003970:	697b      	ldr	r3, [r7, #20]
}
 8003972:	4618      	mov	r0, r3
 8003974:	3718      	adds	r7, #24
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	20000c18 	.word	0x20000c18
 8003980:	08004864 	.word	0x08004864
 8003984:	08003abd 	.word	0x08003abd
 8003988:	20000c1c 	.word	0x20000c1c

0800398c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b08a      	sub	sp, #40	; 0x28
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
 8003998:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800399a:	2300      	movs	r3, #0
 800399c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d109      	bne.n	80039b8 <xTimerGenericCommand+0x2c>
 80039a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a8:	f383 8811 	msr	BASEPRI, r3
 80039ac:	f3bf 8f6f 	isb	sy
 80039b0:	f3bf 8f4f 	dsb	sy
 80039b4:	623b      	str	r3, [r7, #32]
 80039b6:	e7fe      	b.n	80039b6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80039b8:	4b19      	ldr	r3, [pc, #100]	; (8003a20 <xTimerGenericCommand+0x94>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d02a      	beq.n	8003a16 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	2b05      	cmp	r3, #5
 80039d0:	dc18      	bgt.n	8003a04 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80039d2:	f7ff fdb9 	bl	8003548 <xTaskGetSchedulerState>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d109      	bne.n	80039f0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80039dc:	4b10      	ldr	r3, [pc, #64]	; (8003a20 <xTimerGenericCommand+0x94>)
 80039de:	6818      	ldr	r0, [r3, #0]
 80039e0:	f107 0110 	add.w	r1, r7, #16
 80039e4:	2300      	movs	r3, #0
 80039e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039e8:	f7fe fa92 	bl	8001f10 <xQueueGenericSend>
 80039ec:	6278      	str	r0, [r7, #36]	; 0x24
 80039ee:	e012      	b.n	8003a16 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80039f0:	4b0b      	ldr	r3, [pc, #44]	; (8003a20 <xTimerGenericCommand+0x94>)
 80039f2:	6818      	ldr	r0, [r3, #0]
 80039f4:	f107 0110 	add.w	r1, r7, #16
 80039f8:	2300      	movs	r3, #0
 80039fa:	2200      	movs	r2, #0
 80039fc:	f7fe fa88 	bl	8001f10 <xQueueGenericSend>
 8003a00:	6278      	str	r0, [r7, #36]	; 0x24
 8003a02:	e008      	b.n	8003a16 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003a04:	4b06      	ldr	r3, [pc, #24]	; (8003a20 <xTimerGenericCommand+0x94>)
 8003a06:	6818      	ldr	r0, [r3, #0]
 8003a08:	f107 0110 	add.w	r1, r7, #16
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	f7fe fb78 	bl	8002104 <xQueueGenericSendFromISR>
 8003a14:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3728      	adds	r7, #40	; 0x28
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	20000c18 	.word	0x20000c18

08003a24 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b088      	sub	sp, #32
 8003a28:	af02      	add	r7, sp, #8
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a2e:	4b22      	ldr	r3, [pc, #136]	; (8003ab8 <prvProcessExpiredTimer+0x94>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	3304      	adds	r3, #4
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7fe f8cf 	bl	8001be0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a48:	f003 0304 	and.w	r3, r3, #4
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d021      	beq.n	8003a94 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	699a      	ldr	r2, [r3, #24]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	18d1      	adds	r1, r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	6978      	ldr	r0, [r7, #20]
 8003a5e:	f000 f8d1 	bl	8003c04 <prvInsertTimerInActiveList>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d01e      	beq.n	8003aa6 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003a68:	2300      	movs	r3, #0
 8003a6a:	9300      	str	r3, [sp, #0]
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	2100      	movs	r1, #0
 8003a72:	6978      	ldr	r0, [r7, #20]
 8003a74:	f7ff ff8a 	bl	800398c <xTimerGenericCommand>
 8003a78:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d112      	bne.n	8003aa6 <prvProcessExpiredTimer+0x82>
 8003a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a84:	f383 8811 	msr	BASEPRI, r3
 8003a88:	f3bf 8f6f 	isb	sy
 8003a8c:	f3bf 8f4f 	dsb	sy
 8003a90:	60fb      	str	r3, [r7, #12]
 8003a92:	e7fe      	b.n	8003a92 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a9a:	f023 0301 	bic.w	r3, r3, #1
 8003a9e:	b2da      	uxtb	r2, r3
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	6978      	ldr	r0, [r7, #20]
 8003aac:	4798      	blx	r3
}
 8003aae:	bf00      	nop
 8003ab0:	3718      	adds	r7, #24
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	20000c10 	.word	0x20000c10

08003abc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003ac4:	f107 0308 	add.w	r3, r7, #8
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f000 f857 	bl	8003b7c <prvGetNextExpireTime>
 8003ace:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f000 f803 	bl	8003ae0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003ada:	f000 f8d5 	bl	8003c88 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003ade:	e7f1      	b.n	8003ac4 <prvTimerTask+0x8>

08003ae0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003aea:	f7ff f95b 	bl	8002da4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003aee:	f107 0308 	add.w	r3, r7, #8
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 f866 	bl	8003bc4 <prvSampleTimeNow>
 8003af8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d130      	bne.n	8003b62 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10a      	bne.n	8003b1c <prvProcessTimerOrBlockTask+0x3c>
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d806      	bhi.n	8003b1c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003b0e:	f7ff f957 	bl	8002dc0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003b12:	68f9      	ldr	r1, [r7, #12]
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f7ff ff85 	bl	8003a24 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003b1a:	e024      	b.n	8003b66 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d008      	beq.n	8003b34 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003b22:	4b13      	ldr	r3, [pc, #76]	; (8003b70 <prvProcessTimerOrBlockTask+0x90>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d101      	bne.n	8003b30 <prvProcessTimerOrBlockTask+0x50>
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e000      	b.n	8003b32 <prvProcessTimerOrBlockTask+0x52>
 8003b30:	2300      	movs	r3, #0
 8003b32:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003b34:	4b0f      	ldr	r3, [pc, #60]	; (8003b74 <prvProcessTimerOrBlockTask+0x94>)
 8003b36:	6818      	ldr	r0, [r3, #0]
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	4619      	mov	r1, r3
 8003b42:	f7fe fec5 	bl	80028d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003b46:	f7ff f93b 	bl	8002dc0 <xTaskResumeAll>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10a      	bne.n	8003b66 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003b50:	4b09      	ldr	r3, [pc, #36]	; (8003b78 <prvProcessTimerOrBlockTask+0x98>)
 8003b52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b56:	601a      	str	r2, [r3, #0]
 8003b58:	f3bf 8f4f 	dsb	sy
 8003b5c:	f3bf 8f6f 	isb	sy
}
 8003b60:	e001      	b.n	8003b66 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003b62:	f7ff f92d 	bl	8002dc0 <xTaskResumeAll>
}
 8003b66:	bf00      	nop
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	20000c14 	.word	0x20000c14
 8003b74:	20000c18 	.word	0x20000c18
 8003b78:	e000ed04 	.word	0xe000ed04

08003b7c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003b84:	4b0e      	ldr	r3, [pc, #56]	; (8003bc0 <prvGetNextExpireTime+0x44>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <prvGetNextExpireTime+0x16>
 8003b8e:	2201      	movs	r2, #1
 8003b90:	e000      	b.n	8003b94 <prvGetNextExpireTime+0x18>
 8003b92:	2200      	movs	r2, #0
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d105      	bne.n	8003bac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ba0:	4b07      	ldr	r3, [pc, #28]	; (8003bc0 <prvGetNextExpireTime+0x44>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	60fb      	str	r3, [r7, #12]
 8003baa:	e001      	b.n	8003bb0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003bac:	2300      	movs	r3, #0
 8003bae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3714      	adds	r7, #20
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	20000c10 	.word	0x20000c10

08003bc4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003bcc:	f7ff f994 	bl	8002ef8 <xTaskGetTickCount>
 8003bd0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003bd2:	4b0b      	ldr	r3, [pc, #44]	; (8003c00 <prvSampleTimeNow+0x3c>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d205      	bcs.n	8003be8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003bdc:	f000 f930 	bl	8003e40 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	601a      	str	r2, [r3, #0]
 8003be6:	e002      	b.n	8003bee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003bee:	4a04      	ldr	r2, [pc, #16]	; (8003c00 <prvSampleTimeNow+0x3c>)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	20000c20 	.word	0x20000c20

08003c04 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
 8003c10:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003c12:	2300      	movs	r3, #0
 8003c14:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	68ba      	ldr	r2, [r7, #8]
 8003c1a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d812      	bhi.n	8003c50 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	1ad2      	subs	r2, r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d302      	bcc.n	8003c3e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	617b      	str	r3, [r7, #20]
 8003c3c:	e01b      	b.n	8003c76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003c3e:	4b10      	ldr	r3, [pc, #64]	; (8003c80 <prvInsertTimerInActiveList+0x7c>)
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	3304      	adds	r3, #4
 8003c46:	4619      	mov	r1, r3
 8003c48:	4610      	mov	r0, r2
 8003c4a:	f7fd ff90 	bl	8001b6e <vListInsert>
 8003c4e:	e012      	b.n	8003c76 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d206      	bcs.n	8003c66 <prvInsertTimerInActiveList+0x62>
 8003c58:	68ba      	ldr	r2, [r7, #8]
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d302      	bcc.n	8003c66 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003c60:	2301      	movs	r3, #1
 8003c62:	617b      	str	r3, [r7, #20]
 8003c64:	e007      	b.n	8003c76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003c66:	4b07      	ldr	r3, [pc, #28]	; (8003c84 <prvInsertTimerInActiveList+0x80>)
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	3304      	adds	r3, #4
 8003c6e:	4619      	mov	r1, r3
 8003c70:	4610      	mov	r0, r2
 8003c72:	f7fd ff7c 	bl	8001b6e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003c76:	697b      	ldr	r3, [r7, #20]
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3718      	adds	r7, #24
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	20000c14 	.word	0x20000c14
 8003c84:	20000c10 	.word	0x20000c10

08003c88 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b08e      	sub	sp, #56	; 0x38
 8003c8c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003c8e:	e0c6      	b.n	8003e1e <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	da17      	bge.n	8003cc6 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003c96:	1d3b      	adds	r3, r7, #4
 8003c98:	3304      	adds	r3, #4
 8003c9a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d109      	bne.n	8003cb6 <prvProcessReceivedCommands+0x2e>
 8003ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca6:	f383 8811 	msr	BASEPRI, r3
 8003caa:	f3bf 8f6f 	isb	sy
 8003cae:	f3bf 8f4f 	dsb	sy
 8003cb2:	61fb      	str	r3, [r7, #28]
 8003cb4:	e7fe      	b.n	8003cb4 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cbc:	6850      	ldr	r0, [r2, #4]
 8003cbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cc0:	6892      	ldr	r2, [r2, #8]
 8003cc2:	4611      	mov	r1, r2
 8003cc4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f2c0 80a7 	blt.w	8003e1c <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d004      	beq.n	8003ce4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cdc:	3304      	adds	r3, #4
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7fd ff7e 	bl	8001be0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003ce4:	463b      	mov	r3, r7
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7ff ff6c 	bl	8003bc4 <prvSampleTimeNow>
 8003cec:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2b09      	cmp	r3, #9
 8003cf2:	f200 8094 	bhi.w	8003e1e <prvProcessReceivedCommands+0x196>
 8003cf6:	a201      	add	r2, pc, #4	; (adr r2, 8003cfc <prvProcessReceivedCommands+0x74>)
 8003cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfc:	08003d25 	.word	0x08003d25
 8003d00:	08003d25 	.word	0x08003d25
 8003d04:	08003d25 	.word	0x08003d25
 8003d08:	08003d97 	.word	0x08003d97
 8003d0c:	08003dab 	.word	0x08003dab
 8003d10:	08003df3 	.word	0x08003df3
 8003d14:	08003d25 	.word	0x08003d25
 8003d18:	08003d25 	.word	0x08003d25
 8003d1c:	08003d97 	.word	0x08003d97
 8003d20:	08003dab 	.word	0x08003dab
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d2a:	f043 0301 	orr.w	r3, r3, #1
 8003d2e:	b2da      	uxtb	r2, r3
 8003d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003d36:	68ba      	ldr	r2, [r7, #8]
 8003d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	18d1      	adds	r1, r2, r3
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d44:	f7ff ff5e 	bl	8003c04 <prvInsertTimerInActiveList>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d067      	beq.n	8003e1e <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d54:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d5c:	f003 0304 	and.w	r3, r3, #4
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d05c      	beq.n	8003e1e <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003d64:	68ba      	ldr	r2, [r7, #8]
 8003d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	441a      	add	r2, r3
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	9300      	str	r3, [sp, #0]
 8003d70:	2300      	movs	r3, #0
 8003d72:	2100      	movs	r1, #0
 8003d74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d76:	f7ff fe09 	bl	800398c <xTimerGenericCommand>
 8003d7a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003d7c:	6a3b      	ldr	r3, [r7, #32]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d14d      	bne.n	8003e1e <prvProcessReceivedCommands+0x196>
 8003d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d86:	f383 8811 	msr	BASEPRI, r3
 8003d8a:	f3bf 8f6f 	isb	sy
 8003d8e:	f3bf 8f4f 	dsb	sy
 8003d92:	61bb      	str	r3, [r7, #24]
 8003d94:	e7fe      	b.n	8003d94 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d9c:	f023 0301 	bic.w	r3, r3, #1
 8003da0:	b2da      	uxtb	r2, r3
 8003da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8003da8:	e039      	b.n	8003e1e <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003db0:	f043 0301 	orr.w	r3, r3, #1
 8003db4:	b2da      	uxtb	r2, r3
 8003db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d109      	bne.n	8003dde <prvProcessReceivedCommands+0x156>
 8003dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dce:	f383 8811 	msr	BASEPRI, r3
 8003dd2:	f3bf 8f6f 	isb	sy
 8003dd6:	f3bf 8f4f 	dsb	sy
 8003dda:	617b      	str	r3, [r7, #20]
 8003ddc:	e7fe      	b.n	8003ddc <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de0:	699a      	ldr	r2, [r3, #24]
 8003de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de4:	18d1      	adds	r1, r2, r3
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dec:	f7ff ff0a 	bl	8003c04 <prvInsertTimerInActiveList>
					break;
 8003df0:	e015      	b.n	8003e1e <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d103      	bne.n	8003e08 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8003e00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e02:	f000 fbc7 	bl	8004594 <vPortFree>
 8003e06:	e00a      	b.n	8003e1e <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e0e:	f023 0301 	bic.w	r3, r3, #1
 8003e12:	b2da      	uxtb	r2, r3
 8003e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003e1a:	e000      	b.n	8003e1e <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003e1c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e1e:	4b07      	ldr	r3, [pc, #28]	; (8003e3c <prvProcessReceivedCommands+0x1b4>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	1d39      	adds	r1, r7, #4
 8003e24:	2200      	movs	r2, #0
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7fe fa00 	bl	800222c <xQueueReceive>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f47f af2e 	bne.w	8003c90 <prvProcessReceivedCommands+0x8>
	}
}
 8003e34:	bf00      	nop
 8003e36:	3730      	adds	r7, #48	; 0x30
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	20000c18 	.word	0x20000c18

08003e40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b088      	sub	sp, #32
 8003e44:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003e46:	e047      	b.n	8003ed8 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e48:	4b2d      	ldr	r3, [pc, #180]	; (8003f00 <prvSwitchTimerLists+0xc0>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e52:	4b2b      	ldr	r3, [pc, #172]	; (8003f00 <prvSwitchTimerLists+0xc0>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	3304      	adds	r3, #4
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7fd febd 	bl	8001be0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6a1b      	ldr	r3, [r3, #32]
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e74:	f003 0304 	and.w	r3, r3, #4
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d02d      	beq.n	8003ed8 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	4413      	add	r3, r2
 8003e84:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d90e      	bls.n	8003eac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	68ba      	ldr	r2, [r7, #8]
 8003e92:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003e9a:	4b19      	ldr	r3, [pc, #100]	; (8003f00 <prvSwitchTimerLists+0xc0>)
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	4610      	mov	r0, r2
 8003ea6:	f7fd fe62 	bl	8001b6e <vListInsert>
 8003eaa:	e015      	b.n	8003ed8 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003eac:	2300      	movs	r3, #0
 8003eae:	9300      	str	r3, [sp, #0]
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	2100      	movs	r1, #0
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f7ff fd68 	bl	800398c <xTimerGenericCommand>
 8003ebc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d109      	bne.n	8003ed8 <prvSwitchTimerLists+0x98>
 8003ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec8:	f383 8811 	msr	BASEPRI, r3
 8003ecc:	f3bf 8f6f 	isb	sy
 8003ed0:	f3bf 8f4f 	dsb	sy
 8003ed4:	603b      	str	r3, [r7, #0]
 8003ed6:	e7fe      	b.n	8003ed6 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003ed8:	4b09      	ldr	r3, [pc, #36]	; (8003f00 <prvSwitchTimerLists+0xc0>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1b2      	bne.n	8003e48 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003ee2:	4b07      	ldr	r3, [pc, #28]	; (8003f00 <prvSwitchTimerLists+0xc0>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003ee8:	4b06      	ldr	r3, [pc, #24]	; (8003f04 <prvSwitchTimerLists+0xc4>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a04      	ldr	r2, [pc, #16]	; (8003f00 <prvSwitchTimerLists+0xc0>)
 8003eee:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003ef0:	4a04      	ldr	r2, [pc, #16]	; (8003f04 <prvSwitchTimerLists+0xc4>)
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	6013      	str	r3, [r2, #0]
}
 8003ef6:	bf00      	nop
 8003ef8:	3718      	adds	r7, #24
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	20000c10 	.word	0x20000c10
 8003f04:	20000c14 	.word	0x20000c14

08003f08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003f0e:	f000 f965 	bl	80041dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003f12:	4b15      	ldr	r3, [pc, #84]	; (8003f68 <prvCheckForValidListAndQueue+0x60>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d120      	bne.n	8003f5c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003f1a:	4814      	ldr	r0, [pc, #80]	; (8003f6c <prvCheckForValidListAndQueue+0x64>)
 8003f1c:	f7fd fdd6 	bl	8001acc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003f20:	4813      	ldr	r0, [pc, #76]	; (8003f70 <prvCheckForValidListAndQueue+0x68>)
 8003f22:	f7fd fdd3 	bl	8001acc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003f26:	4b13      	ldr	r3, [pc, #76]	; (8003f74 <prvCheckForValidListAndQueue+0x6c>)
 8003f28:	4a10      	ldr	r2, [pc, #64]	; (8003f6c <prvCheckForValidListAndQueue+0x64>)
 8003f2a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003f2c:	4b12      	ldr	r3, [pc, #72]	; (8003f78 <prvCheckForValidListAndQueue+0x70>)
 8003f2e:	4a10      	ldr	r2, [pc, #64]	; (8003f70 <prvCheckForValidListAndQueue+0x68>)
 8003f30:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003f32:	2300      	movs	r3, #0
 8003f34:	9300      	str	r3, [sp, #0]
 8003f36:	4b11      	ldr	r3, [pc, #68]	; (8003f7c <prvCheckForValidListAndQueue+0x74>)
 8003f38:	4a11      	ldr	r2, [pc, #68]	; (8003f80 <prvCheckForValidListAndQueue+0x78>)
 8003f3a:	2110      	movs	r1, #16
 8003f3c:	200a      	movs	r0, #10
 8003f3e:	f7fd fee1 	bl	8001d04 <xQueueGenericCreateStatic>
 8003f42:	4602      	mov	r2, r0
 8003f44:	4b08      	ldr	r3, [pc, #32]	; (8003f68 <prvCheckForValidListAndQueue+0x60>)
 8003f46:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003f48:	4b07      	ldr	r3, [pc, #28]	; (8003f68 <prvCheckForValidListAndQueue+0x60>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d005      	beq.n	8003f5c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003f50:	4b05      	ldr	r3, [pc, #20]	; (8003f68 <prvCheckForValidListAndQueue+0x60>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	490b      	ldr	r1, [pc, #44]	; (8003f84 <prvCheckForValidListAndQueue+0x7c>)
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7fe fc92 	bl	8002880 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f5c:	f000 f96c 	bl	8004238 <vPortExitCritical>
}
 8003f60:	bf00      	nop
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	20000c18 	.word	0x20000c18
 8003f6c:	20000be8 	.word	0x20000be8
 8003f70:	20000bfc 	.word	0x20000bfc
 8003f74:	20000c10 	.word	0x20000c10
 8003f78:	20000c14 	.word	0x20000c14
 8003f7c:	20000cc4 	.word	0x20000cc4
 8003f80:	20000c24 	.word	0x20000c24
 8003f84:	0800486c 	.word	0x0800486c

08003f88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	3b04      	subs	r3, #4
 8003f98:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003fa0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	3b04      	subs	r3, #4
 8003fa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	f023 0201 	bic.w	r2, r3, #1
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	3b04      	subs	r3, #4
 8003fb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003fb8:	4a0c      	ldr	r2, [pc, #48]	; (8003fec <pxPortInitialiseStack+0x64>)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	3b14      	subs	r3, #20
 8003fc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	3b04      	subs	r3, #4
 8003fce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f06f 0202 	mvn.w	r2, #2
 8003fd6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	3b20      	subs	r3, #32
 8003fdc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003fde:	68fb      	ldr	r3, [r7, #12]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3714      	adds	r7, #20
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr
 8003fec:	08003ff1 	.word	0x08003ff1

08003ff0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003ffa:	4b11      	ldr	r3, [pc, #68]	; (8004040 <prvTaskExitError+0x50>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004002:	d009      	beq.n	8004018 <prvTaskExitError+0x28>
 8004004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004008:	f383 8811 	msr	BASEPRI, r3
 800400c:	f3bf 8f6f 	isb	sy
 8004010:	f3bf 8f4f 	dsb	sy
 8004014:	60fb      	str	r3, [r7, #12]
 8004016:	e7fe      	b.n	8004016 <prvTaskExitError+0x26>
 8004018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800401c:	f383 8811 	msr	BASEPRI, r3
 8004020:	f3bf 8f6f 	isb	sy
 8004024:	f3bf 8f4f 	dsb	sy
 8004028:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800402a:	bf00      	nop
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d0fc      	beq.n	800402c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004032:	bf00      	nop
 8004034:	3714      	adds	r7, #20
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	2000000c 	.word	0x2000000c
	...

08004050 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004050:	4b07      	ldr	r3, [pc, #28]	; (8004070 <pxCurrentTCBConst2>)
 8004052:	6819      	ldr	r1, [r3, #0]
 8004054:	6808      	ldr	r0, [r1, #0]
 8004056:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800405a:	f380 8809 	msr	PSP, r0
 800405e:	f3bf 8f6f 	isb	sy
 8004062:	f04f 0000 	mov.w	r0, #0
 8004066:	f380 8811 	msr	BASEPRI, r0
 800406a:	4770      	bx	lr
 800406c:	f3af 8000 	nop.w

08004070 <pxCurrentTCBConst2>:
 8004070:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004074:	bf00      	nop
 8004076:	bf00      	nop

08004078 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004078:	4808      	ldr	r0, [pc, #32]	; (800409c <prvPortStartFirstTask+0x24>)
 800407a:	6800      	ldr	r0, [r0, #0]
 800407c:	6800      	ldr	r0, [r0, #0]
 800407e:	f380 8808 	msr	MSP, r0
 8004082:	f04f 0000 	mov.w	r0, #0
 8004086:	f380 8814 	msr	CONTROL, r0
 800408a:	b662      	cpsie	i
 800408c:	b661      	cpsie	f
 800408e:	f3bf 8f4f 	dsb	sy
 8004092:	f3bf 8f6f 	isb	sy
 8004096:	df00      	svc	0
 8004098:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800409a:	bf00      	nop
 800409c:	e000ed08 	.word	0xe000ed08

080040a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80040a6:	4b44      	ldr	r3, [pc, #272]	; (80041b8 <xPortStartScheduler+0x118>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a44      	ldr	r2, [pc, #272]	; (80041bc <xPortStartScheduler+0x11c>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d109      	bne.n	80040c4 <xPortStartScheduler+0x24>
 80040b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b4:	f383 8811 	msr	BASEPRI, r3
 80040b8:	f3bf 8f6f 	isb	sy
 80040bc:	f3bf 8f4f 	dsb	sy
 80040c0:	613b      	str	r3, [r7, #16]
 80040c2:	e7fe      	b.n	80040c2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80040c4:	4b3c      	ldr	r3, [pc, #240]	; (80041b8 <xPortStartScheduler+0x118>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a3d      	ldr	r2, [pc, #244]	; (80041c0 <xPortStartScheduler+0x120>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d109      	bne.n	80040e2 <xPortStartScheduler+0x42>
 80040ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d2:	f383 8811 	msr	BASEPRI, r3
 80040d6:	f3bf 8f6f 	isb	sy
 80040da:	f3bf 8f4f 	dsb	sy
 80040de:	60fb      	str	r3, [r7, #12]
 80040e0:	e7fe      	b.n	80040e0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80040e2:	4b38      	ldr	r3, [pc, #224]	; (80041c4 <xPortStartScheduler+0x124>)
 80040e4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	22ff      	movs	r2, #255	; 0xff
 80040f2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80040fc:	78fb      	ldrb	r3, [r7, #3]
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004104:	b2da      	uxtb	r2, r3
 8004106:	4b30      	ldr	r3, [pc, #192]	; (80041c8 <xPortStartScheduler+0x128>)
 8004108:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800410a:	4b30      	ldr	r3, [pc, #192]	; (80041cc <xPortStartScheduler+0x12c>)
 800410c:	2207      	movs	r2, #7
 800410e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004110:	e009      	b.n	8004126 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004112:	4b2e      	ldr	r3, [pc, #184]	; (80041cc <xPortStartScheduler+0x12c>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	3b01      	subs	r3, #1
 8004118:	4a2c      	ldr	r2, [pc, #176]	; (80041cc <xPortStartScheduler+0x12c>)
 800411a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800411c:	78fb      	ldrb	r3, [r7, #3]
 800411e:	b2db      	uxtb	r3, r3
 8004120:	005b      	lsls	r3, r3, #1
 8004122:	b2db      	uxtb	r3, r3
 8004124:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004126:	78fb      	ldrb	r3, [r7, #3]
 8004128:	b2db      	uxtb	r3, r3
 800412a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800412e:	2b80      	cmp	r3, #128	; 0x80
 8004130:	d0ef      	beq.n	8004112 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004132:	4b26      	ldr	r3, [pc, #152]	; (80041cc <xPortStartScheduler+0x12c>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f1c3 0307 	rsb	r3, r3, #7
 800413a:	2b04      	cmp	r3, #4
 800413c:	d009      	beq.n	8004152 <xPortStartScheduler+0xb2>
 800413e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004142:	f383 8811 	msr	BASEPRI, r3
 8004146:	f3bf 8f6f 	isb	sy
 800414a:	f3bf 8f4f 	dsb	sy
 800414e:	60bb      	str	r3, [r7, #8]
 8004150:	e7fe      	b.n	8004150 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004152:	4b1e      	ldr	r3, [pc, #120]	; (80041cc <xPortStartScheduler+0x12c>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	021b      	lsls	r3, r3, #8
 8004158:	4a1c      	ldr	r2, [pc, #112]	; (80041cc <xPortStartScheduler+0x12c>)
 800415a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800415c:	4b1b      	ldr	r3, [pc, #108]	; (80041cc <xPortStartScheduler+0x12c>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004164:	4a19      	ldr	r2, [pc, #100]	; (80041cc <xPortStartScheduler+0x12c>)
 8004166:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	b2da      	uxtb	r2, r3
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004170:	4b17      	ldr	r3, [pc, #92]	; (80041d0 <xPortStartScheduler+0x130>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a16      	ldr	r2, [pc, #88]	; (80041d0 <xPortStartScheduler+0x130>)
 8004176:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800417a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800417c:	4b14      	ldr	r3, [pc, #80]	; (80041d0 <xPortStartScheduler+0x130>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a13      	ldr	r2, [pc, #76]	; (80041d0 <xPortStartScheduler+0x130>)
 8004182:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004186:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004188:	f000 f8d6 	bl	8004338 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800418c:	4b11      	ldr	r3, [pc, #68]	; (80041d4 <xPortStartScheduler+0x134>)
 800418e:	2200      	movs	r2, #0
 8004190:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004192:	f000 f8f5 	bl	8004380 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004196:	4b10      	ldr	r3, [pc, #64]	; (80041d8 <xPortStartScheduler+0x138>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a0f      	ldr	r2, [pc, #60]	; (80041d8 <xPortStartScheduler+0x138>)
 800419c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80041a0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80041a2:	f7ff ff69 	bl	8004078 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80041a6:	f7fe ff6f 	bl	8003088 <vTaskSwitchContext>
	prvTaskExitError();
 80041aa:	f7ff ff21 	bl	8003ff0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3718      	adds	r7, #24
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	e000ed00 	.word	0xe000ed00
 80041bc:	410fc271 	.word	0x410fc271
 80041c0:	410fc270 	.word	0x410fc270
 80041c4:	e000e400 	.word	0xe000e400
 80041c8:	20000d14 	.word	0x20000d14
 80041cc:	20000d18 	.word	0x20000d18
 80041d0:	e000ed20 	.word	0xe000ed20
 80041d4:	2000000c 	.word	0x2000000c
 80041d8:	e000ef34 	.word	0xe000ef34

080041dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e6:	f383 8811 	msr	BASEPRI, r3
 80041ea:	f3bf 8f6f 	isb	sy
 80041ee:	f3bf 8f4f 	dsb	sy
 80041f2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80041f4:	4b0e      	ldr	r3, [pc, #56]	; (8004230 <vPortEnterCritical+0x54>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	3301      	adds	r3, #1
 80041fa:	4a0d      	ldr	r2, [pc, #52]	; (8004230 <vPortEnterCritical+0x54>)
 80041fc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80041fe:	4b0c      	ldr	r3, [pc, #48]	; (8004230 <vPortEnterCritical+0x54>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d10e      	bne.n	8004224 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004206:	4b0b      	ldr	r3, [pc, #44]	; (8004234 <vPortEnterCritical+0x58>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	b2db      	uxtb	r3, r3
 800420c:	2b00      	cmp	r3, #0
 800420e:	d009      	beq.n	8004224 <vPortEnterCritical+0x48>
 8004210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004214:	f383 8811 	msr	BASEPRI, r3
 8004218:	f3bf 8f6f 	isb	sy
 800421c:	f3bf 8f4f 	dsb	sy
 8004220:	603b      	str	r3, [r7, #0]
 8004222:	e7fe      	b.n	8004222 <vPortEnterCritical+0x46>
	}
}
 8004224:	bf00      	nop
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr
 8004230:	2000000c 	.word	0x2000000c
 8004234:	e000ed04 	.word	0xe000ed04

08004238 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800423e:	4b11      	ldr	r3, [pc, #68]	; (8004284 <vPortExitCritical+0x4c>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d109      	bne.n	800425a <vPortExitCritical+0x22>
 8004246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800424a:	f383 8811 	msr	BASEPRI, r3
 800424e:	f3bf 8f6f 	isb	sy
 8004252:	f3bf 8f4f 	dsb	sy
 8004256:	607b      	str	r3, [r7, #4]
 8004258:	e7fe      	b.n	8004258 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800425a:	4b0a      	ldr	r3, [pc, #40]	; (8004284 <vPortExitCritical+0x4c>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	3b01      	subs	r3, #1
 8004260:	4a08      	ldr	r2, [pc, #32]	; (8004284 <vPortExitCritical+0x4c>)
 8004262:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004264:	4b07      	ldr	r3, [pc, #28]	; (8004284 <vPortExitCritical+0x4c>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d104      	bne.n	8004276 <vPortExitCritical+0x3e>
 800426c:	2300      	movs	r3, #0
 800426e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004276:	bf00      	nop
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	2000000c 	.word	0x2000000c
	...

08004290 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004290:	f3ef 8009 	mrs	r0, PSP
 8004294:	f3bf 8f6f 	isb	sy
 8004298:	4b15      	ldr	r3, [pc, #84]	; (80042f0 <pxCurrentTCBConst>)
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	f01e 0f10 	tst.w	lr, #16
 80042a0:	bf08      	it	eq
 80042a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80042a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042aa:	6010      	str	r0, [r2, #0]
 80042ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80042b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80042b4:	f380 8811 	msr	BASEPRI, r0
 80042b8:	f3bf 8f4f 	dsb	sy
 80042bc:	f3bf 8f6f 	isb	sy
 80042c0:	f7fe fee2 	bl	8003088 <vTaskSwitchContext>
 80042c4:	f04f 0000 	mov.w	r0, #0
 80042c8:	f380 8811 	msr	BASEPRI, r0
 80042cc:	bc09      	pop	{r0, r3}
 80042ce:	6819      	ldr	r1, [r3, #0]
 80042d0:	6808      	ldr	r0, [r1, #0]
 80042d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042d6:	f01e 0f10 	tst.w	lr, #16
 80042da:	bf08      	it	eq
 80042dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80042e0:	f380 8809 	msr	PSP, r0
 80042e4:	f3bf 8f6f 	isb	sy
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	f3af 8000 	nop.w

080042f0 <pxCurrentTCBConst>:
 80042f0:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80042f4:	bf00      	nop
 80042f6:	bf00      	nop

080042f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
	__asm volatile
 80042fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004302:	f383 8811 	msr	BASEPRI, r3
 8004306:	f3bf 8f6f 	isb	sy
 800430a:	f3bf 8f4f 	dsb	sy
 800430e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004310:	f7fe fe02 	bl	8002f18 <xTaskIncrementTick>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d003      	beq.n	8004322 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800431a:	4b06      	ldr	r3, [pc, #24]	; (8004334 <xPortSysTickHandler+0x3c>)
 800431c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004320:	601a      	str	r2, [r3, #0]
 8004322:	2300      	movs	r3, #0
 8004324:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800432c:	bf00      	nop
 800432e:	3708      	adds	r7, #8
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	e000ed04 	.word	0xe000ed04

08004338 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004338:	b480      	push	{r7}
 800433a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800433c:	4b0b      	ldr	r3, [pc, #44]	; (800436c <vPortSetupTimerInterrupt+0x34>)
 800433e:	2200      	movs	r2, #0
 8004340:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004342:	4b0b      	ldr	r3, [pc, #44]	; (8004370 <vPortSetupTimerInterrupt+0x38>)
 8004344:	2200      	movs	r2, #0
 8004346:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004348:	4b0a      	ldr	r3, [pc, #40]	; (8004374 <vPortSetupTimerInterrupt+0x3c>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a0a      	ldr	r2, [pc, #40]	; (8004378 <vPortSetupTimerInterrupt+0x40>)
 800434e:	fba2 2303 	umull	r2, r3, r2, r3
 8004352:	099b      	lsrs	r3, r3, #6
 8004354:	4a09      	ldr	r2, [pc, #36]	; (800437c <vPortSetupTimerInterrupt+0x44>)
 8004356:	3b01      	subs	r3, #1
 8004358:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800435a:	4b04      	ldr	r3, [pc, #16]	; (800436c <vPortSetupTimerInterrupt+0x34>)
 800435c:	2207      	movs	r2, #7
 800435e:	601a      	str	r2, [r3, #0]
}
 8004360:	bf00      	nop
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	e000e010 	.word	0xe000e010
 8004370:	e000e018 	.word	0xe000e018
 8004374:	20000000 	.word	0x20000000
 8004378:	10624dd3 	.word	0x10624dd3
 800437c:	e000e014 	.word	0xe000e014

08004380 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004380:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004390 <vPortEnableVFP+0x10>
 8004384:	6801      	ldr	r1, [r0, #0]
 8004386:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800438a:	6001      	str	r1, [r0, #0]
 800438c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800438e:	bf00      	nop
 8004390:	e000ed88 	.word	0xe000ed88

08004394 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800439a:	f3ef 8305 	mrs	r3, IPSR
 800439e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2b0f      	cmp	r3, #15
 80043a4:	d913      	bls.n	80043ce <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80043a6:	4a16      	ldr	r2, [pc, #88]	; (8004400 <vPortValidateInterruptPriority+0x6c>)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	4413      	add	r3, r2
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80043b0:	4b14      	ldr	r3, [pc, #80]	; (8004404 <vPortValidateInterruptPriority+0x70>)
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	7afa      	ldrb	r2, [r7, #11]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d209      	bcs.n	80043ce <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80043ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043be:	f383 8811 	msr	BASEPRI, r3
 80043c2:	f3bf 8f6f 	isb	sy
 80043c6:	f3bf 8f4f 	dsb	sy
 80043ca:	607b      	str	r3, [r7, #4]
 80043cc:	e7fe      	b.n	80043cc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80043ce:	4b0e      	ldr	r3, [pc, #56]	; (8004408 <vPortValidateInterruptPriority+0x74>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80043d6:	4b0d      	ldr	r3, [pc, #52]	; (800440c <vPortValidateInterruptPriority+0x78>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d909      	bls.n	80043f2 <vPortValidateInterruptPriority+0x5e>
 80043de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e2:	f383 8811 	msr	BASEPRI, r3
 80043e6:	f3bf 8f6f 	isb	sy
 80043ea:	f3bf 8f4f 	dsb	sy
 80043ee:	603b      	str	r3, [r7, #0]
 80043f0:	e7fe      	b.n	80043f0 <vPortValidateInterruptPriority+0x5c>
	}
 80043f2:	bf00      	nop
 80043f4:	3714      	adds	r7, #20
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	e000e3f0 	.word	0xe000e3f0
 8004404:	20000d14 	.word	0x20000d14
 8004408:	e000ed0c 	.word	0xe000ed0c
 800440c:	20000d18 	.word	0x20000d18

08004410 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b08a      	sub	sp, #40	; 0x28
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004418:	2300      	movs	r3, #0
 800441a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800441c:	f7fe fcc2 	bl	8002da4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004420:	4b57      	ldr	r3, [pc, #348]	; (8004580 <pvPortMalloc+0x170>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d101      	bne.n	800442c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004428:	f000 f90c 	bl	8004644 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800442c:	4b55      	ldr	r3, [pc, #340]	; (8004584 <pvPortMalloc+0x174>)
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4013      	ands	r3, r2
 8004434:	2b00      	cmp	r3, #0
 8004436:	f040 808c 	bne.w	8004552 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d01c      	beq.n	800447a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004440:	2208      	movs	r2, #8
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4413      	add	r3, r2
 8004446:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f003 0307 	and.w	r3, r3, #7
 800444e:	2b00      	cmp	r3, #0
 8004450:	d013      	beq.n	800447a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f023 0307 	bic.w	r3, r3, #7
 8004458:	3308      	adds	r3, #8
 800445a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f003 0307 	and.w	r3, r3, #7
 8004462:	2b00      	cmp	r3, #0
 8004464:	d009      	beq.n	800447a <pvPortMalloc+0x6a>
 8004466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800446a:	f383 8811 	msr	BASEPRI, r3
 800446e:	f3bf 8f6f 	isb	sy
 8004472:	f3bf 8f4f 	dsb	sy
 8004476:	617b      	str	r3, [r7, #20]
 8004478:	e7fe      	b.n	8004478 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d068      	beq.n	8004552 <pvPortMalloc+0x142>
 8004480:	4b41      	ldr	r3, [pc, #260]	; (8004588 <pvPortMalloc+0x178>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	429a      	cmp	r2, r3
 8004488:	d863      	bhi.n	8004552 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800448a:	4b40      	ldr	r3, [pc, #256]	; (800458c <pvPortMalloc+0x17c>)
 800448c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800448e:	4b3f      	ldr	r3, [pc, #252]	; (800458c <pvPortMalloc+0x17c>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004494:	e004      	b.n	80044a0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004498:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800449a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80044a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d903      	bls.n	80044b2 <pvPortMalloc+0xa2>
 80044aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d1f1      	bne.n	8004496 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80044b2:	4b33      	ldr	r3, [pc, #204]	; (8004580 <pvPortMalloc+0x170>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d04a      	beq.n	8004552 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80044bc:	6a3b      	ldr	r3, [r7, #32]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2208      	movs	r2, #8
 80044c2:	4413      	add	r3, r2
 80044c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80044c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	6a3b      	ldr	r3, [r7, #32]
 80044cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80044ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d0:	685a      	ldr	r2, [r3, #4]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	1ad2      	subs	r2, r2, r3
 80044d6:	2308      	movs	r3, #8
 80044d8:	005b      	lsls	r3, r3, #1
 80044da:	429a      	cmp	r2, r3
 80044dc:	d91e      	bls.n	800451c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80044de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4413      	add	r3, r2
 80044e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	f003 0307 	and.w	r3, r3, #7
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d009      	beq.n	8004504 <pvPortMalloc+0xf4>
 80044f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f4:	f383 8811 	msr	BASEPRI, r3
 80044f8:	f3bf 8f6f 	isb	sy
 80044fc:	f3bf 8f4f 	dsb	sy
 8004500:	613b      	str	r3, [r7, #16]
 8004502:	e7fe      	b.n	8004502 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004506:	685a      	ldr	r2, [r3, #4]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	1ad2      	subs	r2, r2, r3
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004516:	69b8      	ldr	r0, [r7, #24]
 8004518:	f000 f8f6 	bl	8004708 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800451c:	4b1a      	ldr	r3, [pc, #104]	; (8004588 <pvPortMalloc+0x178>)
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	4a18      	ldr	r2, [pc, #96]	; (8004588 <pvPortMalloc+0x178>)
 8004528:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800452a:	4b17      	ldr	r3, [pc, #92]	; (8004588 <pvPortMalloc+0x178>)
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	4b18      	ldr	r3, [pc, #96]	; (8004590 <pvPortMalloc+0x180>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	429a      	cmp	r2, r3
 8004534:	d203      	bcs.n	800453e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004536:	4b14      	ldr	r3, [pc, #80]	; (8004588 <pvPortMalloc+0x178>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a15      	ldr	r2, [pc, #84]	; (8004590 <pvPortMalloc+0x180>)
 800453c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800453e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	4b10      	ldr	r3, [pc, #64]	; (8004584 <pvPortMalloc+0x174>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	431a      	orrs	r2, r3
 8004548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800454c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454e:	2200      	movs	r2, #0
 8004550:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004552:	f7fe fc35 	bl	8002dc0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	f003 0307 	and.w	r3, r3, #7
 800455c:	2b00      	cmp	r3, #0
 800455e:	d009      	beq.n	8004574 <pvPortMalloc+0x164>
 8004560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004564:	f383 8811 	msr	BASEPRI, r3
 8004568:	f3bf 8f6f 	isb	sy
 800456c:	f3bf 8f4f 	dsb	sy
 8004570:	60fb      	str	r3, [r7, #12]
 8004572:	e7fe      	b.n	8004572 <pvPortMalloc+0x162>
	return pvReturn;
 8004574:	69fb      	ldr	r3, [r7, #28]
}
 8004576:	4618      	mov	r0, r3
 8004578:	3728      	adds	r7, #40	; 0x28
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	20004924 	.word	0x20004924
 8004584:	20004930 	.word	0x20004930
 8004588:	20004928 	.word	0x20004928
 800458c:	2000491c 	.word	0x2000491c
 8004590:	2000492c 	.word	0x2000492c

08004594 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b086      	sub	sp, #24
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d046      	beq.n	8004634 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80045a6:	2308      	movs	r3, #8
 80045a8:	425b      	negs	r3, r3
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	4413      	add	r3, r2
 80045ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	685a      	ldr	r2, [r3, #4]
 80045b8:	4b20      	ldr	r3, [pc, #128]	; (800463c <vPortFree+0xa8>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4013      	ands	r3, r2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d109      	bne.n	80045d6 <vPortFree+0x42>
 80045c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c6:	f383 8811 	msr	BASEPRI, r3
 80045ca:	f3bf 8f6f 	isb	sy
 80045ce:	f3bf 8f4f 	dsb	sy
 80045d2:	60fb      	str	r3, [r7, #12]
 80045d4:	e7fe      	b.n	80045d4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d009      	beq.n	80045f2 <vPortFree+0x5e>
 80045de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e2:	f383 8811 	msr	BASEPRI, r3
 80045e6:	f3bf 8f6f 	isb	sy
 80045ea:	f3bf 8f4f 	dsb	sy
 80045ee:	60bb      	str	r3, [r7, #8]
 80045f0:	e7fe      	b.n	80045f0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	685a      	ldr	r2, [r3, #4]
 80045f6:	4b11      	ldr	r3, [pc, #68]	; (800463c <vPortFree+0xa8>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4013      	ands	r3, r2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d019      	beq.n	8004634 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d115      	bne.n	8004634 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	4b0b      	ldr	r3, [pc, #44]	; (800463c <vPortFree+0xa8>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	43db      	mvns	r3, r3
 8004612:	401a      	ands	r2, r3
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004618:	f7fe fbc4 	bl	8002da4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	685a      	ldr	r2, [r3, #4]
 8004620:	4b07      	ldr	r3, [pc, #28]	; (8004640 <vPortFree+0xac>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4413      	add	r3, r2
 8004626:	4a06      	ldr	r2, [pc, #24]	; (8004640 <vPortFree+0xac>)
 8004628:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800462a:	6938      	ldr	r0, [r7, #16]
 800462c:	f000 f86c 	bl	8004708 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004630:	f7fe fbc6 	bl	8002dc0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004634:	bf00      	nop
 8004636:	3718      	adds	r7, #24
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	20004930 	.word	0x20004930
 8004640:	20004928 	.word	0x20004928

08004644 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800464a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800464e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004650:	4b27      	ldr	r3, [pc, #156]	; (80046f0 <prvHeapInit+0xac>)
 8004652:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f003 0307 	and.w	r3, r3, #7
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00c      	beq.n	8004678 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	3307      	adds	r3, #7
 8004662:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f023 0307 	bic.w	r3, r3, #7
 800466a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	4a1f      	ldr	r2, [pc, #124]	; (80046f0 <prvHeapInit+0xac>)
 8004674:	4413      	add	r3, r2
 8004676:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800467c:	4a1d      	ldr	r2, [pc, #116]	; (80046f4 <prvHeapInit+0xb0>)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004682:	4b1c      	ldr	r3, [pc, #112]	; (80046f4 <prvHeapInit+0xb0>)
 8004684:	2200      	movs	r2, #0
 8004686:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	68ba      	ldr	r2, [r7, #8]
 800468c:	4413      	add	r3, r2
 800468e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004690:	2208      	movs	r2, #8
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	1a9b      	subs	r3, r3, r2
 8004696:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f023 0307 	bic.w	r3, r3, #7
 800469e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	4a15      	ldr	r2, [pc, #84]	; (80046f8 <prvHeapInit+0xb4>)
 80046a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80046a6:	4b14      	ldr	r3, [pc, #80]	; (80046f8 <prvHeapInit+0xb4>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2200      	movs	r2, #0
 80046ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80046ae:	4b12      	ldr	r3, [pc, #72]	; (80046f8 <prvHeapInit+0xb4>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2200      	movs	r2, #0
 80046b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	1ad2      	subs	r2, r2, r3
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80046c4:	4b0c      	ldr	r3, [pc, #48]	; (80046f8 <prvHeapInit+0xb4>)
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	4a0a      	ldr	r2, [pc, #40]	; (80046fc <prvHeapInit+0xb8>)
 80046d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	4a09      	ldr	r2, [pc, #36]	; (8004700 <prvHeapInit+0xbc>)
 80046da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80046dc:	4b09      	ldr	r3, [pc, #36]	; (8004704 <prvHeapInit+0xc0>)
 80046de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80046e2:	601a      	str	r2, [r3, #0]
}
 80046e4:	bf00      	nop
 80046e6:	3714      	adds	r7, #20
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr
 80046f0:	20000d1c 	.word	0x20000d1c
 80046f4:	2000491c 	.word	0x2000491c
 80046f8:	20004924 	.word	0x20004924
 80046fc:	2000492c 	.word	0x2000492c
 8004700:	20004928 	.word	0x20004928
 8004704:	20004930 	.word	0x20004930

08004708 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004708:	b480      	push	{r7}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004710:	4b28      	ldr	r3, [pc, #160]	; (80047b4 <prvInsertBlockIntoFreeList+0xac>)
 8004712:	60fb      	str	r3, [r7, #12]
 8004714:	e002      	b.n	800471c <prvInsertBlockIntoFreeList+0x14>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	60fb      	str	r3, [r7, #12]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	429a      	cmp	r2, r3
 8004724:	d8f7      	bhi.n	8004716 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	4413      	add	r3, r2
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	429a      	cmp	r2, r3
 8004736:	d108      	bne.n	800474a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	685a      	ldr	r2, [r3, #4]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	441a      	add	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	68ba      	ldr	r2, [r7, #8]
 8004754:	441a      	add	r2, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	429a      	cmp	r2, r3
 800475c:	d118      	bne.n	8004790 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	4b15      	ldr	r3, [pc, #84]	; (80047b8 <prvInsertBlockIntoFreeList+0xb0>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	429a      	cmp	r2, r3
 8004768:	d00d      	beq.n	8004786 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685a      	ldr	r2, [r3, #4]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	441a      	add	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	601a      	str	r2, [r3, #0]
 8004784:	e008      	b.n	8004798 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004786:	4b0c      	ldr	r3, [pc, #48]	; (80047b8 <prvInsertBlockIntoFreeList+0xb0>)
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	601a      	str	r2, [r3, #0]
 800478e:	e003      	b.n	8004798 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	429a      	cmp	r2, r3
 800479e:	d002      	beq.n	80047a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047a6:	bf00      	nop
 80047a8:	3714      	adds	r7, #20
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	2000491c 	.word	0x2000491c
 80047b8:	20004924 	.word	0x20004924

080047bc <__libc_init_array>:
 80047bc:	b570      	push	{r4, r5, r6, lr}
 80047be:	4e0d      	ldr	r6, [pc, #52]	; (80047f4 <__libc_init_array+0x38>)
 80047c0:	4c0d      	ldr	r4, [pc, #52]	; (80047f8 <__libc_init_array+0x3c>)
 80047c2:	1ba4      	subs	r4, r4, r6
 80047c4:	10a4      	asrs	r4, r4, #2
 80047c6:	2500      	movs	r5, #0
 80047c8:	42a5      	cmp	r5, r4
 80047ca:	d109      	bne.n	80047e0 <__libc_init_array+0x24>
 80047cc:	4e0b      	ldr	r6, [pc, #44]	; (80047fc <__libc_init_array+0x40>)
 80047ce:	4c0c      	ldr	r4, [pc, #48]	; (8004800 <__libc_init_array+0x44>)
 80047d0:	f000 f82c 	bl	800482c <_init>
 80047d4:	1ba4      	subs	r4, r4, r6
 80047d6:	10a4      	asrs	r4, r4, #2
 80047d8:	2500      	movs	r5, #0
 80047da:	42a5      	cmp	r5, r4
 80047dc:	d105      	bne.n	80047ea <__libc_init_array+0x2e>
 80047de:	bd70      	pop	{r4, r5, r6, pc}
 80047e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80047e4:	4798      	blx	r3
 80047e6:	3501      	adds	r5, #1
 80047e8:	e7ee      	b.n	80047c8 <__libc_init_array+0xc>
 80047ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80047ee:	4798      	blx	r3
 80047f0:	3501      	adds	r5, #1
 80047f2:	e7f2      	b.n	80047da <__libc_init_array+0x1e>
 80047f4:	080048f8 	.word	0x080048f8
 80047f8:	080048f8 	.word	0x080048f8
 80047fc:	080048f8 	.word	0x080048f8
 8004800:	080048fc 	.word	0x080048fc

08004804 <memcpy>:
 8004804:	b510      	push	{r4, lr}
 8004806:	1e43      	subs	r3, r0, #1
 8004808:	440a      	add	r2, r1
 800480a:	4291      	cmp	r1, r2
 800480c:	d100      	bne.n	8004810 <memcpy+0xc>
 800480e:	bd10      	pop	{r4, pc}
 8004810:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004814:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004818:	e7f7      	b.n	800480a <memcpy+0x6>

0800481a <memset>:
 800481a:	4402      	add	r2, r0
 800481c:	4603      	mov	r3, r0
 800481e:	4293      	cmp	r3, r2
 8004820:	d100      	bne.n	8004824 <memset+0xa>
 8004822:	4770      	bx	lr
 8004824:	f803 1b01 	strb.w	r1, [r3], #1
 8004828:	e7f9      	b.n	800481e <memset+0x4>
	...

0800482c <_init>:
 800482c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800482e:	bf00      	nop
 8004830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004832:	bc08      	pop	{r3}
 8004834:	469e      	mov	lr, r3
 8004836:	4770      	bx	lr

08004838 <_fini>:
 8004838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800483a:	bf00      	nop
 800483c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800483e:	bc08      	pop	{r3}
 8004840:	469e      	mov	lr, r3
 8004842:	4770      	bx	lr
